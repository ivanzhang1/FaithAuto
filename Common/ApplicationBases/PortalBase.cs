using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Linq;
using System.Globalization;
using System.Web;
using Selenium;
using Gallio.Framework;
using MbUnit.Framework;
using MbUnit.Framework.ContractVerifiers;

using System.Threading;
using System.Collections.ObjectModel;

using OpenQA.Selenium.Remote;
using OpenQA.Selenium.Support.UI;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using System.Collections.ObjectModel;
using log4net;

using ActiveUp.Net.Mail;


namespace FTTests
{

    public class PortalBase
    {

        //private ScreenShotRemoteWebDriver _screenShotDriver;
        private RemoteWebDriver _driver;
        private ISelenium _selenium;
        private string _portalUser;
        private string _portalUsername;
        private string _portalPassword;
        private string _churchCode;
        private int _churchID;
        private GeneralMethods _generalMethods;
        private IList<string> _errorText = new List<string>();
        private JavaScript _javascript;
        private F1Environments _f1Environment;
        private SQL _sql;

        private static readonly ILog log = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        /// <summary>
        /// TODO: Clean up these constants. We don't need to spell out all these constants for links
        /// </summary>
        public struct GroupsByGroupTypeConstants
        {
            public struct ViewAll
            {
                //Header links
                public const string HeaderLink_NameAndStartDate = "link=Name and start date";
                public const string HeaderLink_Name = "link=Name";
                public const string HeaderLink_GroupTypesAndCustomFields = "Group types and custom fields";
                public const string HeaderLink_StandardFields = "link=Standard fields";
                public const string HeaderLink_Demographics = "link=Standard Fields";

                // Search options and fields
                public const string NameField = "group_name";
                public const string IndividualNameField = "individual_name";
                public const string StartDateFrom = "start_date_from";
                public const string StartDateTo = "start_date_to";
                public const string CheckBox_Coed = "gender_0";
                public const string CheckBox_Female = "gender_1";
                public const string CheckBox_Male = "gender_2";
                public const string CheckBox_Married = "marital_status_1";
                public const string CheckBox_Single = "marital_status_2";
                public const string CheckBox_MarriedOrSingle = "marital_status_0";
                public const string DropDown_AgeRangeMin = "age_range_min";
                public const string DropdDown_AgeRangeMax = "age_range_max";
                public const string CheckBox_Sunday = "day_of_week_1";
                public const string CheckBox_Monday = "day_of_week_2";
                public const string CheckBox_Tuesday = "day_of_week_3";
                public const string CheckBox_Wednesday = "day_of_week_4";
                public const string CheckBox_Thursday = "day_of_week_5";
                public const string CheckBox_Friday = "day_of_week_6";
                public const string CheckBox_Saturday = "day_of_week_7";

                public const string SearchButton = "commit";

                // Show Leaders Members Gear
                public const string Gear_GroupsTab = "link=Actions";
                public const string Gear_Link_ShowLeadersMembers = "link=Show Leaders and Members";
                public const string Gear_Link_Export = "link=Export...";
            }

            public struct SaveASearch
            {
                public const string Field_Name = "new_search_name";
                public const string Field_Description = "new_description";
                public const string Link_Drawer = "//img[@alt='Search_pull_tab']";
                public const string Button_SaveSearch = "btn_save_search";
            }

            public struct GroupManagement
            {
                public const string Button_Add_Member_Save = "add_new_member";
                public const string Button_EditDetailsSaveChanges = "submitQuery";
                public const string Button_NewLocationSaveChanges = "submitQuery";
                public const string Button_NewScheduleSaveChanges = "submitQuery";
                public const string Button_CustomFieldSaveChanges = "//input[@value='Save changes']";

                public const string Checkbox_PrivateLocation = "is_private";

                public const string Dropdown_Member_Role = "GroupMemberType";
                public const string Dropdown_GroupTimeZone = "time_zone";
                public const string DropDown_State = "ddlStates";

                public const string Link_NewLocation = "link=New location";
                public const string Link_EditLocation = "link=Edit location";
                public const string Link_NewSchedule = "link=New schedule";
                public const string Link_AddCustomField = "link=Add custom field";

                public const string Link_ViewProspects = "link=Prospects";
                public const string Link_ViewProspects_Active = "link=//a[contains(@href, 'showActive=True')]";
                public const string Link_ViewProspects_Closed = "//*[@id='closed_count']";
                public const string Link_ViewGroupSettings = "link=View group settings";
                public const string Link_ViewGroupSettings_Link = "View group settings";

                public const string Link_ChangePermissions = "link=Change permissions";

                public const string Link_EditGroupDetails = "link=Edit group details";
                public const string Link_EditGroupDetails_Link = "Edit group details";
                public const string Link_EditGroupCustomFields = "Manage custom fields";

                public const string Link_DeleteGroup = "link=Delete this group";
                public const string Link_DeleteGroup_Link = "Delete this group";
                public const string Link_DeleteSchedule = "link=Delete schedule";

                public const string Gear_ProspectsMenu = "link=Actions";
                public const string Gear_ProspectsMenu_ExportToCSV = "link=Export to CSV";


                public const string DateControl_GroupStartDate = "start_date";
                public const string DateControl_ScheduleStartDate = "start_date";

                public const string TextField_ScheduleStartTime = "start_time";
                public const string TextField_GroupName = "group_name";
                public const string TextField_GroupDescription = "group_description";
                public const string TextField_LocationName = "location_name";
                public const string TextField_LocationDescription = "location_description";
                public const string TextField_Address1 = "address_address1";
                public const string TextField_City = "address_city";
                public const string TextField_ZipCode = "address_postalcode";

                public const string RadioButton_WeeklyEvent = "recurrence_weekly";
                public const string RadioButton_MonthlyEvent = "recurrence_monthly";

                // Custom Field UI at the group level
                public const string CustomFields_SectionLandingPage = "//div[@id='main_content']/div[1]/div[2]/div[4]";
                public const string CustomFields_PageHeaders = "//div[@id='main_content']/div[1]/div[2]/form/h3";
            }

            public struct ShowLeadersAndMembers
            {
                public const string RadioButton_Filter_All = "filter_all";
                public const string RadioButton_Filter_Leaders = "filter_leaders";
                public const string RadioButton_Filter_Members = "filter_members";

                public const string Button_Filter = GeneralButtons.submitQuery;
            }

            public struct Wizard_ExportCSV
            {
                public const string Link_Back = "link=← Back";
                public const string Button_Next = "button_submit";

                public const string Checkbox_All = "//input[@type='checkbox']";
                public const string Checkbox_IndividualName = "//input[@name='column_name' and @value='Individual Name']";
                public const string Checkbox_CommunicationEmail = "//input[@name='column_name' and @value='Communication - Email Count']";
                public const string Checkbox_CommunicationPhone = "//input[@name='column_name' and @value='Communication – Phone Count']";
                public const string Checkbox_CommunicationMeeting = "//input[@name='column_name' and @value='Communication – Meeting Count']";
                public const string Checkbox_CommunicationComment = "//input[@name='column_name' and @value='Communication – Comment Count']";
                public const string Link_ReturnToProspects = "link=Return to prospects";
            }

            public struct Wizard_GroupCreation
            {
                public const string Link_EditStep1 = "//a[contains(@href, '/Groups/Group/Step1.aspx')]";
                public const string Link_EditStep2 = "//a[contains(@href, '/Groups/Group/Step2.aspx')]";
                public const string Link_EditStep3 = "//a[contains(@href, '/Groups/Group/Step3.aspx')]";
                public const string Link_EditStep4 = "//a[contains(@href, '/Groups/Group/Step4.aspx')]";

                public const string Link_AddGroup_Active_Group = "active_group_add";

                public const string Step2_TextField_GroupName = "group_name";
                public const string Step2_TextField_GroupDescription = "group_description";
                public const string Step2_DropDown_GroupTimeZone = "time_zone";
                public const string Step2_DropDown_Campus = "group_campus";
                public const string Step2_DateControl_StartDate = "start_date";
                public const string Step2_DropDown_Gender = "group_gender";
                public const string Step2_DropDown_MaritalStatus = "marital_status";
                public const string Step2_Dropdown_AgeRangeLower = "age_from";
                public const string Step2_Dropdown_AgeRangeUpper = "age_to";
                public const string Step2_Checkbox_Childcare = "childcare";
                public const string Step2_Checkbox_Unlockable = "unlock_group";
                public const string Step2_Checkbox_Searchable = "is_searchable";
                public const string Step2_Button_Next = "submitQuery";
                public const string Step2_Link_Back = "link=← Back";

                public const string Step3_Link_SkipThisStep = "link=Skip this step →";
                public const string Step3_DateControl_ScheduleStartDate = "start_date";
                public const string Step3_TextField_ScheduleStartTime = "start_time";
                public const string Step3_TextField_ScheduleEndTime = "end_time";
                public const string Step3_Checkbox_ScheduleEndTime = "end_toggle";
                public const string Step3_RadioButton_OneTimeEvent = "recurrence_never";
                public const string Step3_RadioButton_WeeklyEvent = "recurrence_weekly";
                public const string Step3_RadioButton_MonthlyEvent = "recurrence_monthly";
                public const string Step3_Checkbox_EndDate = "end_toggle_date";
                public const string Step3_Button_Next = "submitQuery";
                public const string Step3_Link_Back = "link=← Back";

                public const string Step3_Checkbox_Sunday = "recurrence_weekly_sunday";
                public const string Step3_Checkbox_Monday = "recurrence_weekly_monday";
                public const string Step3_Checkbox_Tuesday = "recurrence_weekly_tuesday";
                public const string Step3_Checkbox_Wednesday = "recurrence_weekly_wednesday";
                public const string Step3_Checkbox_Thursday = "recurrence_weekly_thursday";
                public const string Step3_Checkbox_Friday = "recurrence_weekly_friday";
                public const string Step3_Checkbox_Saturday = "recurrence_weekly_saturday";
                public const string Step3_DropDown_Reoccurance_Weekly = "recurrence_every";
                public const string Step3_TextField_ScheduleEndDate = "end_date";

                public const string Step4_Link_SkipThisStep = "link=Skip this step →";
                public const string Step4_TextField_LocationName = "location_name";
                public const string Step4_TextField_LocationDescription = "location_description";
                public const string Step4_RadioButton_MeetsInPerson = "location_physical";
                public const string Step4_RadioButton_MeetsOnline = "location_online";
                public const string Step4_TextField_URL = "location_url";
                public const string Step4_Dropdown_Country = "ddlCountries";
                public const string Step4_TextField_Address1 = "address_address1";
                public const string Step4_TextField_Address2 = "address_address2";
                public const string Step4_TextField_City = "address_city";
                public const string Step4_Dropdown_State = "ddlStates";
                public const string Step4_TextField_Zipcode = "address_postalcode";
                public const string Step4_Button_Next = "submitQuery";
                public const string Step4_Link_Back = "link=← Back";
                public const string Step4_Checkbox_Private_Location = "is_private";

                public const string Step5_Checkbox_PublicGroup = "group_permissions_check";
                public const string Step5_Button_Next = "submitQuery";
                public const string Step5_Link_Back = "link=← Back";
            }

            public struct Wizard_PeopleListCreation
            {
                public const string TextField_PeopleListName = "group_name";
                public const string TextField_PeopleListDescription = "group_description";
                public const string DateControl_StartDate = "start_date";
                public const string Checkbox_Unlock_Group = "accepting_members";
                public const string Button_CreatePeopleList = "submitQuery";

                public const string TextField_IndividualSearch = "txtSearch";
                public const string Button_IndividualSearch = "btnAdvSearch";
                public const string Button_Save = "add_new_member";
                public const string Button_SaveAddAnother = "add_new_member_another";
                public const string Link_CancelLinkName = "Cancel";
            }
        }

        public struct GroupsAdministrationConstants
        {
            public struct GroupTypeManagement
            {
                public const string Link_NewGroupType = "link=New group type";
                public const string Link_EditProperties = "link=Edit properties";
                public const string Link_EditAdminRights = "//a[contains(@href, '/Groups/GroupType/EditRights.aspx')]";
                public const string Link_EditViewRights = "//a[contains(@href, '/Groups/GroupType/EditViews.aspx')]";
                public const string Link_EditPermissions = "//a[contains(@href, '/Groups/GroupType/EditPermissions.aspx')]";
                public const string Link_EditCustomFields = "//a[contains(@href, '/Groups/GroupType/EditCustomFields.aspx')]";
                public const string Link_ManageMoveGroups = "link=Manage/Move groups";

                public const string Link_DeleteGroupType = "//a[contains(@href, '/Groups/GroupType/Delete.aspx')]";
                public const string Link_MoveGroupsFirst = "link=Move groups first";

                public const string Label_GroupTypeName = "//div[@id='main_content']/div[1]/div[2]/h2";
                public const string Label_GroupTypeDescription = "//div[@id='main_content']/div[1]/div[2]/p[1]";

                public const string Button_EditProperties_SaveChanges = "update_properties";
                public const string Button_EditAdminRights_SaveChanges = "update_rights";
                public const string Button_EditViewRights_SaveChanges = "update_views";
                public const string Button_EditCustomFields_SaveChanges = "update_customfields";
                public const string Button_EditPermissions_SaveChanges = "update_permissions";
                public const string Button_DeleteThisGroupTypeConfirm = "delete_group_type";
                public const string Button_MoveTheseGroups = "move_groups";

                public const string TextField_GroupTypeName = "group_type_name";
                public const string TextField_GroupTypeDescription = "group_type_description";
                public const string CheckBox_GroupsPublic = "group_type_web_enabled";
                public const string CheckBox_GroupsSearchable = "group_type_searchable";
            }

            public struct SearchCategoryManagement
            {
                public const string Link_AddSearchCategory = "link=Add a search category";
                public const string Link_EditSearchCategoryDetails = "link=Edit details";
                public const string Link_EditSeachCategoryCriteria = "link=Edit search criteria";
                public const string Link_DeleteSearchCategory = "link=Delete this category";

                public const string RadioButton_ShowAllCategories = "show_all_categories";
                public const string RadioButton_ShowUnpublishedCategories = "show_unpublished_categories";
                public const string RadioButton_ShowPublishedCategories = "show_published_categories";

                public const string TextField_SearchCategoryName = "category_name";
                public const string TextField_SearchCategoryDescription = "category_description";

                public const string Button_SaveChanges_EditDetails = GeneralButtons.submitQuery;
                public const string Button_SaveChanges_EditCriteria = GeneralButtons.submitQuery;
                public const string Button_Filter_Categories = "//input[@value='Filter']";

                public const string Checkbox_Published = "category_published";
            }

            public struct SpanOfCareManagement
            {
                public const string Button_Back = "link=← Back";
                public const string Link_TabBack = "tab_back";
                public const string Link_EditStep1 = "//a[contains(@href, '/Groups/GroupSoc/Step1.aspx')]";
                public const string Link_EditStep2 = "//a[contains(@href, '/Groups/GroupSoc/Step2.aspx')]";
                public const string Link_EditStep3 = "//a[contains(@href, '/Groups/GroupSoc/Step3.aspx')]";
                public const string Link_EditStep4 = "//a[contains(@href, '/Groups/GroupSoc/Step4.aspx')]";

                public const string Button_Owners_AddNew = "add_new_owner";
                public const string Button_Owners_AddAnother = "add_new_owner_another";
                public const string Button_Owners_Search = "btn_search";
                public const string Button_Owners_AdvancedSearch = "btn_search_adv";
                public const string Dropdown_Owners_AttributeGroup = "attribute_group";
                public const string Dropdown_Owners_IndividualAttribute = "attribute";
                public const string TextField_Owners_Name_Search = "basic_search_name";
                public const string Link_Owners_Add = "//a[contains(@href, '/Groups/GroupSoc/NewOwner.aspx')]";
                public const string Link_Owners_AdvancedSearch = "link=Advanced search";
            }

            public struct Wizard_CustomField
            {
                public const string Step1_TextField_CustomFieldName = "custom_field_name";
                public const string Step1_DropDown_CustomFieldType = "field_type";
                public const string Step1_TextField_CustomFieldDescription = "custom_field_description";
                public const string Step1_TextField_CustomFieldDescription_InUse = "Textarea1";

                public const string Step2_Text_CustomFieldName = "//div[@id='main_content']/div[1]/div[2]/form/h2";
                public const string Step2_Text_CustomFieldDescription = "//div[@id='main_content']/div[1]/div[2]/form/p[1]";
                public const string Step2_TextField_CustomFieldOptionName = "new_option_field_text_";
                public const string Step2_Link_AddAnotherChoice = "Add another";
                public const string Step2_SubmitButton_CreateCustomField = "submit_custom_field";
            }

            public struct Wizard_GroupType
            {
                public const string Step2_Link_Back = "link=← Back";
                public const string Step3_Link_Back = "link=← Back";
                public const string Step4_Link_Back = "link=← Back";
                public const string Step5_Link_Back = "link=← Back";

                public const string Link_EditStep1 = "//a[contains(@href, '/Groups/GroupType/Step1.aspx')]";
                public const string Link_EditStep2 = "//a[contains(@href, '/Groups/GroupType/Step2.aspx')]";
                public const string Link_EditStep3Link = "//a[contains(@href, '/Groups/GroupType/Step3.aspx')]";
                public const string Link_EditStep4 = "//a[contains(@href, '/Groups/GroupType/Step4.aspx')]";

                // Name, Description, and Viewable/Searchable properties
                public const string Step1_TextField_GroupTypeName = "group_type_name";
                public const string Step1_TextField_GroupTypeDescription = "group_type_description";
                public const string Step1_CheckBox_GroupsPublic = "group_type_web_enabled";
                public const string Step1_CheckBox_GroupsSearchable = "group_type_searchable";
                public const string Step1_Button_Next = GeneralButtons.submitQuery;

                // Leader and members permissions
                public const string Step2_CheckBox_LeadersEmailGroup = "group_type_leaders_can_email";
                public const string Step2_CheckBox_LeadersAdministerGroup = "group_type_leaders_can_admin";
                public const string Step2_CheckBox_LeadersEditMemberRecords = "group_type_leaders_can_edit";
                public const string Step2_CheckBox_LeadersEditGroupDetails = "group_type_leaders_can_updategroup";
                public const string Step2_CheckBox_LeadersChangeSchedule = "group_type_leaders_can_schedule";
                public const string Step2_CheckBox_LeadersTakeAttendace = "group_type_leaders_can_take_attendance";
                public const string Step2_CheckBox_MembersEmailGroup = "group_type_members_can_email";
                public const string Step2_Button_Next = GeneralButtons.submitQuery;

                // Leaders and members view rights
                public const string Step3_Radio_LeadersLimitedInformation = "group_type_leaders_limited_view";
                public const string Step3_Radio_LeadersBasicInformation = "group_type_leaders_default_view";
                public const string Step3_Radio_LeadersFullInformation = "group_type_leaders_full_view";
                public const string Step3_Radio_MembersLimitedInformation = "group_type_members_limited_view";
                public const string Step3_Radio_MembersBasicInformation = "group_type_members_default_view";
                public const string Step3_Button_Next = GeneralButtons.submitQuery;

                public const string Step4_Button_Next = GeneralButtons.submitQuery;
                public const string Step5_Button_SaveGroupType = GeneralButtons.submitQuery;
            }

            public struct Wizard_SearchCategories
            {
                public const string Step1_TextField_SearchCategoryName = "category_name";
                public const string Step1_TextField_SearchCategoryDescription = "category_description";
                public const string Step1_Checkbox_Published = "category_published";
                public const string Step1_Button_Next = GeneralButtons.submitQuery;

                public const string Step2_Button_CreateSearchCategory = GeneralButtons.submitQuery;
            }

            public struct Wizard_SpanOfCare
            {
                public const string Step1_TextField_SpanOfCareName = "soc_name";
                public const string Step1_TextField_SpanOfCareDescription = "soc_desc";

                public const string Step3_CheckBox_Coed = "chk_gender_coed";
                public const string Step3_CheckBox_Female = "chk_gender_female";
                public const string Step3_CheckBox_Male = "chk_gender_male";
                public const string Step3_CheckBox_MarriedOrSingle = "chk_marital_status_both";
                public const string Step3_CheckBox_Married = "chk_marital_status_married";
                public const string Step3_CheckBox_Single = "chk_marital_status_single";
                public const string Step3_DropDown_MinAgeRange = "age_range_min";
                public const string Step3_DropDown_MaxAgeRange = "age_range_max";
                public const string Step3_Radio_ChildcareProvided = "rb_childcare_yes";
                public const string Step3_Radio_ChildcareNotProvided = "rb_childcare_no";
                public const string Step3_Radio_ChildcareNotApplicable = "rb_childcare_none";
            }
        }


        #region Properties
        public string PortalUser
        {
            get { return _portalUser; }
            set { _portalUser = value; }
        }

        public string PortalUsername
        {
            get { return _portalUsername; }
            set { _portalUsername = value; }
        }

        public string PortalPassword
        {
            get { return _portalPassword; }
            set { _portalPassword = value; }
        }

        public string ChurchCode
        {
            get { return _churchCode; }
            set { _churchCode = value; }
        }

        public int ChurchID
        {
            get { return _churchID; }
            set { _churchID = value; }
        }

        public F1Environments F1Environments
        {
            get { return _f1Environment; }
            set { _f1Environment = value; }
        }

        #endregion Properties

        public PortalBase(ISelenium selenium, GeneralMethods generalMethods, JavaScript javascript, F1Environments f1Environment, SQL sql)
        {
            log.Debug("Enter PortalBase");
            this._selenium = selenium;
            this._generalMethods = generalMethods;
            this._javascript = javascript;
            this._f1Environment = f1Environment;
            this._sql = sql;

            log.Debug("Exit PortalBase");
        }

        public PortalBase(RemoteWebDriver driver, GeneralMethods generalMethods, F1Environments f1Environment, SQL sql)
        //public PortalBase(ScreenShotRemoteWebDriver driver, GeneralMethods generalMethods, F1Environments f1Environment, SQL sql)
        {
            log.Debug("Enter PortalBase RemoteWebDriver");
            this._driver = driver;
            //this._screenShotDriver = driver;
            this._generalMethods = generalMethods;
            this._f1Environment = f1Environment;
            this._sql = sql;

            log.Debug("Exit PortalBase RemoteWebDriver");
        }

        #region Instance Methods

        #region Culture Settings

        public CultureInfo Culture_Settings(int churchId)
        {
            // Store culture for date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            return culture;

        }
        #endregion Culture Settings

        public void OpenLoginWebDriver()
        {

            TestLog.WriteLine(string.Format("Open Login Page Web Driver"));

            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                // Open the login page for portal
                log.Debug("Navigate to Login Page");
                this._driver.Navigate().GoToUrl(GetPortalURL(this._f1Environment));

            }
            else
            {
                log.Debug("No need to Navigate to Login");
            }
        }

        #region Login / Logout
        /// <summary>
        /// Logs into portal using credentials from app.config
        /// </summary>
        public void Login()
        {
            // Log in
            DoLoginPortal(null, null, null);
        }

        public void LoginWebDriver()
        {
            LoginWebDriver(this._portalUsername, this._portalPassword, this._churchCode);
        }

        public void LoginWebDriver(string username, string password, string churchCode = "DC")
        {

            TestLog.WriteLine(string.Format("Enter Login Web Driver {0}/{1}/{2}", username, password, churchCode));

            //Check if we are already in login page
            //This is when login/logout out of application
            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                // Open the login page for portal
                log.Debug("Navigate to Login Page");
                this._driver.Navigate().GoToUrl(GetPortalURL(this._f1Environment));
                
            }
            else
            {
                log.Debug("No need to Navigate to Login");
            }

            TestLog.WriteLine("Login to: " + this._driver.Url.ToString());

            // Set the username, password, and church code
            //this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_content_userNameText"));
            this._driver.FindElementById("ctl00_content_userNameText").Clear();
            this._driver.FindElementById("ctl00_content_userNameText").SendKeys(username);

            this._driver.FindElementById("ctl00_content_passwordText").Clear();
            this._driver.FindElementById("ctl00_content_passwordText").SendKeys(password);

            this._driver.FindElementById("ctl00_content_churchCodeText").Clear();
            this._driver.FindElementById("ctl00_content_churchCodeText").SendKeys(churchCode);

            //this._generalMethods.TakeScreenShot_WebDriver();

            //this._driver.FindElementById("ctl00_content_userNameText").Clear();
            //this._driver.FindElementById("ctl00_content_userNameText").SendKeys(username);

            //this._generalMethods.TakeScreenShot_WebDriver();

            // Attempt to log in
            this._driver.FindElementById("ctl00_content_btnLogin").Click();

            if (churchCode.ToLower() == "qaeunlx0c6")
            {
                this._generalMethods.WaitForElement(this._driver, By.XPath("//input[@value='Allow Cookies']"));

                log.Info("Accept compliance cookie");

                // Accept the compliance cookie if needed.
                if (this._driver.FindElementsByXPath("//input[@value='Allow Cookies']").Count > 0)
                {
                    // We need to accept cookies
                    this._driver.FindElementByXPath("//input[@value='Allow Cookies']").Click();

                    // Verify the cookie is present
                    Assert.IsNotNull(this._driver.Manage().Cookies.GetCookieNamed("ComplianceCookie"), "Cookies were accepted but the compliance cookie was not present!");
                }
                else
                {
                    // Verify the compliance cookie is present
                    if (churchCode.ToLower() == "qaeunlx0c6")
                    {
                        Assert.IsNotNull(this._driver.Manage().Cookies.GetCookieNamed("ComplianceCookie"), "There was no prompt to accept cookies but the Compliance cookie was not present!!");
                    }
                }
            }

            //Force Open the login page for portal
            //this._driver.Navigate().GoToUrl(GetPortalURL(this._f1Environment) + "/home.aspx");


            //We need to verify that we don't get routed to login page
            TestLog.WriteLine("URL routed to: " + this._driver.Url.ToString());
            //Assert.IsTrue(this._driver.Url.Equals(GetPortalURL(this._f1Environment) + "/home.aspx"), "Did not get routed to Home Page");
            //Assert.IsFalse(this._driver.FindElementById("ctl00_content_userNameText").Displayed, "Did not get routed to Home Page");
            try
            {
                IWebElement homeLink = this._driver.FindElementByLinkText("Home");
                Assert.IsTrue(homeLink.Displayed, "We are not in Home Page");
            }
            catch (Exception e)
            {

                throw new WebDriverException("Login Failure. We are not in Home Page\n " + e.Message);
            }

            //Set user first last name
            this.PortalUsername = this._driver.FindElement(By.CssSelector("[href*='/UserAccount/Index.aspx']")).Text;
            this._churchID = this._sql.FetchChurchID(this._churchCode);
            TestLog.WriteLine(string.Format("{0} logged in", this.PortalUsername));

            log.Debug("Exit Login Web Driver " + username);

        }

        public void LoginFailWebDriver(string username, string password, string churchCode)
        {
            TestLog.WriteLine(string.Format("Enter Login Web Driver {0}/{1}/{2}", username, password, churchCode));

            //Check if we are already in login page
            //This is when login/logout out of application
            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                // Open the login page for portal
                this._driver.Navigate().GoToUrl(GetPortalURL(this._f1Environment));
                TestLog.WriteLine("No need to Navigate to Login");
            }
            else
            {
                System.Threading.Thread.Sleep(5000);
            }

            TestLog.WriteLine("Login to: " + this._driver.Url.ToString());

            // Set the username, password, and church code
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_content_userNameText"));
            this._driver.FindElementById("ctl00_content_userNameText").Clear();
            this._driver.FindElementById("ctl00_content_userNameText").SendKeys(username);

            this._driver.FindElementById("ctl00_content_passwordText").Clear();
            this._driver.FindElementById("ctl00_content_passwordText").SendKeys(password);

            this._driver.FindElementById("ctl00_content_churchCodeText").Clear();
            this._driver.FindElementById("ctl00_content_churchCodeText").SendKeys(churchCode);

            this._driver.FindElementById("ctl00_content_userNameText").Clear();
            this._driver.FindElementById("ctl00_content_userNameText").SendKeys(username);

            // Attempt to log in
            this._driver.FindElementById("ctl00_content_btnLogin").Click();

        }

        /// <summary>
        /// Attempts to login the max amount of times. 
        /// </summary>
        /// <param name="username"></param>
        /// <param name="password"></param>
        /// <param name="churchCode"></param>
        public void LoginFailMaxAttemptsWebdriver(string username, string password, string churchCode)
        {
            int maxLoginAttempts = 11;

            for (int x = 0; x < maxLoginAttempts; x++)
            {
                this.LoginFailWebDriver(username, password, churchCode);

                this._generalMethods.WaitForElementEnabled(By.XPath("//form[@id='aspnetForm']/p[1]"));
                this._generalMethods.WaitForElementDisplayed(By.XPath("//form[@id='aspnetForm']/p[1]"));
                // Verify login attempt failed
                if (x == (maxLoginAttempts - 1))
                {
                    Assert.AreEqual("Your account is currently locked. Please try again later.", this._driver.FindElementByXPath("//form[@id='aspnetForm']/p[1]").Text);
                }
                else
                {
                    Assert.AreEqual("Your login attempt has failed. Your account will be locked out after 10 attempts.", this._driver.FindElementByXPath("//form[@id='aspnetForm']/p[1]").Text);
                }
            }
        }
        /// <summary>
        /// Logs into portal with the specified church code
        /// </summary>
        /// <param name="churchCode">Church code</param>
        public void Login(string churchCode)
        {
            DoLoginPortal(null, null, churchCode);
        }

        /// <summary>
        /// Logs into portal using non-default username, password
        /// </summary>
        /// <param name="username">Username</param>
        /// <param name="password">Password</param>
        public void Login(string username, string password)
        {
            DoLoginPortal(username, password, null);
        }

        /// <summary>
        /// Logs into portal using non-default username, password, and church code
        /// </summary>
        /// <param name="username">Username</param>
        /// <param name="password">Password</param>
        /// <param name="churchCode">Church code</param>
        public void Login(string username, string password, string churchCode)
        {
            DoLoginPortal(username, password, churchCode);
        }

        /// <summary>
        /// Logs out of portal
        /// </summary>
        public void Logout()
        {

            log.Debug("Enter logout");

            // If user is on a minimal page, click the RETURN link
            if (this._selenium.IsElementPresent(GeneralLinks.RETURN))
            {
                log.Debug("Return");
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }

            // And again...
            if (this._selenium.IsElementPresent(GeneralLinks.RETURN))
            {
                log.Debug("Return Again");
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }

            // Check if a pop-out is open
            if (this._selenium.IsElementPresent(GeneralLinks.Close))
            {
                //this._selenium.ClickAndWaitForCondition(GeneralLinks.Close, "var x = selenium.browserbot.getCurrentWindow().document.getElementById('success_close'); x.match('false');", "10000");
                this._selenium.Click(GeneralLinks.Close);
                System.Threading.Thread.Sleep(750);
            }

            // Log out of Fellowship One
            this._selenium.ClickAndWaitForPageToLoad("link=sign out");

            Assert.IsTrue(this._selenium.IsElementPresent("ctl00_content_userNameText"), "User Name not present therefore did not logout");
            Assert.IsTrue(this._selenium.IsElementPresent("ctl00_content_passwordText"), "Password not present therefore did not logout");
            Assert.IsTrue(this._selenium.IsElementPresent("ctl00_content_churchCodeText"), "Church Code not present therefore did not logout");

            log.Debug("Exit logout");

        }

        public void LogoutWebDriver()
        {

            log.Debug("Enter Logout Web Driver");

            if (this._driver.FindElementsByLinkText("RETURN").Count > 0)
            {
                this._driver.FindElementByLinkText("RETURN").Click();
            }

            if (this._driver.FindElementsByLinkText("RETURN").Count > 0)
            {
                this._driver.FindElementByLinkText("RETURN").Click();
            }

            this._driver.FindElementByLinkText("sign out").Click();

            log.Debug("Exit Logout Web Driver");

        }
        #endregion Login / Logout

        #region Applications

        /// <summary>
        /// Grants or Revokes access to application. This checks if application is already revoked it grants access and vice versa.
        /// </summary>
        public void GrantOrRevokeAccessWebDriver()
        {

            this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));
            TestLog.WriteLine("Button Access Text: " + this._driver.FindElementById("submitQuery").GetAttribute("value"));

            if (this._driver.FindElementById("submitQuery").GetAttribute("value").Equals("Grant access"))
            {
                //this._generalMethods.VerifyTextPresentWebDriver("This application is not allowed to access your church's data.");
                this._generalMethods.VerifyTextPresentWebDriver("This application is not configured to access your data.");

                this._driver.FindElementById("submitQuery").Click();
                this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"), 30);


                this._generalMethods.VerifyTextPresentWebDriver("This application is allowed to access your church's data.");
                Assert.AreEqual("Revoke access", this._driver.FindElementById("submitQuery").GetAttribute("value"));

            }
            else if (this._driver.FindElementById("submitQuery").GetAttribute("value").Equals("Revoke access"))
            {

                this._generalMethods.VerifyTextPresentWebDriver("This application is allowed to access your church's data.");

                this._driver.FindElementById("submitQuery").Click();

                //Assert.IsTrue(Regex.IsMatch(this._driver.SwitchTo().Alert().Text, "^Revoking access will instantly disable the application for all users\\. Are you sure you want to do this[\\s\\S]$"));
                //Modify by Grace Zhang
                Assert.IsTrue(Regex.IsMatch(this._driver.SwitchTo().Alert().Text, @"Revoking access will instantly disable the application for all users as well as"));
                this._driver.SwitchTo().Alert().Accept();

                this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"), 30);
                Assert.AreEqual("Grant access", this._driver.FindElementById("submitQuery").GetAttribute("value"));
                //this._generalMethods.VerifyTextPresentWebDriver("This application is not allowed to access your church's data.");
                this._generalMethods.VerifyTextPresentWebDriver("This application is not configured to access your data.");


            }
            else
            {

                Assert.Fail("Neither Grant or Revoke access buttons are avialable");
            }

        }

        /// <summary>
        /// Edits Application Key options from the Application Key page. 
        /// </summary>
        /// <param name="name"></param>
        /// <param name="editName"></param>
        /// <param name="version"></param>
        /// <param name="description"></param>
        /// <param name="email"></param>
        /// <param name="homePageURI"></param>
        /// <param name="downloadURI"></param>
        /// <param name="callbackURI"></param>
        public void EditApplicationKeys(string name, string editName, string version, string description, string email, string homePageURI, string downloadURI, string callbackURI)
        {
            //Click Edit
            int findRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Admin_ApplicationKeys, name, "Application", "contains");
            string row = (findRow + 1).ToString();
            TestLog.WriteLine(string.Format("This is the name {0}, this is the row {1}", name, row));
            this._driver.FindElementByXPath(string.Format("//table[@id='douglasP']/tbody/tr[{0}]/td[5]/a", row)).Click();
            this._generalMethods.WaitForElement(By.Id(GeneralAdmin.ApplicationKeys.Edit_Application_Name));

            if (!string.IsNullOrEmpty(editName))
            {
                //Edit Application Name
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Application_Name).Clear();
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Application_Name).SendKeys(editName);
            }

            if (!string.IsNullOrEmpty(version))
            {
                //Edit Version 
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Version).Clear();
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Version).SendKeys(version);
            }

            if (!string.IsNullOrEmpty(description))
            {
                //Edit Description
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Description).Clear();
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Description).SendKeys(description);
            }

            if (!string.IsNullOrEmpty(email))
            {
                //Edit Contact Email
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Contact_Email).Clear();
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Contact_Email).SendKeys(email);
            }

            if (!string.IsNullOrEmpty(homePageURI))
            {
                // Edit home page uri
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Home_Page_URI).Clear();
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Home_Page_URI).SendKeys(homePageURI);
            }

            if (!string.IsNullOrEmpty(downloadURI))
            {
                //Edit Download URI
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Download_URI).Clear();
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Download_URI).SendKeys(downloadURI);
            }

            if (!string.IsNullOrEmpty(callbackURI))
            {
                //Edit Callback URI
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Callback_URI).Clear();
                this._driver.FindElementById(GeneralAdmin.ApplicationKeys.Edit_Callback_URI).SendKeys(callbackURI);
            }

        }

        #endregion Applications

        #region Admin

        #region Church Contacts
        /// <summary>
        /// Adds church contacts.
        /// </summary>
        /// <param name="edition">The church's edition</param>
        /// <param name="numberOfContacts">The number of contacts</param>
        public void Admin_ChurchContacts_Add_DesignatedSupportContacts_WebDriver(string edition, int numberOfContacts)
        {
            // Navigate to Admin->Church Contacts
            this._generalMethods.Navigate_Portal(Navigation.Portal.Admin.Church_Setup.ChurchContacts);
            this._generalMethods.VerifyTextPresentWebDriver("Church Contacts");

            // Click link to add new contact
            this._driver.FindElementByLinkText("Add contact").Click();
            this._driver.FindElementByTagName("html").Text.Contains("About Contact Types");
            // this._generalMethods.VerifyTextPresentWebDriver("About Contact Types");

            // Add Designated Support Contacts
            if (edition == "Core")
            {
                this._generalMethods.VerifyElementNotPresentWebDriver(By.XPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[1]/p/select"));
            }
            else if (edition == "Select")
            {
                new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[1]/p/select")).SelectByText("FT Tester");
                new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[2]/p/select")).SelectByText("FT Tester");

                if (numberOfContacts > 2)
                {
                    this._driver.FindElementByXPath("//a[text()='Add contact' and normalize-space(ancestor::div/preceding-sibling::h3)='Designated Support Contact']").Click();
                    new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[3]/p/select")).SelectByText("FT Tester");
                }
            }
            else if (edition == "Premiere")
            {
                new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[1]/p/select")).SelectByText("FT Tester");
                new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[2]/p/select")).SelectByText("FT Tester");
                new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[3]/p/select")).SelectByText("FT Tester");
                new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[4]/p/select")).SelectByText("FT Tester");

                if (numberOfContacts > 4)
                {
                    this._driver.FindElementByXPath("//a[text()='Add contact' and normalize-space(ancestor::div/preceding-sibling::h3)='Designated Support Contact']").Click();
                    new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[5]/p/select")).SelectByText("FT Tester");
                }
            }

            // Save Contacts
            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify error messages
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {
                if (edition == "Select")
                {
                    this._generalMethods.VerifyTextPresentWebDriver("You are allowed 2 designated support contacts. Please remove any extras before continuing.");
                }
                if (edition == "Premiere")
                {
                    this._generalMethods.VerifyTextPresentWebDriver("You are allowed 4 designated support contacts. Please remove any extras before continuing.");
                }

                // Click cancel
                this._driver.FindElementByLinkText("Cancel").Click();
            }

            // Verify changes
            this._driver.Url.Contains("admin/ChurchContact/Index.aspx");
            if (edition != "Core")
            {
                this._generalMethods.VerifyTextPresentWebDriver("FT Tester");
            }

            // Clear out contacts
            this._driver.FindElementByLinkText("Add contact").Click();
            foreach (var deleteItem in this._driver.FindElementsByXPath("//a[@class='delete float_left nudge_left']"))
            {
                deleteItem.Click();
            }
            this._driver.FindElementById(GeneralButtons.Save).Click();

        }

        /// <summary>
        /// Attempts to add an Inactive portal user as a Designated Support User
        /// </summary>
        /// <param name="inactiveUser">The name of the Inactive portal user</param>
        public void Admin_ChurchContacts_Add_DesignatedSupportContacts_InactiveUser(string inactiveUser)
        {
            // Navigate to Admin-> Portal Users
            this._generalMethods.Navigate_Portal(Navigation.Portal.Admin.Security_Setup.PortalUsers);

            // Make portal user inactive
            if (this._generalMethods.IsTextPresentWebDriver(inactiveUser))
            {
                decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Admin_PortalUsers, inactiveUser, "Name", null);
                this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Edit user");

                if (this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkEnabled").Enabled)
                {
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkEnabled").Click();
                }

                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnMod").Click();
            }

            //If We get Window Linked Pop up Message, cancel it!
            if (this._driver.WindowHandles.Count > 1)
            {
                this._driver.SwitchTo().Alert().Dismiss();
            }

            // Navigate to Admin->Church Contacts
            this._generalMethods.Navigate_Portal(Navigation.Portal.Admin.Church_Setup.ChurchContacts);
            this._generalMethods.VerifyTextPresentWebDriver("Church Contacts");

            // Click link to add new contact
            this._driver.FindElementByLinkText("Add contact").Click();
            this._generalMethods.VerifyTextPresentWebDriver("About Contact Types");

            // Try to select the Inactive user as a contact
            var options = new SelectElement(this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[1]/p/select")).Options;
            var count = options.Where(x => x.Text == inactiveUser).Count();
            Assert.AreEqual(0, count, string.Format("{0} was found as an option", inactiveUser));
            //this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[1]/p/select").Click();
            //this._generalMethods.VerifyTextNotPresentWebDriver(inactiveUser);

        }

        /// <summary>
        /// Attempts to add an Inactive portal user as a Designated Support User
        /// </summary>
        /// <param name="unlinkedUser">The name of the Inactive portal user</param>
        public void Admin_ChurchContacts_Add_DesignatedSupportContacts_UnlinkedUser(string unlinkedUser)
        {

            // Navigate to Admin->Church Contacts
            this._generalMethods.Navigate_Portal(Navigation.Portal.Admin.Church_Setup.ChurchContacts);
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add"));
            this._generalMethods.VerifyTextPresentWebDriver("Church Contacts");

            // Click link to add new contact
            this._driver.FindElementByLinkText("Add contact").Click();
            this._generalMethods.VerifyTextPresentWebDriver("About Contact Types");

            // Try to select the Inactive user as a contact
            this._driver.FindElementByXPath("//h3[normalize-space(text())='Designated Support Contact']/following-sibling::div[1]/div[1]/p/select").Click();
            this._generalMethods.VerifyTextNotPresentWebDriver(unlinkedUser);

        }
        #endregion Church Contacts

        #region Campuses
        /// <summary>
        /// Creates a campus.
        /// </summary>
        /// <param name="campusName">The name of the campus to be created</param>
        public void Admin_Campuses_Create(string campusName)
        {
            // Navigate to admin->campuses
            this._generalMethods.Navigate_Portal(Navigation.Portal.Admin.Church_Setup.Campuses);

            // Attempt to create the campus
            if (!string.IsNullOrEmpty(campusName))
            {
                this._driver.FindElementById("new_campus_name").SendKeys(campusName);
            }
            else
            {
                this._errorText.Add("Please enter a campus name.");
            }
            this._driver.FindElementById(GeneralButtons.submitQuery).Click();

            // Verify error or verify campus creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessagesWebDriver(this._errorText);
            }
            else
            {
                Assert.IsTrue(this._driver.FindElementsByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']", campusName)).Count > 0);
            }
        }

        /// <summary>
        /// Updates an existing campus.
        /// </summary>
        /// <param name="campusName">The name of the campus to be updated</param>
        /// <param name="campusNameUpdated">The updated name for the campus</param>
        public void Admin_Campuses_Update(string campusName, string campusNameUpdated)
        {
            // Navigate to admin->campuses
            this._generalMethods.Navigate_Portal(Navigation.Portal.Admin.Church_Setup.Campuses);

            // Update the campus
            this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']/ancestor::tr/td[1]/a", campusName)).Click();
            Assert.AreEqual(campusName, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']/following-sibling::form/input[3]", campusName)).GetAttribute("value"));
            if (!string.IsNullOrEmpty(campusNameUpdated))
            {
                this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']/following-sibling::form/input[3]", campusName)).SendKeys(campusNameUpdated);
            }
            this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']/following-sibling::form/input[@type='submit' and @value='Save']", campusName)).Click();
            this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(5000));
            IWebElement table = this._driver.FindElementByXPath("//table[@class='grid']/tbody/tr[contains(@id, 'campus_') and @style='background-image: none; background-color: transparent;']");
            //this._selenium.WaitForCondition("selenium.isElementPresent(\"xpath=//table[@class='grid']/tbody/tr[contains(@id, 'campus_') and @style='background-image: none; background-color: transparent;']\");", "10000");

            // Verify the campus was modified, original no longer present
            Assert.IsTrue(this._driver.FindElementsByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']", campusNameUpdated)).Count > 0);
            Assert.IsFalse(this._driver.FindElementsByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']", campusName)).Count > 0);
        }

        /// <summary>
        /// Deletes a campus.
        /// </summary>
        /// <param name="campusName">The name of the campus to be deleted</param>
        public void Admin_Campuses_Delete(string campusName)
        {
            // Navigate to admin->campuses
            this._generalMethods.Navigate_Portal(Navigation.Portal.Admin.Church_Setup.Campuses);

            // Delete the campus
            this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']/ancestor::tr/td[4]/form/input[3]", campusName)).Click();
            Assert.IsTrue(Regex.IsMatch(this._driver.SwitchTo().Alert().Text, "^Are you sure you want to delete this campus[\\s\\S]$"));
            this._driver.SwitchTo().Alert().Accept();

            // Verify the campus was deleted
            if (this._driver.FindElementsByXPath("//table[@class='grid']").Count > 0)
            {
                Assert.IsTrue(this._driver.FindElementsByXPath(string.Format("//table[@class='grid']/tbody/tr[contains(@id, 'campus_')]/td[2]/span[text()='{0}']", campusName)).Count == 0);
            }
            else
            {
                Assert.IsTrue(this._driver.FindElementByTagName("html").Text.Contains("No campuses created"));
            }
        }
        #endregion Campuses

        #region Buildings
        /// <summary>
        /// Creates a building.
        /// </summary>
        /// <param name="buildingName">The name of the building to be created</param>
        public void Admin_Buildings_Create(string buildingName)
        {
            // Navigate to admin->buildings
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Buildings);

            // Create the building
            if (!string.IsNullOrEmpty(buildingName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtBuildingName", buildingName);
            }
            else
            {
                this._errorText.Add("Building name is required.");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify errors or verify creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                this._selenium.VerifyElementPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgBuildings']/tbody/tr[*]/td[position()=2 and text()='{0}']", buildingName));
            }
        }

        /// <summary>
        /// Updates a building.
        /// </summary>
        /// <param name="buildingName">The name of the building to be updated</param>
        /// <param name="buildingNameUpdated">The updated name of the building</param>
        public void Admin_Buildings_Update(string buildingName, string buildingNameUpdated)
        {
            // Navigate to admin->buildings
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Buildings);

            // Update the building
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgBuildings']/tbody/tr[*]/td[position()=1 and ancestor::tr/td[2]/text()='{0}']/span/a", buildingName));
            Assert.AreEqual(buildingName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtBuildingName"));
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtBuildingName", buildingNameUpdated);
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnMod");

            // Verify the building was modified, original no longer present
            this._selenium.VerifyElementPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgBuildings']/tbody/tr[*]/td[position()=2 and text()='{0}']", buildingNameUpdated));
            this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgBuildings']/tbody/tr[*]/td[position()=2 and text()='{0}']", buildingName));
        }

        /// <summary>
        /// Deletes a building
        /// </summary>
        /// <param name="buildingName">The name of the building to be deleted</param>
        public void Admin_Buildings_Delete(string buildingName)
        {
            // Navigate to admin->buildings
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Buildings);

            // Click to delete the building, select "Yes" at the confirmation page
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgBuildings']/tbody/tr[*]/td[position()=3 and ancestor::tr/td[2]/text()='{0}']/span/a", buildingName));
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Yes);

            // Verify the building was deleted
            this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgBuildings']/tbody/tr[*]/td[position()=2 and text()='{0}']", buildingName));
        }
        #endregion Buildings

        #region Rooms
        /// <summary>
        /// Creates a room
        /// </summary>
        /// <param name="buildingName">The name of the building the room will reside in</param>
        /// <param name="roomName">The name of the room to be created</param>
        /// <param name="roomDescription">The description of the room to be created</param>
        /// <param name="roomCode">The code of the room to be created</param>
        public void Admin_Rooms_Create(string buildingName, string roomName, string roomDescription, string roomCode)
        {
            // Navigate to admin->rooms
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Rooms);

            // Create the room
            if (!string.IsNullOrEmpty(buildingName))
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlBuilding", buildingName);
            }

            if (!string.IsNullOrEmpty(roomName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtRoomName", roomName);
            }
            else
            {
                this._errorText.Add("Room name is required.");
            }

            if (!string.IsNullOrEmpty(roomDescription))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtRoomDescription", roomDescription);
            }

            if (!string.IsNullOrEmpty(roomCode))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtRoomCode", roomCode);
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify errors or verify creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                this._selenium.VerifyElementPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgRooms']/tbody/tr[*]/td[position()=2 and span/text()='{0}' and ancestor::tr/td[3]/span/text()='{1}' and ancestor::tr/td[4]/span/text()='{2}' and ancestor::tr/td[5]/span/text()='{3}']", roomCode, buildingName, roomName, roomDescription));
            }
        }

        /// <summary>
        /// Updates a room.
        /// </summary>
        /// <param name="buildingName">The name of the building that the room resides in</param>
        /// <param name="roomName">The name of the room to be updated</param>
        /// <param name="roomDescription">The description of the room to be updated</param>
        /// <param name="roomCode">The code of the room to be updated</param>
        /// <param name="buildingNameUpdated">The updated name of the building that the room will reside in</param>
        /// <param name="roomNameUpdated">The updated name of the room</param>
        /// <param name="roomDescriptionUpdated">The updated description of the room</param>
        /// <param name="roomCodeUpdated">The updated code of the room</param>
        public void Admin_Rooms_Update(string buildingName, string roomName, string roomDescription, string roomCode, string buildingNameUpdated, string roomNameUpdated, string roomDescriptionUpdated, string roomCodeUpdated)
        {
            // Navigate to admin->rooms
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Rooms);

            // Update the room
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgRooms']/tbody/tr[*]/td[position()=1 and ancestor::tr/td[4]/span/text()='{0}']/span/a", roomName));
            Assert.AreEqual(buildingName, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlBuilding"));
            Assert.AreEqual(roomName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtRoomName"));
            Assert.AreEqual(roomDescription, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtRoomDescription"));
            Assert.AreEqual(roomCode, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtRoomCode"));

            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlBuilding", buildingNameUpdated);
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtRoomName", roomNameUpdated);
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtRoomDescription", roomDescriptionUpdated);
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtRoomCode", roomCodeUpdated);
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnMod");

            // Verify the room was modified, original no longer present
            this._selenium.VerifyElementPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgRooms']/tbody/tr[*]/td[2]/span[text()='{0}' and ancestor::tr/td[3]/span/text()='{1}' and ancestor::tr/td[4]/span/text()='{2}' and ancestor::tr/td[5]/span/text()='{3}']", roomCodeUpdated, buildingNameUpdated, roomNameUpdated, roomDescriptionUpdated));
            this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgRooms']/tbody/tr[*]/td[4]/span[text()='{0}']", roomName));
        }

        /// <summary>
        /// Deletes a room
        /// </summary>
        /// <param name="roomName">The name of the room to be deleted</param>
        public void Admin_Rooms_Delete(string roomName)
        {
            // Navigate to admin->rooms
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Rooms);

            // Click to delete the room, click "Yes" at the confirmation page
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgRooms']/tbody/tr[*]/td[position()=6 and ancestor::tr/td[4]/span/text()='{0}']/span/a", roomName));
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Yes);

            // Verify the room was deleted
            this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgRooms']/tbody/tr[*]/td[3]/span[text()='{0}']", roomName));
        }
        #endregion Rooms

        #region Status
        public void Admin_Status_Create(string statusGroup, string statusName, bool requireAComment, bool active)
        {
            // Navigate to admin->status
            this._selenium.Navigate(Navigation.Admin.People_Setup.Status);

            // Attempt to create the status
            if (!string.IsNullOrEmpty(statusGroup))
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddStatusGroupId", statusGroup);
            }

            if (!string.IsNullOrEmpty(statusName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtStatusName", statusName);
            }
            else
            {
                this._errorText.Add("Status name is required.");
            }

            if (requireAComment)
            {
                this._selenium.Click("ctl00_ctl00_MainContent_content_rdoHasCommentYes");
            }

            if (!active)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkEnabled");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the status was created or correct error(s) is/are present
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
        }
        #endregion Status

        #region Individual Attributes
        #region Individual Attribute Groups
        /// <summary>
        /// Creates an individual attribute group
        /// </summary>
        /// <param name="attributeGroupName">The name of the attribute group</param>
        /// <param name="active">The active setting for the group</param>
        public void Admin_IndividualAttributeGroups_Create(string attributeGroupName, bool active)
        {
            // Navigate to admin->individual attributes
            this._selenium.Navigate(Navigation.Admin.People_Setup.Individual_Attributes);

            // Attempt to create an individual attribute group
            if (!string.IsNullOrEmpty(attributeGroupName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAttrGroupName", attributeGroupName);
            }
            if (!active)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkAttrGroupNameIsActive");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnSaveAttributeGroup");

            // Verify the individual attribute group was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_AttributeGroups, attributeGroupName, "Attribute Group Name", null);
            Assert.AreEqual(attributeGroupName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_AttributeGroups, itemRow)));
        }

        public void Admin_IndividualAttributeGroups_Update(string attributeGroupName, bool active, string attributeGroupNameUpdated, bool activeUpdated)
        {
            // Navigate to admin->individual attributes
            this._selenium.Navigate(Navigation.Admin.People_Setup.Individual_Attributes);

            // Attempt to update an individual attribute group
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_AttributeGroups, attributeGroupName, "Attribute Group Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/span/a", TableIds.Admin_AttributeGroups, itemRow + 1));

            Assert.AreEqual(attributeGroupName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAttrGroupName"));
            Assert.AreEqual(active, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkAttrGroupNameIsActive"));

            if (!string.IsNullOrEmpty(attributeGroupNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAttrGroupName", attributeGroupNameUpdated);
            }

            if (activeUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkAttrGroupNameIsActive");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkAttrGroupNameIsActive");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnSaveAttributeGroup");

            // Verify the individual attribute group was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_AttributeGroups, attributeGroupNameUpdated, "Attribute Group Name", null);
            Assert.AreEqual(attributeGroupNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_AttributeGroups, itemRowUpdated)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_AttributeGroups, attributeGroupName, "Attribute Group Name", null));
        }

        /// <summary>
        /// Deletes an individual attribute group
        /// </summary>
        /// <param name="attributeGroupName">The attribute group to be deleted</param>
        public void Admin_IndividualAttributeGroups_Delete(string attributeGroupName)
        {
            // Navigate to admin->individual attributes
            this._selenium.Navigate(Navigation.Admin.People_Setup.Individual_Attributes);

            // Delete an individual attribute group
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_AttributeGroups, attributeGroupName, "Attribute Group Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[3]/span/a", TableIds.Admin_AttributeGroups, itemRow + 1));

            // Click 'Yes' at the confirmation page
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Yes);

            // Verify the individual attribute group was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_AttributeGroups, attributeGroupName, "Attribute Group Name", null));
        }
        #endregion Individual Attribute Groups

        public void Admin_IndividualAttributes_Create(string attributeGroup, string individualAttributeName, bool recordStaffPastorInvolved, bool recordStartDate, bool recordComment, bool recordEndDate, bool active)
        {
            // Navigate to admin->individual attributes
            this._selenium.Navigate(Navigation.Admin.People_Setup.Individual_Attributes);

            // Click individual attributes
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lnkIndividualAttributes");

            // Attempt to create an individual attribute
            this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlAttributeGroups", attributeGroup);

            if (!string.IsNullOrEmpty(individualAttributeName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtIndividualAttributeName", individualAttributeName);
            }
            if (recordStaffPastorInvolved)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordStaffPastorInvolved");
            }
            if (recordStartDate)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordStartDate");
            }
            if (recordComment)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordComment");
            }
            if (recordEndDate)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordEndDate");
            }
            if (!active)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkIndividualAttributeIsActive");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnSaveIndividualAttribute");

            // Verify the individual attribute was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_IndividualAttributes, individualAttributeName, "Individual Attribute Name", null);
            Assert.AreEqual(individualAttributeName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_IndividualAttributes, itemRow)));
            Assert.AreEqual(recordStaffPastorInvolved, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRow + 1)));
            Assert.AreEqual(recordStartDate, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRow + 1)));
            Assert.AreEqual(recordEndDate, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRow + 1)));
            Assert.AreEqual(recordComment, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[6]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRow + 1)));
        }

        public void Admin_IndividualAttributes_Update(string attributeGroup, string individualAttributeName, bool recordStaffPastorInvolved, bool recordStartDate, bool recordComment, bool recordEndDate, bool active,
            string individualAttributeNameUpdated, bool recordStaffPastorInvolvedUpdated, bool recordStartDateUpdated, bool recordCommentUpdated, bool recordEndDateUpdated, bool activeUpdated)
        {
            // Navigate to admin->individual attributes
            this._selenium.Navigate(Navigation.Admin.People_Setup.Individual_Attributes);

            // Click individual attributes
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lnkIndividualAttributes");

            // Attempt to update an individual attribute
            this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlAttributeGroups", attributeGroup);

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_IndividualAttributes, individualAttributeName, "Individual Attribute Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/span/a", TableIds.Admin_IndividualAttributes, itemRow + 1));
            Assert.AreEqual(attributeGroup, this._selenium.GetText("//span[@id='ctl00_ctl00_MainContent_content_lblAttributeGroupName']"));
            Assert.AreEqual(individualAttributeName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtIndividualAttributeName"));
            Assert.AreEqual(recordStaffPastorInvolved, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkRecordStaffPastorInvolved"));
            Assert.AreEqual(recordStartDate, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkRecordStartDate"));
            Assert.AreEqual(recordComment, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkRecordComment"));
            Assert.AreEqual(recordStartDate, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkRecordEndDate"));
            Assert.AreEqual(active, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkIndividualAttributeIsActive"));

            if (!string.IsNullOrEmpty(individualAttributeNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtIndividualAttributeName", individualAttributeNameUpdated);
            }

            if (recordStaffPastorInvolvedUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordStaffPastorInvolved");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkRecordStaffPastorInvolved");
            }

            if (recordStartDateUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordStartDate");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkRecordStartDate");
            }

            if (recordEndDateUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordEndDate");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkRecordEndDate");
            }

            if (recordCommentUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkRecordComment");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkRecordComment");
            }

            if (!activeUpdated)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkIndividualAttributeIsActive");
            }
            else
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkIndividualAttributeIsActive");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnSaveIndividualAttribute");

            // Verify the individual attribute was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_IndividualAttributes, individualAttributeNameUpdated, "Individual Attribute Name", null);
            Assert.AreEqual(individualAttributeNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_IndividualAttributes, itemRowUpdated)));
            Assert.AreEqual(recordStaffPastorInvolvedUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRowUpdated + 1)));
            Assert.AreEqual(recordStartDateUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRowUpdated + 1)));
            Assert.AreEqual(recordEndDateUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRowUpdated + 1)));
            Assert.AreEqual(recordCommentUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[6]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_IndividualAttributes, itemRowUpdated + 1)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_IndividualAttributes, individualAttributeName, "Individual Attribute Name", null));
        }

        /// <summary>
        /// Deletes an individual attribute
        /// </summary>
        /// <param name="attributeGroup">The name of the attribute group that the attribute is tied to</param>
        /// <param name="individualAttributeName">The name of the individual attribute to be deleted</param>
        public void Admin_IndividualAttributes_Delete(string attributeGroup, string individualAttributeName)
        {
            // Navigate to admin->individual attributes
            this._selenium.Navigate(Navigation.Admin.People_Setup.Individual_Attributes);

            // Click individual attributes
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lnkIndividualAttributes");

            // Delete an individual attribute
            this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlAttributeGroups", attributeGroup);

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_IndividualAttributes, individualAttributeName, "Individual Attribute Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[7]/span/a", TableIds.Admin_IndividualAttributes, itemRow + 1));

            // Click 'Yes' at the confirmation page
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Yes);

            // Verify individual attribute was deleted
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lnkIndividualAttributes");
            this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlAttributeGroups", attributeGroup);

            if (this._selenium.IsElementPresent(TableIds.Admin_IndividualAttributes))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_IndividualAttributes, individualAttributeName, "Individual Attribute Name", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("No individual attributes exist");
            }
        }
        #endregion Individual Attributes

        #region Individual Requirements
        /// <summary>
        /// Creates an individual requirement
        /// </summary>
        /// <param name="requirementName">The name of the requirement to be created</param>
        public void Admin_IndividualRequirements_Create(string requirementName)
        {
            // Navigate to admin->indiviudal requirements
            this._selenium.Navigate(Navigation.Admin.People_Setup.Individual_Requirements);

            if (!string.IsNullOrEmpty(requirementName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_AddEditRequirment1_txtRequirementName", requirementName);
            }
            else
            {
                this._errorText.Add("Requirement name is required.");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_AddEditRequirment1_btnContinue");

            // Verify errors or verify creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                // Add creation verification here
            }
        }
        #endregion Individual Requirements

        #region Schools
        /// <summary>
        /// Creates a school
        /// </summary>
        /// <param name="schoolType">The type of the school to be created</param>
        /// <param name="schoolName">The name of the school to be created</param>
        public void Admin_Schools_Create(string schoolType, string schoolName)
        {
            // Navigate to admin->schools
            this._selenium.Navigate(Navigation.Admin.People_Setup.Schools);

            // Attempt to create a school
            if (!string.IsNullOrEmpty(schoolType))
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddSchoolTypeId", schoolType);
            }
            if (!string.IsNullOrEmpty(schoolName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtSchoolName", schoolName);
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the school was created
            this._selenium.VerifyElementPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgSchools']/tbody/tr[*]/td[position()=2 and text()='{0}' and ancestor::tr/td[position()=3 and text()='{1}']]", schoolName, schoolType));
        }

        /// <summary>
        /// Updates an existing school
        /// </summary>
        /// <param name="schoolType">The current school type</param>
        /// <param name="schoolName">The current school name</param>
        /// <param name="schoolTypeUpdated">The updated school type</param>
        /// <param name="schoolNameUpdated">The updated school name</param>
        public void Admin_Schools_Update(string schoolType, string schoolName, string schoolTypeUpdated, string schoolNameUpdated)
        {
            // Navigate to admin->schools
            this._selenium.Navigate(Navigation.Admin.People_Setup.Schools);

            // Attempt to update the school
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgSchools']/tbody/tr[*]/td[1]/span/a[ancestor::tr/td[position()=2 and text()='{0}']]", schoolName));
            Assert.AreEqual(schoolType, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddSchoolTypeId"));
            Assert.AreEqual(schoolName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtSchoolName"));

            if (!string.IsNullOrEmpty(schoolTypeUpdated))
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddSchoolTypeId", schoolTypeUpdated);
            }
            if (!string.IsNullOrEmpty("ctl00_ctl00_MainContent_content_txtSchoolName"))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtSchoolName", schoolNameUpdated);
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnMod");

            // Verify the school was updated, original no longer exists
            this._selenium.VerifyElementPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgSchools']/tbody/tr[*]/td[position()=2 and text()='{0}' and ancestor::tr/td[position()=3 and text()='{1}']]", schoolNameUpdated, schoolTypeUpdated));
            this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgSchools']/tbody/tr[*]/td[position()=2 and text()='{0}']", schoolName));
        }

        /// <summary>
        /// Deletes a school
        /// </summary>
        /// <param name="schoolName">The name of the school to be deleted</param>
        public void Admin_Schools_Delete(string schoolName)
        {
            // Navigate to admin->schools
            this._selenium.Navigate(Navigation.Admin.People_Setup.Schools);

            // Attempt to delete the school, click "Yes" at the confirmation page
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgSchools']/tbody/tr[*]/td[4]/span/a[ancestor::tr/td[2]/text()='{0}']", schoolName));
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Yes);

            // Verify the school was deleted
            this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgSchools']/tbody/tr[*]/td[position()=2 and text()='{0}']", schoolName));
        }
        #endregion Schools

        #region Departments
        /// <summary>
        /// Creates a department.
        /// </summary>
        /// <param name="departmentName">The name of the department to be created.</param>
        /// <param name="departmentCode">The code of the department to be created.</param>
        public void Admin_Departments_Create(string departmentName, string departmentCode)
        {
            // Navigate to admin->departments
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Departments);

            // Create the department
            if (!string.IsNullOrEmpty(departmentName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtDepartmentName_textBox", departmentName);
            }
            else
            {
                this._errorText.Add("Name is required.");
            }

            if (!string.IsNullOrEmpty(departmentCode))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtDepartmentCode_textBox", departmentCode);
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify errors or verify creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_Departments, departmentName, "Name");
                Assert.AreEqual(departmentName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_Departments, itemRow)));
                Assert.AreEqual(departmentCode, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Admin_Departments, itemRow)));
            }
        }

        /// <summary>
        /// Updates a department
        /// </summary>
        /// <param name="departmentName">The name of the department to be updated</param>
        /// <param name="departmentCode">The code of the department to be updated</param>
        /// <param name="departmentNameUpdated">The updated name of the department</param>
        /// <param name="departmentCodeUpdated">The updated code of the department</param>
        public void Admin_Departments_Update(string departmentName, string departmentCode, string departmentNameUpdated, string departmentCodeUpdated)
        {
            // Navigate to admin->departments
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Departments);

            // Update the department
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgDepartments']/tbody/tr[*]/td[1]/a[ancestor::tr/td[2]/span/text()='{0}']", departmentName));
            Assert.AreEqual(departmentName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtDepartmentName_textBox"));
            Assert.AreEqual(departmentCode, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtDepartmentCode_textBox"));
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtDepartmentName_textBox", departmentNameUpdated);
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtDepartmentCode_textBox", departmentCodeUpdated);
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the department was updated, original removed
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_Departments, departmentNameUpdated, "Name");
            Assert.AreEqual(departmentNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_Departments, itemRow)));
            Assert.AreEqual(departmentCodeUpdated, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Admin_Departments, itemRow)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_Departments, departmentName, "Name"));
        }

        /// <summary>
        /// Deletes a department
        /// </summary>
        /// <param name="departmentName">The name of the department to be deleted</param>
        public void Admin_Departments_Delete(string departmentName)
        {
            // Navigate to admin->departments
            this._selenium.Navigate(Navigation.Admin.Church_Setup.Departments);

            // Click to delete the department, click "Yes" at the confirmation page
            this._selenium.Click(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgDepartments']/tbody/tr[*]/td[4]/a[ancestor::tr/td[2]/span/text()='{0}']", departmentName));
            this._generalMethods.Popups_Confirmation("Yes");

            // Verify the department was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_Departments, departmentName, "Name"));
        }
        #endregion Departments

        #region Form Names
        /// <summary>
        /// Creates a form name
        /// </summary>
        /// <param name="formName">The form name to be created</param>
        /// <param name="active">The flag that controls the active/inactive setting for the form name</param>
        public void Admin_FormNames_Create(string formName, bool? active)
        {
            // Navigate to admin->form names
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Form_Names);

            // Create the form name
            if (!string.IsNullOrEmpty(formName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_AddEditContactType1_txtContactTypeName", formName);
            }
            else
            {
                this._errorText.Add("Form name is required.");
            }

            if (active != true)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_AddEditContactType1_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_AddEditContactType1_btnSave");

            // Verify the form name was created
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                string xpath = string.Empty;
                if (active == true)
                {
                    xpath = string.Format("//table[@class='grid']/tbody/tr[*]/td[position()=2 and text()='{0}' and ancestor::tr/td[3]/img[contains(@src, '/portal/images/check.gif?')]]", formName);
                }
                else
                {
                    xpath = string.Format("//table[@class='grid']/tbody/tr[*]/td[position()=2 and text()='{0}' and not(ancestor::tr/td[3]/img)]", formName);
                }
            }
        }

        /// <summary>
        /// Updates a form name
        /// </summary>
        /// <param name="formName">The form name to be updated</param>
        /// <param name="active">The current active/inactive setting for the form name</param>
        /// <param name="formNameUpdated">The updated form name</param>
        /// <param name="activeUpdated">The updated active/inactive setting for the form name</param>
        public void Admin_FormNames_Update(string formName, bool active, string formNameUpdated, bool activeUpdated)
        {
            // Navigate to admin->form names
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Form_Names);

            // Update the form name
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@class='grid']/tbody/tr[*]/td[1]/a[ancestor::tr/td[position()=2 and text()='{0}']]", formName));
            Assert.AreEqual(formName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_AddEditContactType1_txtContactTypeName"));
            Assert.AreEqual(active, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_AddEditContactType1_chkActive"));
            if (!string.IsNullOrEmpty(formNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_AddEditContactType1_txtContactTypeName", formNameUpdated);
            }

            if (!activeUpdated)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_AddEditContactType1_chkActive");
            }
            else
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_AddEditContactType1_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_AddEditContactType1_btnMod");

            // Verify the form name was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_FormNames, formNameUpdated, "Form Name", null);
            Assert.AreEqual(formNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_FormNames, itemRowUpdated)));
            Assert.AreEqual(activeUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Admin_FormNames, itemRowUpdated + 1)));
            this._selenium.VerifyElementNotPresent(string.Format("//table[@class='grid']/tbody/tr[*]/td[position()=2 and text()='{0}']", formName));
        }

        /// <summary>
        /// Deletes a form name
        /// </summary>
        /// <param name="formName">The form name to be deleted</param>
        public void Admin_FormNames_Delete(string formName)
        {
            // Navigate to admin->form names
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Form_Names);

            // Delete the form name, verify it was deleted
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@class='grid']/tbody/tr[*]/td[4]/a[ancestor::tr/td[position()=2 and text()='{0}']]", formName));
            this._selenium.VerifyElementNotPresent(string.Format("//table[@class='grid']/tbody/tr[*]/td[position()=2 and text()='{0}']", formName));
        }
        #endregion Form Names

        #region Manage Items
        public void Admin_ManageItems_Create(string name, string type, string ministry, string routeTo, bool multipleClose, bool dispositionRequiredOnClose, bool active)
        {
            // Navigate to admin->manage items
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Manage_Items);

            // Create the contact item
            if (!string.IsNullOrEmpty(name))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtContactItemName_textBox", name);
            }
            if (!string.IsNullOrEmpty(type))
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlbContactItemType_dropDownList", type);
            }
            if (!string.IsNullOrEmpty(ministry))
            {
                this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlbMinistry_dropDownList", ministry, this._javascript.DoesSelectHaveElements("ctl00_ctl00_MainContent_content_ddlbRouteTo_dropDownList"), "10000");
            }
            if (!string.IsNullOrEmpty(routeTo))
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlbRouteTo_dropDownList", routeTo);
            }
            if (multipleClose)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkMultipleClose");
            }
            if (dispositionRequiredOnClose)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkDispositionReqClose");
            }
            if (active)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the contact item was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_ManageItems, name, "Name", null);
            Assert.AreEqual(name, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_ManageItems, itemRow)));
            Assert.AreEqual(type, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Admin_ManageItems, itemRow)));
            Assert.AreEqual(ministry, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Admin_ManageItems, itemRow)));
            Assert.AreEqual(routeTo, this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Admin_ManageItems, itemRow)));
            Assert.AreEqual(multipleClose, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[6]/img", TableIds.Admin_ManageItems, itemRow + 1)));
            Assert.AreEqual(dispositionRequiredOnClose, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[7]/img", TableIds.Admin_ManageItems, itemRow + 1)));
            Assert.AreEqual(active, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[8]/img", TableIds.Admin_ManageItems, itemRow + 1)));
        }

        public void Admin_ManageItems_Update(string name, string type, string ministry, string routeTo, bool multipleClose, bool dispositionRequiredOnClose, bool active,
            string nameUpdated, string typeUpdated, string ministryUpdated, string routeToUpdated, bool multipleCloseUpdated, bool dispositionRequiredOnCloseUpdated, bool activeUpdated)
        {
            // Navigate to admin->manage items
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Manage_Items);

            // Update the contact item
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_ManageItems, name, "Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Admin_ManageItems, itemRow + 1));

            Assert.AreEqual(name, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtContactItemName_textBox"));
            Assert.AreEqual(type, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlbContactItemType_dropDownList"));
            Assert.AreEqual(ministry, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlbMinistry_dropDownList"));
            Assert.AreEqual(routeTo, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlbRouteTo_dropDownList"));
            Assert.AreEqual(multipleClose, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkMultipleClose"));
            Assert.AreEqual(dispositionRequiredOnClose, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkDispositionReqClose"));
            Assert.AreEqual(active, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkActive"));

            this._selenium.Type("ctl00_ctl00_MainContent_content_txtContactItemName_textBox", nameUpdated);
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlbContactItemType_dropDownList", typeUpdated);
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlbMinistry_dropDownList", ministryUpdated);
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlbRouteTo_dropDownList", routeToUpdated);
            if (multipleCloseUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkMultipleClose");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkMultipleClose");
            }

            if (dispositionRequiredOnCloseUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkDispositionReqClose");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkDispositionReqClose");
            }

            if (activeUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkActive");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the contact item was updated
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_ManageItems, nameUpdated, "Name", null);
            Assert.AreEqual(nameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_ManageItems, itemRowUpdated)));
            Assert.AreEqual(typeUpdated, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Admin_ManageItems, itemRowUpdated)));
            Assert.AreEqual(ministryUpdated, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Admin_ManageItems, itemRowUpdated)));
            Assert.AreEqual(routeToUpdated, this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Admin_ManageItems, itemRowUpdated)));
            Assert.AreEqual(multipleCloseUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[6]/img", TableIds.Admin_ManageItems, itemRowUpdated + 1)));
            Assert.AreEqual(dispositionRequiredOnCloseUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[7]/img", TableIds.Admin_ManageItems, itemRowUpdated + 1)));
            Assert.AreEqual(activeUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[8]/img", TableIds.Admin_ManageItems, itemRowUpdated + 1)));

            // Verify original is no longer present
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_ManageItems, name, "Name", null));
        }

        /// <summary>
        /// Deletes a contact item.
        /// </summary>
        /// <param name="name">The name of the contact item to be deleted</param>
        public void Admin_ManageItems_Delete(string name)
        {
            // Navigate to admin->manage items
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Manage_Items);

            // Delete the contact item, click "Yes" at the confirmation dialog
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_ManageItems, name, "Name", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[9]/a", TableIds.Admin_ManageItems, itemRow + 1));
            this._generalMethods.Popups_Confirmation("Yes");

            // Verify the contact item was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_ManageItems, name, "Name", null));
        }
        #endregion Manage Items

        #region Build Forms
        #endregion Build Forms

        #region Contact Dispositions
        /// <summary>
        /// 
        /// </summary>
        /// <param name="name">The name of the contact disposition to be created</param>
        /// <param name="includeInWeblink">The flag that controls if the disposition is available in weblink</param>
        /// <param name="weblinkOnly">The flag that controls if the disposition is weblink only</param>
        /// <param name="active">The flag that controls if the disposition is active</param>
        public void Admin_ContactDispositions_Create(string name, bool includeInWeblink, bool weblinkOnly, bool active)
        {
            // Navigate to admin->contact dispositions
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Contact_Dispositions);

            // Create the contact disposition
            if (!string.IsNullOrEmpty(name))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtContactDispositionName_textBox", name);
            }

            if (includeInWeblink)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_webLinkFieldSet_chkWebLink");
            }

            if (weblinkOnly)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_webLinkFieldSet_chkWebLinkOnly");
            }

            if (!active)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the contact disposition was created
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlActive_dropDownList", "All");
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_ContactDispositions, name, "Name", null);
            Assert.AreEqual(name, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_ContactDispositions, itemRow)));
            Assert.AreEqual(includeInWeblink, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRow + 1)));
            if (weblinkOnly)
            {
                Assert.AreEqual(false, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRow + 1)));
                Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRow + 1)));
            }
            else
            {
                Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRow + 1)));
            }
            Assert.AreEqual(active, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRow + 1)));
        }

        public void Admin_ContactDispositions_Update(string name, bool includeInWeblink, bool weblinkOnly, bool active, string nameUpdated, bool includeInWeblinkUpdated, bool weblinkOnlyUpdated, bool activeUpdated)
        {
            // Navigate to admin->contact dispositions
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Contact_Dispositions);

            // Update the contact disposition
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlActive_dropDownList", "All");
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);

            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgContactDispositions']/tbody/tr[*]/td[1]/a[ancestor::tr/td[2]/span[text()='{0}']]", name));
            Assert.AreEqual(name, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtContactDispositionName_textBox"));
            Assert.AreEqual(includeInWeblink, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_webLinkFieldSet_chkWebLink"));
            Assert.AreEqual(weblinkOnly, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_webLinkFieldSet_chkWebLinkOnly"));
            Assert.AreEqual(active, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkActive"));

            if (!string.IsNullOrEmpty(nameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtContactDispositionName_textBox", nameUpdated);
            }
            if (includeInWeblinkUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_webLinkFieldSet_chkWebLink");
            }
            if (weblinkOnlyUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_webLinkFieldSet_chkWebLinkOnly");
            }
            if (!activeUpdated)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the contact disposition was updated
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_ContactDispositions, nameUpdated, "Name", null);
            Assert.AreEqual(nameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_ContactDispositions, itemRowUpdated)));
            Assert.AreEqual(includeInWeblinkUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRowUpdated + 1)));
            if (weblinkOnlyUpdated)
            {
                Assert.AreEqual(false, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRowUpdated + 1)));
                Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRowUpdated + 1)));
            }
            else
            {
                Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRowUpdated + 1)));
            }
            Assert.AreEqual(activeUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/img[contains(@src, '/images/check.gif?')]", TableIds.Admin_ContactDispositions, itemRowUpdated + 1)));

            // Verify the original no longer exists
            this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgContactDispositions']/tbody/tr[*]/td[2]/span[text()='{0}']", name));
        }

        /// <summary>
        /// Deletes a contact disposition
        /// </summary>
        /// <param name="name">The name of the contact disposition to be deleted</param>
        public void Admin_ContactDispositions_Delete(string name)
        {
            // Navigate to admin->contact dispositions
            this._selenium.Navigate(Navigation.Admin.Contact_Setup.Contact_Dispositions);

            // Click to delete the contact disposition, select 'Yes' at the confirmation
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlActive_dropDownList", "All");
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);

            this._selenium.Click(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgContactDispositions']/tbody/tr[*]/td[6]/a[ancestor::tr/td[2]/span/text()='{0}']", name));
            this._generalMethods.Popups_Confirmation("Yes");

            // Verify the contact disposition no longer exists
            if (this._selenium.IsElementPresent(TableIds.Admin_ContactDispositions))
            {
                this._selenium.VerifyElementNotPresent(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgContactDispositions']/tbody/tr[*]/td[2]/span[text()='{0}']", name));
            }
            else
            {
                this._selenium.VerifyTextPresent("No records found");
            }
        }
        #endregion Contact Dispositions

        #region Ministries
        /// <summary>
        /// Creates a ministry.
        /// </summary>
        /// <param name="ministryName">The name of the ministry</param>
        public void Admin_Ministries_Create(string ministryName)
        {
            // Navigate to admin->ministries
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Ministries);

            if (!string.IsNullOrEmpty(ministryName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtMinistryName", ministryName);
            }
            else
            {
                this._errorText.Add("Ministry name is required.");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                // Add verification logic here
            }
        }
        #endregion Ministries

        #region Head Count Attributes
        /// <summary>
        /// Creates a head count attribute
        /// </summary>
        /// <param name="attributeName">The name of the head count attribute</param>
        /// <param name="outside">Flag designating if outside</param>
        public void Admin_HeadCountAttributes_Create(string attributeName, bool outside)
        {
            // Navigate to admin->head count attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Head_Count_Attributes);

            // Create the head count attribute
            if (!string.IsNullOrEmpty(attributeName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_Menu1_attributes_txtActivityAttributeName_textBox", attributeName);
            }
            else
            {
                this._errorText.Add("Attribute name is required.");
            }

            if (outside)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_Menu1_attributes_chkIsPeripheral");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_Menu1_attributes_btnSaveAttribute");

            // Verify errors or verify creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_HeadCountAttributes, attributeName, "Attribute Name", null);
                Assert.AreEqual(attributeName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_HeadCountAttributes, itemRow)));
                Assert.AreEqual(outside, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Admin_HeadCountAttributes, itemRow + 1)));
            }
        }

        public void Admin_HeadCountAttributes_Update(string attributeName, bool outside, string attributeNameUpdated, bool outsideUpdated)
        {
            // Navigate to admin->head count attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Head_Count_Attributes);

            // Update the head count attribute
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_HeadCountAttributes, attributeName, "Attribute Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Admin_HeadCountAttributes, itemRow + 1));
            Assert.AreEqual(attributeName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_Menu1_attributes_txtActivityAttributeName_textBox"));
            Assert.AreEqual(outside, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_Menu1_attributes_chkIsPeripheral"));

            if (!string.IsNullOrEmpty(attributeNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_Menu1_attributes_txtActivityAttributeName_textBox", attributeNameUpdated);
            }

            if (outsideUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_Menu1_attributes_chkIsPeripheral");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_Menu1_attributes_chkIsPeripheral");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_Menu1_attributes_btnSaveAttribute");

            // Verify the head count attribute was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_HeadCountAttributes, attributeNameUpdated, "Attribute Name", null);
            Assert.AreEqual(attributeNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_HeadCountAttributes, itemRow)));
            Assert.AreEqual(outsideUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Admin_HeadCountAttributes, itemRow + 1)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_HeadCountAttributes, attributeName, "Attribute Name", null));
        }

        /// <summary>
        /// Deletes a head count attribute
        /// </summary>
        /// <param name="attributeName">The name of the attribute to be deleted</param>
        public void Admin_HeadCountAttributes_Delete(string attributeName)
        {
            // Navigate to admin->head count attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Head_Count_Attributes);

            // Delete the head count attribute
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_HeadCountAttributes, attributeName, "Attribute Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[4]/a", TableIds.Admin_HeadCountAttributes, itemRow + 1));

            // Verify the head count attribute was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_HeadCountAttributes, attributeName, "Attribute Name", null));
        }
        #endregion Head Count Attributes

        #region Activity Types
        /// <summary>
        /// Creates an activity type.
        /// </summary>
        /// <param name="activityTypeName">The name of the activity type</param>
        /// <param name="active">Flag designating if the activity type is active</param>
        public void Admin_ActivityTypes_Create(string activityTypeName, bool active)
        {
            // Navigate to admin->activity types
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Activity_Types);

            // Create an activity type
            if (!string.IsNullOrEmpty(activityTypeName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtActivityTypeName_textBox", activityTypeName);
            }
            else
            {
                this._errorText.Add("Activity type name is required.");
            }

            if (!active)
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify errors or verify creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_ActivityTypes, activityTypeName, "Name", null);
                Assert.AreEqual(activityTypeName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_ActivityTypes, itemRow)));
                Assert.AreEqual(active, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Admin_ActivityTypes, itemRow + 1)));
            }
        }

        public void Admin_ActivityTypes_Update(string activityTypeName, bool active, string activityTypeNameUpdated, bool activeUpdated)
        {
            // Navigate to admin->activity types
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Activity_Types);

            // Update an activity type
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_ActivityTypes, activityTypeName, "Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Admin_ActivityTypes, itemRow + 1));
            Assert.AreEqual(activityTypeName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtActivityTypeName_textBox"));
            Assert.AreEqual(active, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Admin_ActivityTypes, itemRow + 1)));
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtActivityTypeName_textBox", activityTypeNameUpdated);

            if (activeUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkActive");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the activity type was updated
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_ActivityTypes, activityTypeNameUpdated, "Name", null);
            Assert.AreEqual(activityTypeNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Admin_ActivityTypes, itemRowUpdated)));
            Assert.AreEqual(active, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Admin_ActivityTypes, itemRowUpdated + 1)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_ActivityTypes, activityTypeName, "Name", null));
        }

        /// <summary>
        /// Deletes an activity type.
        /// </summary>
        /// <param name="activityTypeName">The name of the activity type to be deleted</param>
        public void Admin_ActivityTypes_Delete(string activityTypeName)
        {
            // Navigate to admin->activity types
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Activity_Types);

            // Delete an activity type
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_ActivityTypes, activityTypeName, "Name", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[4]/a", TableIds.Admin_ActivityTypes, itemRow + 1));

            // Click 'Yes' at the confirmation dialog
            this._generalMethods.Popups_Confirmation("Yes");

            // Verify the activity type name was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_ActivityTypes, activityTypeName, "Name", null));
        }
        #endregion Activity Types

        #region Job Attributes
        /// <summary>
        /// Creates a job attribute group.
        /// </summary>
        /// <param name="attributeGroupName">The name of the job attribute group to be created</param>
        public void Admin_JobAttributeGroups_Create(string attributeGroupName)
        {
            // Navigate to admin->job attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Job_Attributes);

            // Create a job attribute
            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);

            if (!string.IsNullOrEmpty(attributeGroupName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAttributeGroupName_textBox", attributeGroupName);
            }
            else
            {
                this._errorText.Add("Attribute group name is required and cannot exceed 50 characters.");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify error messages or verify creation
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributeGroups, attributeGroupName, "Attribute Group", null);
                Assert.AreEqual(attributeGroupName, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.Admin_JobAttributeGroups, itemRow)));
            }
        }

        /// <summary>
        /// Deletes a job attribute group.
        /// </summary>
        /// <param name="attributeGroupName">The name of the attribute group to be deleted</param>
        public void Admin_JobAttributeGroups_Delete(string attributeGroupName)
        {
            // Navigate to admin->job attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Job_Attributes);

            // Delete a job attribute
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributeGroups, attributeGroupName, "Attribute Group", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[3]/a", TableIds.Admin_JobAttributeGroups, itemRow + 1));

            // Click 'Yes' at the confirmation
            this._generalMethods.Popups_Confirmation("Yes");

            // Verify the job attribute group was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_JobAttributeGroups, attributeGroupName, "Attribute Group", null));
        }

        /// <summary>
        /// Creates a job attribute.
        /// </summary>
        /// <param name="attributeGroupName">The name of the attribute group the attribute will reside in</param>
        /// <param name="attributeName">The name of the attribute</param>
        public void Admin_JobAttributes_Create(string attributeGroupName, string attributeName)
        {
            // Navigate to admin->job attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Job_Attributes);

            // Create a job attribute
            decimal itemRowAttributeGroup = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributeGroups, attributeGroupName, "Attribute Group", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Admin_JobAttributeGroups, itemRowAttributeGroup + 1));
            Assert.AreEqual(attributeGroupName, this._selenium.GetText("ctl00_ctl00_MainContent_content_lblJobAttributeGroupName"));

            if (!string.IsNullOrEmpty(attributeName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtJobAttributeName_textBox", attributeName);
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the attribute group was created
            decimal itemRowAttribute = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributes, attributeName, "Job Attribute", null);
            Assert.AreEqual(attributeName, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Admin_JobAttributes, itemRowAttribute)));
            Assert.AreEqual(attributeGroupName, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Admin_JobAttributes, itemRowAttribute)));
        }

        public void Admin_JobAttributes_Update(string attributeGroupName, string attributeName, string attributeNameUpdated)
        {
            // Navigate to admin->job attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Job_Attributes);

            // Update a job attribute
            decimal itemRowAttributeGroup = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributeGroups, attributeGroupName, "Attribute Group", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Admin_JobAttributeGroups, itemRowAttributeGroup + 1));
            Assert.AreEqual(attributeGroupName, this._selenium.GetText("ctl00_ctl00_MainContent_content_lblJobAttributeGroupName"));

            decimal itemRowAttribute = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributes, attributeName, "Job Attribute", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Admin_JobAttributes, itemRowAttribute + 1));
            Assert.AreEqual(attributeName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtJobAttributeName_textBox"));

            if (!string.IsNullOrEmpty(attributeNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtJobAttributeName_textBox", attributeNameUpdated);
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the attribute was created, original no longer exists
            decimal itemRowAttributeUpdated = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributes, attributeNameUpdated, "Job Attribute", null);
            Assert.AreEqual(attributeNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Admin_JobAttributes, itemRowAttributeUpdated)));
            Assert.AreEqual(attributeGroupName, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Admin_JobAttributes, itemRowAttributeUpdated)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_JobAttributes, attributeName, "Job Attribute", null));
        }

        /// <summary>
        /// Deletes a job attribute.
        /// </summary>
        /// <param name="attributeGroupName">The name of the attribute group the attribute resides in</param>
        /// <param name="attributeName">The name of the attribute to be deleted</param>
        public void Admin_JobAttributes_Delete(string attributeGroupName, string attributeName)
        {
            // Navigate to admin->job attributes
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Job_Attributes);

            // Delete a job attribute
            decimal itemRowAttributeGroup = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributeGroups, attributeGroupName, "Attribute Group", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Admin_JobAttributeGroups, itemRowAttributeGroup + 1));

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Admin_JobAttributes, attributeName, "Job Attribute", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[5]/a", TableIds.Admin_JobAttributes, itemRow + 1));

            // Click 'Yes' at the confirmation
            this._generalMethods.Popups_Confirmation("Yes");

            // Verify the job attribute was removed
            if (this._selenium.IsElementPresent(TableIds.Admin_JobAttributes))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Admin_JobAttributes, attributeName, "Job Attribute", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("No records found");
            }
        }
        #endregion Job Attributes

        #region Job Information
        /// <summary>
        /// Creates a job information.
        /// </summary>
        /// <param name="informationName">The name of the job information</param>
        /// <param name="textFieldLength">The length of the text field</param>
        public void Admin_JobInformation_Create(string informationName, string textFieldLength)
        {
            // Navigate to admin->job information
            this._selenium.Navigate(Navigation.Admin.Ministry_Setup.Job_Information);

            // Attempt to save a job information
            if (!string.IsNullOrEmpty(informationName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtJobInformationName_textBox", informationName);
            }
            else
            {
                this._errorText.Add("Information name is required and cannot exceed 30 characters");
            }

            if (!string.IsNullOrEmpty(textFieldLength))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtTextFieldLength_textBox", textFieldLength);
            }
            else
            {
                this._errorText.Add("Text field length is required cannot exceed 4 characters");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnAddJobInfo");

            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                // finish create logic here
            }
        }
        #endregion Job Information

        #region Volunteer Types
        /// <summary>
        /// Creates a volunteer type.
        /// </summary>
        /// <param name="volunteerTypeName">The name of the volunteer type.</param>
        public void Admin_VolunteerTypes_Create(string volunteerTypeName, bool active)
        {
            // Navigate to admin->volunteer types
            this._selenium.Navigate(Navigation.Portal.Admin.Ministry_Setup.Volunteer_Types);

            if (!string.IsNullOrEmpty(volunteerTypeName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtParticipantTypeName_textBox", volunteerTypeName);
            }
            else
            {
                this._errorText.Add("Volunteer type name is required and cannot exceed 20 characters");
            }

            if (!active)
            {
                this._selenium.Click("ctl00_ctl00_MainContent_content_chkActive");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                int itemRow = Decimal.ToInt32(this._generalMethods.GetTableRowNumber(TableIds.Admin_VolunteerTypes, volunteerTypeName, "Name"));
                //TODO Verify Table Data method is webdriver method and not old selenium. Need to fix.
                //this._generalMethods.VerifyTableDataWebDriver(TableIds.Admin_VolunteerTypes, itemRow, new Dictionary<int, string> { { 1, volunteerTypeName } });
                Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Admin_VolunteerTypes, itemRow + 1)));
            }
        }
        #endregion Volunteer Types

        #region Security Setup

        public void Admin_SecuritySetup_User_Create(string userName, string firstName, string lastName, string email, string password, string passwordVerify, bool isLinked, bool isActive = true)
        {
            //Fill out Form 
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtLogin").SendKeys(userName);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtEmail").SendKeys(email);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFirstName").SendKeys(firstName);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtLastName").SendKeys(lastName);

            //Is Active?
            if (isActive)
            {
                IWebElement activeCheckBox = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkEnabled");
                if (!activeCheckBox.Selected)
                {
                    activeCheckBox.Click();
                }
            }
            else
            {
                IWebElement activeCheckBox = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkEnabled");
                if (activeCheckBox.Selected)
                {
                    activeCheckBox.Click();
                }
            }

            //Password
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtPassword").SendKeys(password);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtPasswordValidation").SendKeys(password);


            if (isLinked)
            {
                string fullName = string.Format("{0} {1}", firstName, lastName);
                //Link Person
                this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(fullName);

            }

        }

        /// <summary>
        /// Finds Portal user on the Admin > Security Setup > Portal User page and navigates to Edit User
        /// </summary>
        /// <param name="username"></param>
        public void Admin_SecuritySetup_User_EditUser_View(string userFullName)
        {
            // How many pages are there?
            int numofPages = this._driver.FindElementsByXPath("//div[@class='grid_controls']/ul/li").Count;
            if (numofPages > 0)
            {
                // Cycle through each page, starting on page 1
                for (int pageIndex = 1; pageIndex <= numofPages; pageIndex++)
                {
                    if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(userFullName)))
                    {
                        int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Admin_PortalUsers, userFullName, "Name") + 1;
                        this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[7]/a", TableIds.Admin_PortalUsers, row )).Click();
                        this._driver.FindElementByLinkText("Edit user").Click();
                        break;
                    }
                    else
                    {
                        this._driver.FindElementByXPath(string.Format("//div[@class='grid_controls']/ul/li[*]/a[text()='{0}']", pageIndex)).Click();
                    }
                }
            }
            //Only one page so assuming there is a group there to click on
            else
            {
                int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Admin_PortalUsers, userFullName, "Name");
                this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[7]/a", TableIds.Admin_PortalUsers, row)).Click();
                this._driver.FindElementByLinkText("Edit user").Click();
            }
            this._generalMethods.WaitForElement(By.Id("ctl00_ctl00_MainContent_content_txtLogin"));
        }

        /// <summary>
        /// Changes Portal User Password.
        /// </summary>
        /// <param name="username"></param>
        /// <param name="newPassword"></param>
        public void Admin_SecuritySetup_User_PasswordReset(string userFullName, string newPassword)
        {
            //Navigate to Admin > Security setup > Portal Users
            this._generalMethods.Navigate_Portal(Navigation.Admin.Security_Setup.Portal_Users);

            //Find and Click on the user edit 
            this.Admin_SecuritySetup_User_EditUser_View(userFullName);

            //Click the Change password button
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkChangePassword").Click();
            this._generalMethods.WaitForElement(By.Id("ctl00_ctl00_MainContent_content_txtPassword"));

            //Change the password
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtPassword").SendKeys(newPassword);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtPasswordValidation").SendKeys(newPassword);

            //Click Save
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnMod").Click();
            this._generalMethods.WaitForElement(By.Id("ctl00_ctl00_MainContent_content_ddlStatus_dropDownList"));
  
        }

        #endregion Security Setup
        #endregion Admin

        #region Giving

        #region Contributions

        #region Search
        public void Giving_Search_VerifyContributionsPresent(string searchBy, string attributedTo, string fund, string reference, int amount, bool toBeThanked)
        {
            // Navigate to giving->search
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Search);

            // Search for and select an individual
            this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(attributedTo);

            //Set Date to decrease data displayed
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dtStartDate").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dtStartDate").SendKeys(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).AddDays(-5).ToShortDateString());

            // Search contributions
            if (!string.IsNullOrEmpty(searchBy))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlHousehold_dropDownList")).SelectByText(searchBy);
            }

            if (toBeThanked)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkThankable").Click();
            }

            this._driver.FindElementById(GeneralButtons.Search).Click();

            int itemRow = reference == "–" ? this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Search, string.Format("{0:c}", amount), "Amount", null) : this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Search, reference, "Ref.", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_Search);
            Assert.AreEqual(attributedTo, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[2].Text);
            Assert.AreEqual(string.Format("{0:M/d/yyyy}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))), table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[4].Text);
            Assert.AreEqual(reference, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[7].Text);
            Assert.AreEqual(string.Format("{0:c}", amount), table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[9].Text);
        }


        public void Giving_Search_VerifyContributionsNotPresent(string searchBy, string attributedTo, string fund, string reference, int amount, bool toBeThanked)
        {
            // Navigate to giving->search
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Search);

            // Search contributions
            if (!string.IsNullOrEmpty(searchBy))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlHousehold_dropDownList")).SelectByText(searchBy);
            }
            if (toBeThanked)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkThankable").Click();
            }

            //Set Date to decrease data displayed
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dtStartDate").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dtStartDate").SendKeys(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).AddDays(-5).ToShortDateString());

            this._driver.FindElementById(GeneralButtons.Search).Click();

            if (this._driver.FindElementsById(TableIds.Portal.Giving_Search).Count > 0)
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_Search, reference, "Ref.", null));
            }
            else
            {
                Assert.IsTrue(this._driver.FindElementByTagName("html").Text.Contains("No records found"));
            }
        }
        #endregion Search

        #region Contributor Details

        #region Contributions
        /// <summary>
        /// Views the contributions for a given contributor/organization. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualOrOrganizationName">The name of the individual contributor.</param>
        /// <param name="organizationName">The name of the organization.</param>
        public void Giving_ContributorDetails_View(string individualOrOrganizationName, [Optional, DefaultParameterValue(false)] bool isOrganization)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._selenium.GetLocation().Contains("/giving/householdcontribution2.aspx"))
            {
                this._selenium.Navigate(Navigation.Giving.Contributions.Contributor_Details);
            }

            // If we are viewing someone, change person
            if (this._selenium.IsElementPresent("link=Change person"))
            {
                this._selenium.Click("link=Change person");
            }

            // Search for and select an individual/organization
            this._generalMethods.SelectPersonFromModal(individualOrOrganizationName, isOrganization);

            //// Find a person
            //this.People_ViewIndividual(individualOrOrganizationName);

            //// Navigate
            //this._selenium.Navigate(Navigation.Giving.Contributions.Contributor_Details);
        }

        public void Giving_ContributorDetails_View_WebDriver(string individualOrOrganizationName, bool isOrganization = false)
        {
            // Navigate to giving->contributor details if not the current page

            if (!this._driver.Url.Contains("/giving/householdcontribution2.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Contributor_Details);
            }
            /*else
            {
                // If we are viewing someone, change person
                if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Change person")))
                {
                    this._driver.FindElementByLinkText("Change person").Click();
                }
            }*/

            if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Change person")))
            {
                this._driver.FindElementByLinkText("Change person").Click();
            }

            // Search for and select an individual/organization
            this._generalMethods.SelectPersonFromModalWebDriver(individualOrOrganizationName, isOrganization);

            //// Find a person
            //this.People_ViewIndividual(individualOrOrganizationName);

            //// Navigate
            //this._selenium.Navigate(Navigation.Giving.Contributions.Contributor_Details);
        }

        #endregion Contributions

        #region Pledges

        public void Giving_ContributorDetails_Pledges_Delete_All(string individualName, [Optional, DefaultParameterValue(false)]  bool isOrganization)
        {
            // Navigate to Contributor Details and select individual
            this.Giving_ContributorDetails_View(individualName, isOrganization);

            // Click on the Pledges tab
            this._selenium.Click("ctl00_ctl00_MainContent_content_lbtnPledges");

            // Wait till the Pledge page actually loads 
            Retry.WithPolling(500).WithTimeout(50000).WithFailureMessage("Schedule page did not load in alloted time.")
                .Until(() => this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_ddPledgeDriveId"));

            //TableIds.Giving_Pledges
            int delRowCount = this._generalMethods.GetTableRowCount("ctl00_ctl00_MainContent_content_dgPledges");
            TestLog.WriteLine(string.Format("{0} pledges found", delRowCount - 1));

            //for (int i = 2; i < delRowCount+1; i++)
            while (delRowCount > 1)
            {
                // Delete Pledge
                this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[11]/a", 2));
                delRowCount = this._generalMethods.GetTableRowCount("ctl00_ctl00_MainContent_content_dgPledges");
                TestLog.WriteLine(string.Format("{0} pledges found", delRowCount - 1));

            }

        }

        public void Giving_ContributorDetails_Pledges_Delete_All_WebDriver(string individualName, [Optional, DefaultParameterValue(false)]  bool isOrganization)
        {

            int delRowCount = 0;

            // Navigate to Contributor Details and select individual
            this.Giving_ContributorDetails_View_WebDriver(individualName, isOrganization);

            // Click on the Pledges tab
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbtnPledges").Click();

            // Wait till the Pledge page actually loads 
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_ddPledgeDriveId"), 1, "Schedule page did not load in alloted time.");

            //TableIds.Giving_Pledges
            try
            {
                delRowCount = this._generalMethods.GetTableRowCountWebDriver("ctl00_ctl00_MainContent_content_dgPledges");
                TestLog.WriteLine(string.Format("{0} pledges found", delRowCount - 1));
            }
            catch (Exception e)
            {
                delRowCount = 0;
                TestLog.WriteLine(string.Format("{0} pledges found", delRowCount));
            }

            //for (int i = 2; i < delRowCount+1; i++)
            while (delRowCount > 1)
            {
                // Delete Pledge
                this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[11]/a", 2)).Click();
                delRowCount = this._generalMethods.GetTableRowCountWebDriver("ctl00_ctl00_MainContent_content_dgPledges");
                TestLog.WriteLine(string.Format("{0} pledges found", delRowCount - 1));

            }

        }


        /// <summary>
        /// Views the pledges for a given contributor.
        /// </summary>
        /// <param name="individualName">The name of the contributor.</param>
        /// <param name="isOrganization">An optional parameter specifying in the contributor is an organization.  Default is false</param>
        public void Giving_ContributorDetails_Pledges_View(string individualName, [Optional, DefaultParameterValue(false)]  bool isOrganization)
        {
            // Navigate to Contributor Details and select individual
            this.Giving_ContributorDetails_View(individualName, isOrganization);

            // Click on the Pledges tab
            this._selenium.Click("ctl00_ctl00_MainContent_content_lbtnPledges");

            // Wait till the Pledge page actually loads 
            Retry.WithPolling(500).WithTimeout(50000).WithFailureMessage("Schedule page did not load in alloted time.")
                .Until(() => this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_ddPledgeDriveId"));
        }

        public void Giving_ContributorDetails_Pledges_View_WebDriver(string individualName, [Optional, DefaultParameterValue(false)]  bool isOrganization)
        {
            // Navigate to Contributor Details and select individual
            this.Giving_ContributorDetails_View_WebDriver(individualName, isOrganization);

            // Click on the Pledges tab
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbtnPledges").Click();

            // Wait till the Pledge page actually loads 
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_ddPledgeDriveId"), 1, "Schedule page did not load in alloted time.");

        }


        /// <summary>
        /// Adds a new pledge drive commitment for an individual.
        /// </summary>
        /// <param name="individualName">The name of the contributor.</param>
        /// <param name="pledgeDriveName">The name of the pledge drive.</param>
        /// <param name="attributedTo">Who the pledge is attributed to.</param>
        /// <param name="amount">The amount of the pledge.</param>
        /// <param name="frequency">The frequency of the pledge.</param>
        /// <param name="startDate">The start date.</param>
        /// <param name="endDate">The end date.</param>
        /// <param name="isOrganization">An optional parameter that specifies if this individual is an organization. False will be used by default</param>
        public void Giving_ContributorDetails_Pledges_AddPledgeDrive(string individualName, string pledgeDriveName, string attributedTo, string amount, string frequency, DateTime startDate, DateTime endDate, [Optional, DefaultParameterValue(false)] bool isOrganization)
        {
            // Navigate to Pledges tab
            this.Giving_ContributorDetails_Pledges_View(individualName, isOrganization);

            // Select the pledge drive
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddPledgeDriveId", pledgeDriveName);

            // Select who the pledge is attributed to
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddHsdIndId", attributedTo);

            // Enter the amount of the pledge
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtAmount", amount);

            // Select the frequency of the pledge
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddFrequencyId", frequency);

            // Enter the start date
            this._selenium.Type("ctl00_ctl00_MainContent_content_dtePledgeStart", startDate.ToShortDateString());

            // Enter the end date
            this._selenium.Type("ctl00_ctl00_MainContent_content_dtePledgeEnd", endDate.ToShortDateString());

            // Save the pledge
            this._selenium.Click("ctl00_ctl00_MainContent_content_btnSavePledge");

            this.Giving_ContributorDetails_Pledges_View(individualName, isOrganization);

            // Verify pledge was saved
            var row2 = this._generalMethods.GetTableRowNumber(TableIds.Giving_Pledges, string.Format("${0}", amount), "Amount") + 1;
            Assert.AreEqual(individualName, this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[3]", row2)), "Attributed To was not correct.");
            Assert.AreEqual(pledgeDriveName, this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[4]", row2)), "Pledge Drive name was not correct.");
            Assert.AreEqual(string.Format("${0}", amount), this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[5]", row2)), "Amount was not correct.");
            Assert.AreEqual(frequency, this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[6]", row2)), "Frequency was not correct.");
            Assert.AreEqual(startDate.ToShortDateString(), this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[7]", row2)), "Start Date was not correct");

            // Delete Pledge
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[11]/a", row2));

            // Verify pledge was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Giving_Pledges, amount, "Amount"), "Deleted pledge was still present!!");
        }

        public void Giving_ContributorDetails_Pledges_AddPledgeDrive_WebDriver(string individualName, string pledgeDriveName, string attributedTo, string amount, string frequency, DateTime startDate, DateTime endDate, [Optional, DefaultParameterValue(false)] bool isOrganization)
        {
            // Navigate to Pledges tab
            this.Giving_ContributorDetails_Pledges_View_WebDriver(individualName, isOrganization);

            // Select the pledge drive
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddPledgeDriveId")).SelectByText(pledgeDriveName);

            // Select who the pledge is attributed to
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddHsdIndId")).SelectByText(attributedTo);

            // Enter the amount of the pledge
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAmount").SendKeys(amount);

            //FGJ TODO
            // Select the frequency of the pledge
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddFrequencyId")).SelectByText(frequency);

            // Enter the start date
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dtePledgeStart").SendKeys(startDate.ToShortDateString());

            // Enter the end date
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dtePledgeEnd").SendKeys(endDate.ToShortDateString());

            // Save the pledge
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSavePledge").Click();

            this.Giving_ContributorDetails_Pledges_View_WebDriver(individualName, isOrganization);

            // Verify pledge was saved
            var row2 = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Pledges, string.Format("${0}", amount), "Amount") + 1;
            try
            {
                Assert.AreEqual(individualName, this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[3]", row2)).Text, "Attributed To was not correct.");
                Assert.AreEqual(pledgeDriveName, this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[4]", row2)).Text, "Pledge Drive name was not correct.");
                Assert.AreEqual(string.Format("${0}", amount), this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[5]", row2)).Text, "Amount was not correct.");
                Assert.AreEqual(frequency, this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[6]", row2)).Text, "Frequency was not correct.");
                Assert.AreEqual(startDate.ToShortDateString(), this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[7]", row2)).Text, "Start Date was not correct");  //"M/dd/yyyy"
            }
            finally
            {
                // Delete Pledge
                this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_dgPledges']/tbody/tr[{0}]/td[11]/a", row2)).Click();

                // Verify pledge was deleted
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Giving_Pledges, amount, "Amount"), "Deleted pledge was still present!!");
            }

        }


        #endregion Pledges

        #region Schedules

        #region View
        /// <summary>
        /// Views the schedules for a given contributor. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The name of the contributor.</param>
        public void Giving_ContributorDetails_Schedules_View(string individualName)
        {
            // Search for and select an individual
            this.Giving_ContributorDetails_View(individualName, false);

            // Click on the Schedules tab
            this._selenium.Click("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic']");

            // Wait till the New Schedule link is present
            Retry.WithPolling(100).WithTimeout(50000).WithFailureMessage("Schedule page did not load in alloted time.")
                .Until(() => this._selenium.IsElementPresent("link=New Schedule"));
        }

        public void Giving_ContributorDetails_Schedules_View_WebDriver(string individualName)
        {
            // Search for and select an individual
            this.Giving_ContributorDetails_View_WebDriver(individualName, false);

            // Click on the Schedules tab
            this._generalMethods.WaitForPageIsLoaded(600);
            this._driver.FindElementByLinkText("Schedules").Click();
            //this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbtnAutomatic").Click();

            this._generalMethods.WaitForElement(this._driver, By.LinkText("New Schedule"), 50000, "Schedule page did not load in alloted time.");

        }

        #endregion View


        #region One Time
        /// <summary>
        /// Creates a one time scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="scheduledDate">The day you wish this payment to be processed.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_CreditCard_OneTime_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_CreditCard_OneTime(string individualName, string fundOrPledgeDrive, string subFund, string amount,
            DateTime scheduleDate, string firstName, string lastName, string creditCardType,
            string creditCardNumber, string expirationMonth, string expirationYear,
            string validFromMonth, string validFromYear, string securityCode,
            string churchId,
            string address1 = "", string address2 = "", string city = "", string stProvince = "", string postalCode = "", string county = "")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for One-Time
                this._selenium.Click("frequency_4");

                // Enter contribution date
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var date = scheduleDate.ToShortDateString();
                this._selenium.Type("onetime-process-date", date);

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for credit card
                    if (churchId.ToString() == "15")
                    {
                        //this._selenium.Click("contribution_payment_cc");
                        //this._selenium.Click("contribution_payment_cc");
                        this._selenium.Click("payment_method_cc");
                    }

                    // Enter all credit card information
                    this._selenium.Type("FirstName", firstName);
                    this._selenium.Type("LastName", lastName);
                    this._selenium.Select("payment_type_id", creditCardType);
                    this._selenium.Type("account_number", creditCardNumber);
                    //TestLog.WriteLine("CC: " + creditCardNumber);
                    this._selenium.TypeKeys("cc_account_number", creditCardNumber);
                    this._selenium.Select("expiration_month", expirationMonth);
                    this._selenium.Select("expiration_year", expirationYear);
                    this._selenium.Type("CVC", securityCode);


                    //Address
                    if (address1 != "") this._selenium.Type("Address1", address1);
                    if (address2 != "") this._selenium.Type("Address2", address2);
                    if (city != "") this._selenium.Type("City", city);
                    if (stProvince != "") this._selenium.Select("state", stProvince);
                    if (postalCode != "") this._selenium.Type("PostalCode", postalCode);
                    if (county != "") this._selenium.Type("County", county);

                    // If Switch or Solo enter Valid From month/year
                    //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                    //    this._selenium.Select("valid_from", validFromMonth);
                    //    this._selenium.Select("valid_from_year", validFromYear);
                    //}

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Verify schedule exists
                        if (scheduleDate == TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")))
                        {
                            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lbtnContribution");
                            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lbtnContribution");
                            var rowC = this._generalMethods.GetTableRowNumber(TableIds.Giving_Contributions, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                            Assert.AreEqual(scheduleDate.ToShortDateString(), this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[1]", rowC)), "Contribution date was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)), "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " - " + subFund, this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)), "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[5]", rowC)), "Amount was incorrect.");
                        }
                        else
                        {
                            var rowS = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                            Assert.AreEqual("One time", this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", rowS)), "Frequency name was not correct.");
                            Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(scheduleDate), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", rowS)), "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)), "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)), "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", rowS)), "Amount was incorrect.");
                        }
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (creditCardType == "--")
                        {
                            this._selenium.VerifyTextPresent("Credit card type is required");
                        }
                        else if (string.IsNullOrEmpty(creditCardNumber))
                        {
                            this._selenium.VerifyTextPresent("Credit card number is required");
                        }
                        else if (creditCardNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Credit card cannot exceed 30 characters");
                        }
                        else if (string.IsNullOrEmpty(firstName))
                        {
                            this._selenium.VerifyTextPresent("First name is required");
                        }
                        else if (firstName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("First name cannot exceed 50 characters");
                        }
                        else if (string.IsNullOrEmpty(lastName))
                        {
                            this._selenium.VerifyTextPresent("Last name is required");
                        }
                        else if (lastName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Last name cannot exceed 50 characters");
                        }
                        else if (expirationMonth == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration month");
                        }
                        else if (expirationYear == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration year");
                        }
                        else if (
                           (this._selenium.IsTextPresent("Credit card number is required")) ||
                           (this._selenium.IsTextPresent("Street 1 is required")) ||
                           (this._selenium.IsTextPresent("City is required")) ||
                           (this._selenium.IsTextPresent("Postal Code is required")) ||
                           (this._selenium.IsTextPresent("State is required"))
                         )
                        {

                            Assert.Fail("Verification Error");

                        }
                        //else if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                        //    if (string.IsNullOrEmpty(validFromMonth)) {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from month");
                        //    }
                        //    if (string.IsNullOrEmpty(validFromYear)) {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from year");
                        //    }
                        //}


                        // Cancel our of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (string.IsNullOrEmpty(scheduleDate.ToShortDateString()))
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid date");
                    }
                    // Cancel our of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }
                // Cancel out of the wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a one time scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="scheduledDate">The day you wish this payment to be processed.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>       
        public void Giving_ContributorDetails_Schedules_CreditCard_OneTime_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount,
            DateTime scheduleDate, string firstName, string lastName, string creditCardType,
            string creditCardNumber, string expirationMonth, string expirationYear,
            string validFromMonth = null, string validFromYear = null, string securityCode = "",
            string churchId = "15",
            string address1 = "", string address2 = "", string city = "", string stProvince = "", string postalCode = "", string county = "")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for One-Time
                this._driver.FindElementById("frequency_4").Click();

                // Enter contribution date
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var date = scheduleDate.ToShortDateString();
                this._driver.FindElementById("onetime-process-date").SendKeys(date);

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    // Set Credit Card Information
                    this.Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(churchId, firstName, lastName, creditCardType, creditCardNumber,
                                           expirationMonth, expirationYear, validFromMonth, validFromYear, securityCode,
                                           address1, address2, city, stProvince, postalCode, county);

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        //if (this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                        if (this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                        {
                            this._generalMethods.CheckAndThrowErrorMessagesException();
                        }

                        // Verify schedule exists
                        if (scheduleDate == TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).Date)
                        {
                            this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbtnContribution").Click();
                            this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbtnContribution").Click();
                            var rowC = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Contributions, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                            // if (churchId == "258")
                            // {
                            Assert.AreEqual(scheduleDate.ToShortDateString(), this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[1]", rowC)).Text, "Contribution date was incorrect.");
                            // }
                            // else
                            // {

                                // Assert.AreEqual(scheduleDate.ToShortDateString(), this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[1]", rowC)).Text, "Contribution date was incorrect.");  //"M/dd/yyyy"
                            // }
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)).Text, "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " - " + subFund, this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)).Text, "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[5]", rowC)).Text, "Amount was incorrect.");
                        }
                        else
                        {
                            var rowS = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                            Assert.AreEqual("One time", this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", rowS)).Text, "Frequency name was not correct.");
                            Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(scheduleDate), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", rowS)).Text, "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)).Text, "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)).Text, "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", rowS)).Text, "Amount was incorrect.");
                        }
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        Validate_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(creditCardType, creditCardNumber, firstName, lastName,
                                                          expirationMonth, expirationYear, validFromMonth, validFromYear);
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (string.IsNullOrEmpty(scheduleDate.ToShortDateString()))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid date");
                    }

                    // Cancel our of wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
            }
            #endregion Step 1 Validation
        }


        /// <summary>
        /// Creates a one time scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="scheduledDate">The day you wish this payment to be processed.</param>
        /// <param name="phoneNumber">The phone number for the contribution.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_PersonalCheck_OneTime_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_PersonalCheck_OneTime(string individualName, string fundOrPledgeDrive, string subFund, string amount, DateTime scheduleDate, string phoneNumber, string routingNumber, string accountNumber, string churchId)
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for One-Time
                this._selenium.Click("frequency_4");

                // Enter contribution date
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var date = scheduleDate.ToShortDateString();
                this._selenium.Type("onetime-process-date", date);

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for check
                    //this._selenium.Click("contribution_payment_check");
                    this._selenium.Click("payment_method_check");

                    // Enter all personal check information
                    this._selenium.Type("phone", phoneNumber);
                    this._selenium.Type("routing_number", routingNumber);
                    this._selenium.Type("account_number", accountNumber);

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Unless there is validation on step 4, continue to verify schedule exists
                        //if (!this._selenium.IsElementPresent("error_message")) {
                        if (!this._selenium.IsVisible("error_message"))
                        {

                            // Verify schedule exists
                            if (scheduleDate == TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")))
                            {
                                this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lbtnContribution");
                                var rowC = this._generalMethods.GetTableRowNumber(TableIds.Giving_Contributions, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                                Assert.AreEqual(scheduleDate.ToShortDateString(), this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[1]", rowC)), "Contribution date was incorrect.");
                                if (string.IsNullOrEmpty(subFund))
                                {
                                    Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)), "Designation was incorrect.");
                                }
                                else
                                {
                                    Assert.AreEqual(fundOrPledgeDrive + " - " + subFund, this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)), "Designation was incorrect.");
                                }
                                Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[5]", rowC)), "Amount was incorrect.");
                            }
                            else
                            {
                                var rowS = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                                Assert.AreEqual("One time", this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", rowS)), "Frequency name was not correct.");
                                Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(scheduleDate), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", rowS)), "Next occurence was incorrect.");
                                if (string.IsNullOrEmpty(subFund))
                                {
                                    Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)), "Designation was incorrect.");
                                }
                                else
                                {
                                    Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)), "Designation was incorrect.");
                                }
                                Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", rowS)), "Amount was incorrect.");
                            }

                        }
                        // Validation on step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            // Cancel out of the wizard
                            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(phoneNumber))
                        {
                            this._selenium.VerifyTextPresent("Phone number is required");
                        }
                        else if (phoneNumber.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Phone number cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(accountNumber))
                        {
                            this._selenium.VerifyTextPresent("Account number is required");
                        }
                        else if (accountNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Account number cannot exceed 30 characters");
                        }
                        if (string.IsNullOrEmpty(routingNumber))
                        {
                            this._selenium.VerifyTextPresent("Bank routing number is required");
                        }
                        else if (routingNumber.Length > 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }
                        else if (routingNumber.Length < 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }
                        // Cancel out of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (string.IsNullOrEmpty(scheduleDate.ToShortDateString()))
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid date");
                    }
                    // Cancel our of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }
                // Cancel out of the wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a one time scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="scheduledDate">The day you wish this payment to be processed.</param>
        /// <param name="phoneNumber">The phone number for the contribution.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_PersonalCheck_OneTime_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount, DateTime scheduleDate, string phoneNumber, string routingNumber, string accountNumber, string churchId = "15")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();


            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for One-Time
                this._driver.FindElementById("frequency_4").Click();

                // Enter contribution date
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var date = scheduleDate.ToShortDateString();
                this._driver.FindElementById("onetime-process-date").SendKeys(date);

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    //Enter Personal Check Information and continue
                    Set_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, routingNumber, accountNumber);


                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        // Unless there is validation on step 4, continue to verify schedule exists
                        //style="display: none"
                        //if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))\
                        if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                        {

                            // Verify schedule exists
                            // Mady modified the if condition to make it workable
                            // if (scheduleDate == TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).Date)
                            if (scheduleDate.Date == TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).Date)
                            {
                                this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbtnContribution").Click();
                                var rowC = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Contributions, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                                Assert.AreEqual(scheduleDate.ToShortDateString(), this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[1]", rowC)).Text, "Contribution date was incorrect.");  //"M/dd/yyyy"
                                if (string.IsNullOrEmpty(subFund))
                                {
                                    Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)).Text, "Designation was incorrect.");
                                }
                                else
                                {
                                    Assert.AreEqual(fundOrPledgeDrive + " - " + subFund, this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[4]", rowC)).Text, "Designation was incorrect.");
                                }
                                Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@id='repTable']/tbody/tr[{0}]/td[5]", rowC)).Text, "Amount was incorrect.");
                            }
                            else
                            {
                                var rowS = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                                Assert.AreEqual("One time", this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", rowS)).Text, "Frequency name was not correct.");
                                Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(scheduleDate), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", rowS)).Text, "Next occurence was incorrect.");
                                if (string.IsNullOrEmpty(subFund))
                                {
                                    Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)).Text, "Designation was incorrect.");
                                }
                                else
                                {
                                    Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", rowS)).Text, "Designation was incorrect.");
                                }
                                Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", rowS)).Text, "Amount was incorrect.");
                            }

                        }
                        // Validation on step 4 occurred
                        #region Step 4 Validation
                        // this else condition needs to be revisited since this condition is not executing when we don't get error message for velocity validation exception scenario.
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            // Cancel out of the wizard
                            this._driver.FindElementByLinkText("Cancel").Click();
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        //Validate Personal Check Information
                        Validate_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, accountNumber, routingNumber);

                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (string.IsNullOrEmpty(scheduleDate.ToShortDateString()))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid date");
                    }
                    // Cancel our of wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);

            }
            #endregion Step 1 Validation
        }


        #endregion One Time

        #region Monthly
        /// <summary>
        /// Creates a monthly scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name. </param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Giving_ContributorDetails_Schedules_CreditCard_Monthly_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_CreditCard_Monthly(string individualName, string fundOrPledgeDrive, string subFund, string amount, string startDay, string startMonth, string startYear, string endMonth, string endYear, string firstName, string lastName, string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth, string validFromYear, string securityCode, string churchId)
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Monthly
                this._selenium.Click("frequency_3");

                // Enter contribution date
                this._selenium.Select("start_monthly_day", startDay);
                this._selenium.Select("start_monthly_month", startMonth);
                this._selenium.Select("start_monthly_year", startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._selenium.Click("once_monthly_end");
                    this._selenium.Select("end_monthly_month", endMonth);
                    this._selenium.Select("end_monthly_year", endYear);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for credit card
                    if (churchId.ToString() == "15")
                    {
                        //this._selenium.Click("contribution_payment_cc");
                        //this._selenium.Click("contribution_payment_cc");
                        this._selenium.Click("payment_method_cc");
                    }

                    // Enter all credit card information
                    this._selenium.Type("FirstName", firstName);
                    this._selenium.Type("LastName", lastName);
                    this._selenium.Select("payment_type_id", creditCardType);
                    this._selenium.Type("account_number", creditCardNumber);
                    this._selenium.Select("expiration_month", expirationMonth);
                    this._selenium.Select("expiration_year", expirationYear);
                    this._selenium.Type("CVC", securityCode);

                    //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                    //    this._selenium.Select("valid_from", validFromMonth);
                    //    this._selenium.Select("valid_from_year", validFromYear);
                    //}

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));
                        if (string.IsNullOrEmpty(endMonth))
                        {
                            Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, endMonth, endYear));
                            Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)) + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(formattedDate), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (creditCardType == "--")
                        {
                            this._selenium.VerifyTextPresent("Credit card type is required");
                        }
                        if (string.IsNullOrEmpty(creditCardNumber))
                        {
                            this._selenium.VerifyTextPresent("Credit card number is required");
                        }
                        else if (creditCardNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Credit card cannot exceed 30 characters");
                        }
                        if (string.IsNullOrEmpty(firstName))
                        {
                            this._selenium.VerifyTextPresent("First name is required");
                        }
                        else if (firstName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("First name cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(lastName))
                        {
                            this._selenium.VerifyTextPresent("Last name is required");
                        }
                        else if (lastName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Last name cannot exceed 50 characters");
                        }
                        if (expirationMonth == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration month");
                        }
                        if (expirationYear == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration year");
                        }
                        //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                        //    if (string.IsNullOrEmpty(validFromMonth)) {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from month");
                        //    }
                        //    if (string.IsNullOrEmpty(validFromYear)) {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from year");
                        //    }
                        //}
                        // Cancel our of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay == "-day-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Day");
                    }
                    if (startMonth == "-month-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Month");
                    }
                    if (startYear == "-year-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Year");
                    }
                    // Cancel out of the wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }
                // Cancel out of the wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a monthly scheduled giving using a credit card. This is for Online Giving 2.0.
        /// It is created by Jim
        /// </summary>
        /// <param name="individualName">The individual's first and last name. </param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_CreditCard_Monthly_WebDriver_Plus(string individualName, string fundOrPledgeDrive, string subFund, string amount,
            string startDay, string startMonth, string startYear, string endMonth, string endYear,
            string firstName, string lastName,
            string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth = null, string validFromYear = null, string securityCode = "",
            string churchId = "15")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Monthly
                this._driver.FindElementById("frequency_3").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementById("start_monthly_day")).SelectByText(startDay);
                new SelectElement(this._driver.FindElementById("start_monthly_month")).SelectByText(startMonth);
                new SelectElement(this._driver.FindElementById("start_monthly_year")).SelectByText(startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._driver.FindElementById("once_monthly_end").Click();
                    new SelectElement(this._driver.FindElementById("end_monthly_month")).SelectByText(endMonth);
                    new SelectElement(this._driver.FindElementById("end_monthly_year")).SelectByText(endYear);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    // Set Credit Card Information
                    this.Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(churchId, firstName, lastName, creditCardType, creditCardNumber, expirationMonth, expirationYear, validFromMonth, validFromYear, securityCode);

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {
                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        Validate_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(creditCardType, creditCardNumber, firstName, lastName,
                                                          expirationMonth, expirationYear, validFromMonth, validFromYear);
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    Validate_Giving_ContributorDetails_Schedules_CreditCard_StartDayMonthYear_WebDriver(startDay, startMonth, startYear);
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a monthly scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name. </param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_CreditCard_Monthly_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount,
            string startDay, string startMonth, string startYear, string endMonth, string endYear,
            string firstName, string lastName,
            string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth = null, string validFromYear = null, string securityCode = "",
            string churchId = "15")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Monthly
                this._driver.FindElementById("frequency_3").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementById("start_monthly_day")).SelectByText(startDay);
                new SelectElement(this._driver.FindElementById("start_monthly_month")).SelectByText(startMonth);
                new SelectElement(this._driver.FindElementById("start_monthly_year")).SelectByText(startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._driver.FindElementById("once_monthly_end").Click();
                    new SelectElement(this._driver.FindElementById("end_monthly_month")).SelectByText(endMonth);
                    new SelectElement(this._driver.FindElementById("end_monthly_year")).SelectByText(endYear);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    // Set Credit Card Information
                    //this.Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(churchId, firstName, lastName, creditCardType, creditCardNumber,
                                                                                     //expirationMonth, expirationYear, validFromMonth, validFromYear, securityCode, "6363 N State Hwy 161 Suite 200", "", "Irving", "Texas", "75038");
                    this.Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(churchId, firstName, lastName, creditCardType, creditCardNumber, expirationMonth, expirationYear, validFromMonth, validFromYear, securityCode);

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        TestLog.WriteLine(string.Format("VERIFY SCHED DATE: {0} {1} {2}", startDay, startMonth, startYear));

                        var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));

                        if (string.IsNullOrEmpty(endMonth))
                        {
                            Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, endMonth, endYear));
                            Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)) + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }

                        Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(formattedDate), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text, "Next occurence was incorrect.");
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {

                        Validate_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(creditCardType, creditCardNumber, firstName, lastName,
                                                          expirationMonth, expirationYear, validFromMonth, validFromYear);

                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    Validate_Giving_ContributorDetails_Schedules_CreditCard_StartDayMonthYear_WebDriver(startDay, startMonth, startYear);
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a monthly scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_PersonalCheck_Monthly_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_PersonalCheck_Monthly(string individualName, string fundOrPledgeDrive, string subFund, string amount, string startDay, string startMonth, string startYear, string endMonth, string endYear, string phoneNumber, string routingNumber, string accountNumber, string churchId)
        {
            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Monthly
                this._selenium.Click("frequency_3");

                // Enter contribution date
                this._selenium.Select("start_monthly_day", startDay);
                this._selenium.Select("start_monthly_month", startMonth);
                this._selenium.Select("start_monthly_year", startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._selenium.Click("once_monthly_end");
                    this._selenium.Select("end_monthly_month", endMonth);
                    this._selenium.Select("end_monthly_year", endYear);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for check
                    //this._selenium.Click("contribution_payment_check");
                    this._selenium.Click("payment_method_check");

                    // Enter all personal check information
                    this._selenium.Type("phone", phoneNumber);
                    this._selenium.Type("routing_number", routingNumber);
                    this._selenium.Type("account_number", accountNumber);

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Unless there is validation on step 4, continue to verify schedule exists
                        if (!this._selenium.IsElementPresent("error_message"))
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format("{0}:C", amount), "Amount") + 1;
                            var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));
                            if (string.IsNullOrEmpty(endMonth))
                            {
                                Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, endMonth, endYear));
                                Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)) + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(formattedDate), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("{0}:C", amount), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                        }
                        // Validation on Step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            // Cancel out of the wizard
                            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(phoneNumber))
                        {
                            this._selenium.VerifyTextPresent("Phone number is required");
                        }
                        else if (phoneNumber.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Phone number cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(accountNumber))
                        {
                            this._selenium.VerifyTextPresent("Account number is required");
                        }
                        else if (accountNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Account number cannot exceed 30 characters");
                        }
                        if (string.IsNullOrEmpty(routingNumber))
                        {
                            this._selenium.VerifyTextPresent("Bank routing number is required");
                        }
                        else if (routingNumber.Length > 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }
                        else if (routingNumber.Length < 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }
                        // Cancel out of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay == "-day-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Day");
                    }
                    if (startMonth == "-month-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Month");
                    }
                    if (startYear == "-year-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Year");
                    }
                    // Cancel out of the wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }
                // Cancel out of the wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a monthly scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_PersonalCheck_Monthly_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount, string startDay, string startMonth, string startYear, string endMonth, string endYear, string phoneNumber, string routingNumber, string accountNumber, string churchId)
        {
            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Monthly
                this._driver.FindElementById("frequency_3").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementById("start_monthly_day")).SelectByText(startDay);
                new SelectElement(this._driver.FindElementById("start_monthly_month")).SelectByText(startMonth);
                new SelectElement(this._driver.FindElementById("start_monthly_year")).SelectByText(startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._driver.FindElementById("once_monthly_end").Click();
                    new SelectElement(this._driver.FindElementById("end_monthly_month")).SelectByText(endMonth);
                    new SelectElement(this._driver.FindElementById("end_monthly_year")).SelectByText(endYear);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    //Enter Personal Check Information and continue
                    Set_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, routingNumber, accountNumber);

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        // Unless there is validation on step 4, continue to verify schedule exists
                        //if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                        if (!this._driver.FindElementById("error_message").Displayed)
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format("{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                            var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));
                            if (string.IsNullOrEmpty(endMonth))
                            {
                                Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, endMonth, endYear));
                                Assert.AreEqual(string.Format("{0}{1} every month", formattedDate.Day.ToString("d"), this._generalMethods.GetSuffexForDay(formattedDate)) + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            Assert.AreEqual(this._generalMethods.ConvertDateToNeutralFormat(formattedDate), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text, "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                        }
                        // Validation on Step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            this._generalMethods.CheckAndThrowErrorMessagesException();

                            // Cancel out of the wizard
                            this._driver.FindElementByLinkText("Cancel").Click();
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        //Validate Personal Check Information
                        Validate_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, accountNumber, routingNumber);

                        this._generalMethods.CheckAndThrowErrorMessagesException();
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay == "-day-")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please select a valid Start Day");
                    }
                    if (startMonth == "-month-")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please select a valid Start Month");
                    }
                    if (startYear == "-year-")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please select a valid Start Year");
                    }

                    this._generalMethods.CheckAndThrowErrorMessagesException();

                    // Cancel out of the wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();

                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
            }
            #endregion Step 1 Validation
        }

        #endregion Monthly

        #region Twice Monthly
        /// <summary>
        /// Creates a twice monthly scheduled giving using a credit card. This is for Onlie Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endDay">The day the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_CreditCard_TwiceMonthly_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_CreditCard_TwiceMonthly(string individualName, string fundOrPledgeDrive, string subFund, string amount, string startDay, string startMonth, string startYear, string endDay, string endMonth, string endYear, string firstName, string lastName, string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth, string validFromYear, string securityCode, string churchId)
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Twice Monthly
                this._selenium.Click("frequency_2");

                // Enter contribution date
                this._selenium.Select("begin_twice_monthly_day", startDay);
                this._selenium.Select("recurrence_monthly_weekday", startMonth);
                this._selenium.Select("begin_twice_monthly_year", startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._selenium.Click("end_twice_monthly");
                    this._selenium.Select("end_twice_monthly_day", endDay);
                    this._selenium.Select("end_twice_monthly_weekday", endMonth);
                    this._selenium.Select("end_twice_monthly_year", endYear);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for credit card
                    if (churchId.ToString() == "15")
                    {
                        //this._selenium.Click("contribution_payment_cc");
                        //this._selenium.Click("contribution_payment_cc");
                        this._selenium.Click("payment_method_cc");
                    }

                    // Enter all credit card information
                    this._selenium.Type("FirstName", firstName);
                    this._selenium.Type("LastName", lastName);
                    this._selenium.Select("payment_type_id", creditCardType);
                    this._selenium.Type("account_number", creditCardNumber);
                    this._selenium.Select("expiration_month", expirationMonth);
                    this._selenium.Select("expiration_year", expirationYear);
                    this._selenium.Type("CVC", securityCode);

                    //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                    //    this._selenium.Select("valid_from", validFromMonth);
                    //    this._selenium.Select("valid_from_year", validFromYear);
                    //}

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));
                        if (string.IsNullOrEmpty(endDay))
                        {
                            Assert.AreEqual("1st and 16th every month", this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", endDay, endMonth, endYear));
                            Assert.AreEqual("1st and 16th every month" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        Assert.AreEqual(formattedDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(firstName))
                        {
                            this._selenium.VerifyTextPresent("First name is required");
                        }
                        else if (firstName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("First name cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(lastName))
                        {
                            this._selenium.VerifyTextPresent("Last name is required");
                        }
                        else if (lastName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Last name cannot exceed 50 characters");
                        }
                        if (creditCardType == "--")
                        {
                            this._selenium.VerifyTextPresent("Credit card type is required");
                        }
                        if (string.IsNullOrEmpty(creditCardNumber))
                        {
                            this._selenium.VerifyTextPresent("Credit card number is required");
                        }
                        else if (creditCardNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Credit card number cannot exceed 30 characters");
                        }
                        if (expirationMonth == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration month");
                        }
                        if (expirationYear == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration year");
                        }
                        //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                        //    if (validFromMonth == "--") {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from month");
                        //    }
                        //    if (validFromYear == "--") {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from year");
                        //    }
                        //}

                        this._generalMethods.CheckAndThrowErrorMessagesException();

                        // Cancel out of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay == "-day-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Day");
                    }
                    if (startMonth == "-month-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Month");
                    }
                    if (startYear == "-year-")
                    {
                        this._selenium.VerifyTextPresent("Please select a valid Start Year");
                    }

                    this._generalMethods.CheckAndThrowErrorMessagesException();

                    // Cancel out of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }

                this._generalMethods.CheckAndThrowErrorMessagesException();

                // Cancel out of wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a twice monthly scheduled giving using a credit card. This is for Onlie Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endDay">The day the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_CreditCard_TwiceMonthly_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount,
            string startDay, string startMonth, string startYear, string endDay, string endMonth, string endYear,
            string firstName, string lastName, string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth = null, string validFromYear = null, string securityCode = "", string churchId = "15")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Twice Monthly
                this._driver.FindElementById("frequency_2").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementById("begin_twice_monthly_day")).SelectByText(startDay);
                new SelectElement(this._driver.FindElementById("recurrence_monthly_weekday")).SelectByText(startMonth);
                new SelectElement(this._driver.FindElementById("begin_twice_monthly_year")).SelectByText(startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._driver.FindElementById("end_twice_monthly").Click();
                    new SelectElement(this._driver.FindElementById("end_twice_monthly_day")).SelectByText(endDay);
                    new SelectElement(this._driver.FindElementById("end_twice_monthly_weekday")).SelectByText(endMonth);
                    new SelectElement(this._driver.FindElementById("end_twice_monthly_year")).SelectByText(endYear);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    // Set Credit Card Information
                    this.Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(churchId, firstName, lastName, creditCardType, creditCardNumber,
                                                                                     expirationMonth, expirationYear, validFromMonth, validFromYear, securityCode);


                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        if (this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                        //if (this._driver.FindElementById("error_message").Displayed)
                        {
                            this._generalMethods.CheckAndThrowErrorMessagesException();
                        }

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));
                        if (string.IsNullOrEmpty(endDay))
                        {
                            Assert.AreEqual("1st and 16th every month", this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", endDay, endMonth, endYear));
                            Assert.AreEqual("1st and 16th every month" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }
                        Assert.AreEqual(formattedDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text, "Next occurence was incorrect.");
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        Validate_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(creditCardType, creditCardNumber, firstName, lastName,
                                                          expirationMonth, expirationYear, validFromMonth, validFromYear);

                        this._generalMethods.CheckAndThrowErrorMessagesException();
                    }

                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    Validate_Giving_ContributorDetails_Schedules_CreditCard_StartDayMonthYear_WebDriver(startDay, startMonth, startYear);
                    this._generalMethods.CheckAndThrowErrorMessagesException();
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
                this._generalMethods.CheckAndThrowErrorMessagesException();

            }
            #endregion Step 1 Validation
        }


        /// <summary>
        /// Creates a twice monthly scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startMonth">The month the contribution starts.</param>
        /// <param name="startYear">The year the contribution starts.</param>
        /// <param name="endDay">The day the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endMonth">The month the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="endYear">The year the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_PersonalCheck_TwiceMonthly_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_PersonalCheck_TwiceMonthly(string individualName, string fundOrPledgeDrive, string subFund, string amount, string startDay, string startMonth, string startYear, string endDay, string endMonth, string endYear, string phoneNumber, string routingNumber, string accountNumber, string churchId)
        {
            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Twice Monthly
                this._selenium.Click("frequency_2");

                // Enter contribution date
                this._selenium.Select("begin_twice_monthly_day", startDay);
                this._selenium.Select("recurrence_monthly_weekday", startMonth);
                this._selenium.Select("begin_twice_monthly_year", startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._selenium.Click("end_twice_monthly");
                    this._selenium.Select("end_twice_monthly_day", endDay);
                    this._selenium.Select("end_twice_monthly_weekday", endMonth);
                    this._selenium.Select("end_twice_monthly_year", endYear);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for check
                    //this._selenium.Click("contribution_payment_check");
                    this._selenium.Click("payment_method_check");

                    // Enter all personal check information
                    this._selenium.Type("phone", phoneNumber);
                    this._selenium.Type("routing_number", routingNumber);
                    this._selenium.Type("account_number", accountNumber);

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validaiton on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Unless there is validation on step 4, continue to verify schedule exists
                        if (!this._selenium.IsElementPresent("error_message"))
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format("${0}", amount), "Amount") + 1;
                            var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));
                            if (string.IsNullOrEmpty(endDay))
                            {
                                Assert.AreEqual("1st and 16th every month", this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", endDay, endMonth, endYear));
                                Assert.AreEqual("1st and 16th every month" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            Assert.AreEqual(formattedDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("${0}", amount), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                        }
                        // Validation on step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            // Cancel out of the wizard
                            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(phoneNumber))
                        {
                            this._selenium.VerifyTextPresent("Phone number is required");
                        }
                        else if (phoneNumber.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Phone number cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(accountNumber))
                        {
                            this._selenium.VerifyTextPresent("Account number is required");
                        }
                        else if (accountNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Account number cannot exceed 30 characters");
                        }
                        if (string.IsNullOrEmpty(routingNumber))
                        {
                            this._selenium.VerifyTextPresent("Bank routing number is required");
                        }
                        else if (routingNumber.Length > 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }
                        else if (routingNumber.Length < 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }

                        // Cancel out of the wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay == "-day-")
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid Start Day");
                    }
                    if (startMonth == "-month-")
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid Start Month");
                    }
                    if (startYear == "-year-")
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid Start Year");
                    }

                    // Cancel out of the wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.IsElementPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.IsElementPresent("Please enter a valid amount");
                }

                // Cancel out of wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        public void Giving_ContributorDetails_Schedules_PersonalCheck_TwiceMonthly_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount, string startDay, string startMonth, string startYear, string endDay, string endMonth, string endYear, string phoneNumber, string routingNumber, string accountNumber, string churchId = "15")
        {
            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Twice Monthly
                this._driver.FindElementById("frequency_2").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementById("begin_twice_monthly_day")).SelectByText(startDay);
                new SelectElement(this._driver.FindElementById("recurrence_monthly_weekday")).SelectByText(startMonth);
                new SelectElement(this._driver.FindElementById("begin_twice_monthly_year")).SelectByText(startYear);

                // If End Date is used, check box for End Date and enter End Month and Year
                if (!string.IsNullOrEmpty(endMonth))
                {
                    this._driver.FindElementById("end_twice_monthly").Click();
                    new SelectElement(this._driver.FindElementById("end_twice_monthly_day")).SelectByText(endDay);
                    new SelectElement(this._driver.FindElementById("end_twice_monthly_weekday")).SelectByText(endMonth);
                    new SelectElement(this._driver.FindElementById("end_twice_monthly_year")).SelectByText(endYear);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    //Enter Personal Check Information and continue
                    Set_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, routingNumber, accountNumber);

                    // Unless there is validaiton on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        // Unless there is validation on step 4, continue to verify schedule exists
                        //if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                        if (!this._driver.FindElementById("error_message").Displayed)
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format("${0}", amount), "Amount") + 1;
                            var formattedDate = Convert.ToDateTime(string.Format("{0} {1} {2}", startDay, startMonth, startYear));
                            if (string.IsNullOrEmpty(endDay))
                            {
                                Assert.AreEqual("1st and 16th every month", this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = Convert.ToDateTime(string.Format("{0} {1} {2}", endDay, endMonth, endYear));
                                Assert.AreEqual("1st and 16th every month" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            Assert.AreEqual(formattedDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text, "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("${0}", amount), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                        }
                        // Validation on step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            this._generalMethods.CheckAndThrowErrorMessagesException();

                            // Cancel out of the wizard
                            this._driver.FindElementByLinkText("Cancel").Click();

                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        //Validate Personal Check Information
                        Validate_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, accountNumber, routingNumber);
                        this._generalMethods.CheckAndThrowErrorMessagesException();

                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay == "-day-")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid Start Day");
                    }
                    if (startMonth == "-month-")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid Start Month");
                    }
                    if (startYear == "-year-")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid Start Year");
                    }

                    this._generalMethods.CheckAndThrowErrorMessagesException();

                    // Cancel out of the wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();

                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
                this._generalMethods.CheckAndThrowErrorMessagesException();
            }
            #endregion Step 1 Validation
        }

        #endregion Twice Monthly

        #region Weekly

        /// <summary>
        /// Creates a weekly scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_CreditCard_Weekly_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_CreditCard_Weekly(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate, string firstName, string lastName, string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth, string validFromYear, string securityCode, string churchId)
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Weekly
                this._selenium.Click("frequency_0");

                // Enter contribution date
                this._selenium.Select("weekly_start_day", startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._selenium.Type("weekly-start-date", dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = (endDate.Value.ToShortDateString());
                    this._selenium.Type("weekly-end-date", dateEnd);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for credit card
                    if (churchId.ToString() == "15")
                    {
                        //this._selenium.Click("contribution_payment_cc");
                        //this._selenium.Click("contribution_payment_cc");
                        this._selenium.Click("payment_method_cc");
                    }

                    // Enter all credit card information
                    this._selenium.Type("FirstName", firstName);
                    this._selenium.Type("LastName", lastName);
                    this._selenium.Select("payment_type_id", creditCardType);
                    this._selenium.Type("account_number", creditCardNumber);
                    this._selenium.Select("expiration_month", expirationMonth);
                    this._selenium.Select("expiration_year", expirationYear);
                    this._selenium.Type("CVC", securityCode);

                    //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                    //    this._selenium.Select("valid_from", validFromMonth);
                    //    this._selenium.Select("valid_from_year", validFromYear);
                    //}

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        if (!endDate.HasValue)
                        {
                            Assert.AreEqual("Weekly every " + startDay, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = endDate.Value;
                            Assert.AreEqual("Weekly every " + startDay + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        var formattedStartDate = Convert.ToDateTime(startDate);
                        Assert.AreEqual(formattedStartDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(firstName))
                        {
                            this._selenium.VerifyTextPresent("First name is required");
                        }
                        else if (firstName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("First name cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(lastName))
                        {
                            this._selenium.VerifyTextPresent("Last name is required");
                        }
                        else if (lastName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Last name cannot exceed 50 characters");
                        }
                        if (creditCardType == "--")
                        {
                            this._selenium.VerifyTextPresent("Credit card type is required");
                        }
                        if (string.IsNullOrEmpty(creditCardNumber))
                        {
                            this._selenium.VerifyTextPresent("Credit card number is required");
                        }
                        else if (creditCardNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Credit card number cannot exceed 30 characters");
                        }
                        if (expirationMonth == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration month");
                        }
                        if (expirationYear == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration year");
                        }
                        //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                        //    if (validFromMonth == "--") {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from month");
                        //    }
                        //    if (validFromYear == "--") {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from year");
                        //    }
                        //}
                        // Cancel out of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._selenium.VerifyTextPresent("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToShortDateString()))
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid date for Start");
                    }

                    // Cancel out of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }

                // Cancel out of wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates a weekly scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_CreditCard_Weekly_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate,
            string firstName, string lastName, string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth = null, string validFromYear = null, string securityCode = "", string churchId = "15")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            this.Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Weekly
                this._driver.FindElementById("frequency_0").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementById("weekly_start_day")).SelectByText(startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._driver.FindElementById("weekly-start-date").SendKeys(dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = (endDate.Value.ToShortDateString());
                    this._driver.FindElementById("weekly_ends").Click();
                    this._driver.FindElementById("weekly-end-date").SendKeys(dateEnd);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 1, continue to step 2
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    // Set Credit Card Information
                    this.Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(churchId, firstName, lastName, creditCardType, creditCardNumber,
                                                                                     expirationMonth, expirationYear, validFromMonth, validFromYear, securityCode);

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        if (this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                        //if (this._driver.FindElementById("error_message").Displayed)
                        {
                            this._generalMethods.CheckAndThrowErrorMessagesException();
                        }

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        if (!endDate.HasValue)
                        {
                            Assert.AreEqual("Weekly every " + startDay, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = endDate.Value;
                            Assert.AreEqual("Weekly every " + startDay + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }

                        var formattedStartDate = Convert.ToDateTime(startDate);
                        string nextOccurDate = this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text;
                        Assert.IsTrue(formattedStartDate.ToString("dd MMM yyyy").Equals(nextOccurDate) || formattedStartDate.AddDays(7).ToString("dd MMM yyyy").Equals(nextOccurDate), "Next occurence was incorrect.");
                        
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        Validate_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(creditCardType, creditCardNumber, firstName, lastName,
                                                          expirationMonth, expirationYear, validFromMonth, validFromYear);
                        this._generalMethods.CheckAndThrowErrorMessagesException();
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToShortDateString()))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid date for Start");
                    }

                    this._generalMethods.CheckAndThrowErrorMessagesException();

                    // Cancel out of wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
                this._generalMethods.CheckAndThrowErrorMessagesException();

            }
            #endregion Step 1 Validation
        }


        /// <summary>
        /// Create a weekly scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_PersonalCheck_Weekly_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_PersonalCheck_Weekly(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate, string phoneNumber, string routingNumber, string accountNumber, string churchId)
        {
            // Store culture for currency/date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Weekly
                this._selenium.Click("frequency_0");

                // Enter contribution date
                this._selenium.Select("weekly_start_day", startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._selenium.Type("weekly-start-date", dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = (endDate.Value.ToShortDateString());
                    this._selenium.Type("weekly-end-date", dateEnd);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for check
                    //this._selenium.Click("contribution_payment_check");
                    this._selenium.Click("payment_method_check");

                    // Enter all personal check information
                    this._selenium.Type("phone", phoneNumber);
                    this._selenium.Type("routing_number", routingNumber);
                    this._selenium.Type("account_number", accountNumber);

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // If there is no validation on step 4, continue to verify schedule exists
                        if (!this._selenium.IsElementPresent("error_message"))
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format("${0}", amount), "Amount") + 1;
                            if (!endDate.HasValue)
                            {
                                Assert.AreEqual("Weekly every " + startDay, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = endDate.Value;
                                Assert.AreEqual("Weekly every " + startDay + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            Assert.AreEqual(startDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("${0}", amount), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                        }
                        // Validation on step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            // Cancel out of the wizard
                            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(phoneNumber))
                        {
                            this._selenium.VerifyTextPresent("Phone number is required");
                        }
                        else if (phoneNumber.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Phone number cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(accountNumber))
                        {
                            this._selenium.VerifyTextPresent("Account number is required");
                        }
                        else if (accountNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Account number cannot exceed 30 characters");
                        }
                        if (string.IsNullOrEmpty(routingNumber))
                        {
                            this._selenium.VerifyTextPresent("Bank routing number is required");
                        }
                        else if (routingNumber.Length > 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }
                        else if (routingNumber.Length < 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }

                        // Cancel out of the wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._selenium.VerifyTextPresent("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToShortDateString()))
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid date for Start");
                    }

                    // Cancel out of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }

                // Cancel out of wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Create a weekly scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_PersonalCheck_Weekly_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate,
            string phoneNumber, string routingNumber, string accountNumber, string churchId = "15")
        {
            // Store culture for currency/date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Weekly
                this._driver.FindElementById("frequency_0").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementById("weekly_start_day")).SelectByText(startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._driver.FindElementById("weekly-start-date").SendKeys(dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = (endDate.Value.ToShortDateString());
                    this._driver.FindElementById("weekly_ends").Click();
                    this._driver.FindElementById("weekly-end-date").SendKeys(dateEnd);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    //Enter Personal Check Information and continue
                    Set_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, routingNumber, accountNumber);

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        // If there is no validation on step 4, continue to verify schedule exists
                        //if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                        if (!this._driver.FindElementById("error_message").Displayed)
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format("${0}", amount), "Amount") + 1;
                            if (!endDate.HasValue)
                            {
                                Assert.AreEqual("Weekly every " + startDay, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = endDate.Value;
                                Assert.AreEqual("Weekly every " + startDay + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            Assert.AreEqual(startDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text, "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("${0}", amount), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                        }
                        // Validation on step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else
                            {

                                this._generalMethods.CheckAndThrowErrorMessagesException();
                            }

                            // Cancel out of the wizard
                            this._driver.FindElementByLinkText("Cancel").Click();

                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on step 3 occurred
                    #region Step 3 Validation
                    else
                    {

                        //Validate Personal Check Information
                        Validate_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, accountNumber, routingNumber);
                        this._generalMethods.CheckAndThrowErrorMessagesException();
                    }
                    #endregion Step 3 Validation
                }
                // Validation on step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToShortDateString()))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid date for Start");
                    }

                    this._generalMethods.CheckAndThrowErrorMessagesException();


                    // Cancel out of wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();
                }
                #endregion Step 2 Validation
            }
            // Validation on step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
                this._generalMethods.CheckAndThrowErrorMessagesException();
            }
            #endregion Step 1 Validation
        }

        #endregion Weekly

        #region Every Two Weeks

        /// <summary>
        /// Creates an every two weeks scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Giving_ContributorDetails_Schedules_CreditCard_EveryTwoWeeks_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_CreditCard_EveryTwoWeeks(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate, string firstName, string lastName, string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth, string validFromYear, string securityCode, string churchId)
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Every two weeks
                this._selenium.Click("frequency_1");

                // Enter contribution date
                this._selenium.Select("//div[@id='frequency_1_wrapper']/div/table/tbody/tr/td/select", startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._selenium.Type("bi-weekly-start-date", dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = endDate.Value.ToShortDateString();
                    this._selenium.Type("bi-weekly-ends-date", dateEnd);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for credit card
                    if (churchId.ToString() == "15")
                    {
                        //this._selenium.Click("contribution_payment_cc");
                        //this._selenium.Click("contribution_payment_cc");
                        this._selenium.Click("payment_method_cc");
                    }

                    // Enter all credit card information
                    this._selenium.Type("FirstName", firstName);
                    this._selenium.Type("LastName", lastName);
                    this._selenium.Select("payment_type_id", creditCardType);
                    this._selenium.Type("account_number", creditCardNumber);
                    this._selenium.Select("expiration_month", expirationMonth);
                    this._selenium.Select("expiration_year", expirationYear);
                    this._selenium.Type("CVC", securityCode);

                    //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                    //    this._selenium.Select("valid_from", validFromMonth);
                    //    this._selenium.Select("valid_from_year", validFromYear);
                    //}

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validaiton on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        if (!endDate.HasValue)
                        {
                            Assert.AreEqual(startDay + " every two weeks", this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = endDate.Value;
                            Assert.AreEqual(startDay + " every two weeks" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                        }
                        Assert.AreEqual(startDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(firstName))
                        {
                            this._selenium.VerifyTextPresent("First name is required");
                        }
                        else if (firstName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("First name cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(lastName))
                        {
                            this._selenium.VerifyTextPresent("Last name is required");
                        }
                        else if (lastName.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Last name cannot exceed 50 characters");
                        }
                        if (creditCardType == "--")
                        {
                            this._selenium.VerifyTextPresent("Credit card type is required");
                        }
                        if (string.IsNullOrEmpty(creditCardNumber))
                        {
                            this._selenium.VerifyTextPresent("Credit card number is required");
                        }
                        else if (creditCardNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Credit card number cannot exceed 30 characters");
                        }
                        if (expirationMonth == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration month");
                        }
                        if (expirationYear == "--")
                        {
                            this._selenium.VerifyTextPresent("Please select a valid expiration year");
                        }
                        //if ((creditCardType == "Switch") || (creditCardType == "Solo")) {
                        //    if (validFromMonth == "--") {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from month");
                        //    }
                        //    if (validFromYear == "--") {
                        //        this._selenium.VerifyTextPresent("Please select a correct valid from year");
                        //    }
                        //}
                        // Cancel out of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._selenium.VerifyTextPresent("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToString()))
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid date for Start");
                    }

                    // Cancel out of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }

                // Cancel out of wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates an every two weeks scheduled giving using a credit card. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="firstName">The first name on the credit card.</param>
        /// <param name="lastName">The last name on the credit card.</param>
        /// <param name="creditCardType">The credit card type.</param>
        /// <param name="creditCardNumber">The credit card number.</param>
        /// <param name="expirationMonth">The expiration month.</param>
        /// <param name="expirationYear">The expiration year.</param>
        /// <param name="validFromMonth">The valid from month.</param>
        /// <param name="validFromYear">The valid from year.</param>
        /// <param name="securityCode">The security code on the credit card.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_CreditCard_EveryTwoWeeks_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate,
            string firstName, string lastName, string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth = null, string validFromYear = null, string securityCode = "", string churchId = "15")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Every two weeks
                this._driver.FindElementById("frequency_1").Click();

                // Enter contribution date
                new SelectElement(this._driver.FindElementByXPath("//div[@id='frequency_1_wrapper']/div/table/tbody/tr/td/select")).SelectByText(startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._driver.FindElementById("bi-weekly-start-date").SendKeys(dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = endDate.Value.ToShortDateString();
                    this._driver.FindElementById("bi-weekly-ends-date").SendKeys(dateEnd);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    // Set Credit Card Information
                    this.Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(churchId, firstName, lastName, creditCardType, creditCardNumber,
                                                                                     expirationMonth, expirationYear, validFromMonth, validFromYear, securityCode);

                    // Unless there is validaiton on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();


                        if (this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                        //if (this._driver.FindElementById("error_message").Displayed)
                        {
                            this._generalMethods.CheckAndThrowErrorMessagesException();
                        }

                        // Verify schedule exists
                        var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), "Amount") + 1;
                        if (!endDate.HasValue)
                        {
                            Assert.AreEqual(startDay + " every two weeks", this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }
                        else
                        {
                            var formattedEndDate = endDate.Value;
                            Assert.AreEqual(startDay + " every two weeks" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                        }
                        
                        string nextOccurDate = this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text;
                        Assert.IsTrue(startDate.ToString("dd MMM yyyy").Equals(nextOccurDate) || startDate.AddDays(14).ToString("dd MMM yyyy").Equals(nextOccurDate), "Next occurence was incorrect.");
                        
                        if (string.IsNullOrEmpty(subFund))
                        {
                            Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        else
                        {
                            Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                        }
                        Assert.AreEqual(string.Format(culture, "{0:c}", Convert.ToDecimal(amount)), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        Validate_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(creditCardType, creditCardNumber, firstName, lastName,
                                                          expirationMonth, expirationYear, validFromMonth, validFromYear);
                        this._generalMethods.CheckAndThrowErrorMessagesException();
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToString()))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid date for Start");
                    }

                    this._generalMethods.CheckAndThrowErrorMessagesException();

                    // Cancel out of wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
                this._generalMethods.CheckAndThrowErrorMessagesException();
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates an every two weeks scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        [Obsolete("Use Giving_ContributorDetails_Schedules_PersonalCheck_EveryTwoWeeks_WebDriver", true)]
        public void Giving_ContributorDetails_Schedules_PersonalCheck_EveryTwoWeeks(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate, string phoneNumber, string routingNumber, string accountNumber, string churchId)
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View(individualName);

            // Select New Schedule
            this._selenium.ClickAndWaitForPageToLoad("link=New Schedule");

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Subfund was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='subfund']/option"));
                this._selenium.Select("subfund", subFund);
            }
            else
            {
                this._selenium.Select("fund", fundOrPledgeDrive);
            }

            // Enter amount
            this._selenium.Type("amount", amount);

            // Select Continue
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Unless there is validation on step 1, continue to step 2
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Select bullet for Every two weeks
                this._selenium.Click("frequency_1");

                // Enter contribution date
                this._selenium.Select("//div[@id='frequency_1_wrapper']/div/table/tbody/tr/td/select", startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._selenium.Type("bi-weekly-start-date", dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = endDate.Value.ToShortDateString();
                    this._selenium.Type("bi-weekly-ends-date", dateEnd);
                }

                // Select Continue
                this._selenium.ClickAndWaitForPageToLoad("btn");

                // Unless there is validation on step 2, continue to step 3
                if (!this._selenium.IsElementPresent("error_message"))
                {

                    // Select bullet for check
                    //this._selenium.Click("contribution_payment_check");
                    this._selenium.Click("payment_method_check");

                    // Enter all personal check information
                    this._selenium.Type("phone", phoneNumber);
                    this._selenium.Type("routing_number", routingNumber);
                    this._selenium.Type("account_number", accountNumber);

                    // Select Continue
                    this._selenium.ClickAndWaitForPageToLoad("btn");

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._selenium.IsElementPresent("error_message"))
                    {

                        // Select Process this schedule
                        this._selenium.ClickAndWaitForPageToLoad("btn");

                        // Unless there is validation on step 4, continue to verify schedule exists
                        if (!this._selenium.IsElementPresent("error_message"))
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_Schedules, string.Format("${0}", amount), "Amount") + 1;
                            if (!endDate.HasValue)
                            {
                                Assert.AreEqual(startDay + " every two weeks", this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = endDate.Value;
                                Assert.AreEqual(startDay + " every two weeks" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)), "Frequency name was not correct.");
                            }
                            Assert.AreEqual(startDate.ToString("dd MMM yyyy"), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)), "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)), "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("${0}", amount), this._selenium.GetText(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)), "Amount was incorrect.");
                        }
                        // Validation on Step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._selenium.VerifyTextPresent("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            // Cancel out of the wizard
                            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        if (string.IsNullOrEmpty(phoneNumber))
                        {
                            this._selenium.VerifyTextPresent("Phone number is required");
                        }
                        else if (phoneNumber.Length > 50)
                        {
                            this._selenium.VerifyTextPresent("Phone number cannot exceed 50 characters");
                        }
                        if (string.IsNullOrEmpty(accountNumber))
                        {
                            this._selenium.VerifyTextPresent("Account number is required");
                        }
                        else if (accountNumber.Length > 30)
                        {
                            this._selenium.VerifyTextPresent("Account number cannot exceed 30 characters");
                        }
                        if (string.IsNullOrEmpty(routingNumber))
                        {
                            this._selenium.VerifyTextPresent("Bank routing number is required");
                        }
                        else if (routingNumber.Length > 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }
                        else if (routingNumber.Length < 9)
                        {
                            this._selenium.VerifyTextPresent("Please provide a valid nine-digit routing number");
                        }

                        // Cancel out of the wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._selenium.VerifyTextPresent("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToString()))
                    {
                        this._selenium.VerifyTextPresent("Please enter a valid date for Start");
                    }

                    // Cancel out of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=<< Back");
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                if (fundOrPledgeDrive == "--")
                {
                    this._selenium.VerifyTextPresent("A valid fund is required");
                }
                else if (string.IsNullOrEmpty(amount))
                {
                    this._selenium.VerifyTextPresent("Please enter a valid amount");
                }
                // Cancel out of the wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates an every two weeks scheduled giving using a personal check. This is for Online Giving 2.0.
        /// </summary>
        /// <param name="individualName">The individual's first and last name.</param>
        /// <param name="fundOrPledgeDrive">The fund or pledge drive.</param>
        /// <param name="subFund">The subfund.</param>
        /// <param name="amount">The amount.</param>
        /// <param name="startDay">The day the contribution starts.</param>
        /// <param name="startDate">The date the contribution starts.</param>
        /// <param name="endDate">The date the contribution ends.  This is optional.  Pass null if you do not wish to specify.</param>
        /// <param name="phoneNumber">The phone number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="churchId">The church id the contribution is being made in.  This is optional and only used for currency formatting.  Default value is 15.</param>
        public void Giving_ContributorDetails_Schedules_PersonalCheck_EveryTwoWeeks_WebDriver(string individualName, string fundOrPledgeDrive, string subFund, string amount, DayOfWeek startDay, DateTime startDate, DateTime? endDate,
            string phoneNumber, string routingNumber, string accountNumber, string churchId = "15")
        {
            // Store culture for currency settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Navigate to the Schedules tab of the Contributor Details page
            this.Giving_ContributorDetails_Schedules_View_WebDriver(individualName);

            // Select New Schedule
            this._driver.FindElementByLinkText("New Schedule").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("fund"));

            //Select Fund and SubFund
            Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(fundOrPledgeDrive, subFund);

            // Enter amount
            this._driver.FindElementById("amount").SendKeys(amount);

            // Select Continue
            this._driver.FindElementById("btn").Click();

            // Unless there is validation on step 1, continue to step 2
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Select bullet for Every two weeks
                this._driver.FindElementById("frequency_1").Click();

                this._generalMethods.CheckAndThrowErrorMessagesException();

                // Enter contribution date
                new SelectElement(this._driver.FindElementByXPath("//div[@id='frequency_1_wrapper']/div/table/tbody/tr/td/select")).SelectByText(startDay.ToString());
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                var dateStart = startDate.ToShortDateString();
                this._driver.FindElementById("bi-weekly-start-date").SendKeys(dateStart);

                // If End Date is used, enter end date
                if (endDate.HasValue)
                {
                    var dateEnd = endDate.Value.ToShortDateString();
                    this._driver.FindElementById("bi-weekly-ends-date").SendKeys(dateEnd);
                }

                // Select Continue
                this._driver.FindElementById("btn").Click();

                // Unless there is validation on step 2, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                {

                    //Enter Personal Check Information and continue
                    Set_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, routingNumber, accountNumber);

                    // Unless there is validation on step 3, continue to step 4
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
                    {

                        // Select Process this schedule
                        this._driver.FindElementById("btn").Click();

                        // Unless there is validation on step 4, continue to verify schedule exists
                        if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                        {

                            // Verify schedule exists
                            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Schedules, string.Format("${0}", amount), "Amount") + 1;
                            if (!endDate.HasValue)
                            {
                                Assert.AreEqual(startDay + " every two weeks", this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            else
                            {
                                var formattedEndDate = endDate.Value;
                                Assert.AreEqual(startDay + " every two weeks" + " Ends: " + formattedEndDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]", row)).Text, "Frequency name was not correct.");
                            }
                            Assert.AreEqual(startDate.ToString("dd MMM yyyy"), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[2]", row)).Text, "Next occurence was incorrect.");
                            if (string.IsNullOrEmpty(subFund))
                            {
                                Assert.AreEqual(fundOrPledgeDrive, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            else
                            {
                                Assert.AreEqual(fundOrPledgeDrive + " > " + subFund, this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Designation was incorrect.");
                            }
                            Assert.AreEqual(string.Format("${0}", amount), this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Amount was incorrect.");
                        }
                        // Validation on Step 4 occurred
                        #region Step 4 Validation
                        else
                        {
                            // Velocity exceptions
                            if ((amount == "1101.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the total dollar amount of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }
                            else if ((amount == "1102.00") && (accountNumber == "123123123"))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("The merchant has exceeded the number of transactions allowed for this period. Please contact the merchant to resolve this problem.");
                            }

                            //Check for Any other errors
                            if (this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                            {
                                this._generalMethods.CheckAndThrowErrorMessagesException();
                            }

                            // Cancel out of the wizard
                            this._driver.FindElementByLinkText("Cancel").Click();
                        }
                        #endregion Step 4 Validation
                    }
                    // Validation on Step 3 occurred
                    #region Step 3 Validation
                    else
                    {
                        //Validate Personal Check Information
                        Validate_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(phoneNumber, accountNumber, routingNumber);
                        this._generalMethods.CheckAndThrowErrorMessagesException();
                    }
                    #endregion Step 3 Validation
                }
                // Validation on Step 2 occurred
                #region Step 2 Validation
                else
                {
                    if (startDay.ToString() == "--")
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please select a weekday");
                    }
                    if (string.IsNullOrEmpty(startDate.ToString()))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid date for Start");
                    }

                    this._generalMethods.CheckAndThrowErrorMessagesException();

                    // Cancel out of wizard
                    this._driver.FindElementByLinkText("<< Back").Click();
                    this._driver.FindElementByLinkText("Cancel").Click();
                }
                #endregion Step 2 Validation
            }
            // Validation on Step 1 occurred
            #region Step 1 Validation
            else
            {
                Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(fundOrPledgeDrive, amount);
                this._generalMethods.CheckAndThrowErrorMessagesException();
            }
            #endregion Step 1 Validation
        }

        #endregion Every Two Weeks

        #region Giving 1.0 Schedules
        /// <summary>
        /// Deletes all scheduled contributions.
        /// </summary>
        /// <param name="attributedTo">The individual who the contribution is attributed to</param>
        /// <param name="amount">The amount of the contribution</param>
        /// <param name="method">The method of payment</param>
        public void Giving_ContributorDetails_Scheduled_Delete_All(string attributedTo, double? amount, DateTime date, string method)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._selenium.GetLocation().Contains("/giving/householdcontribution2.aspx"))
            {
                this._selenium.Navigate(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            this._generalMethods.SelectPersonFromModal(attributedTo, false);

            // View the scheduled section
            this._selenium.ClickAndWaitForPageToLoad("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']");


            //Get latest Row number
            int rows = this._generalMethods.GetTableRowCount(TableIds.Giving_ContributorDetails_Scheduled);

            //Header will always be row 0
            if (rows > 0)
            {
                for (int i = 1; i < rows; i++)
                {
                    log.Debug("*******************************************************");
                    log.Debug("Today: " + date.ToShortDateString());
                    string tableDate = this._selenium.GetTable(string.Format("{0}.{1}.6", TableIds.Giving_ContributorDetails_Scheduled, i));
                    log.Debug("Table Date: " + tableDate);
                    DateTime dt = Convert.ToDateTime(tableDate);
                    log.Debug("Compare Date: " + (dt.Date - TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))).Days);

                    //if (date.ToShortDateString() == this._selenium.GetTable(string.Format("{0}.{1}.6", TableIds.Giving_ContributorDetails_Scheduled, i)))
                    if ((dt.Date - TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))).Days <= 0)
                    {
                        log.Debug("Amount Format: " + string.Format("{0:c}", amount));
                        string amountTable = this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Giving_ContributorDetails_Scheduled, i));
                        log.Debug("Amount Table " + amountTable);
                        if (string.Format("{0:c}", amount) == amountTable)
                        {

                            log.Debug("Found amount: " + string.Format("{0:c}", amount));
                            string methodTable = this._selenium.GetTable(string.Format("{0}.{1}.8", TableIds.Giving_ContributorDetails_Scheduled, i));
                            if (method == methodTable)
                            {
                                log.Debug("Method found:  " + method);
                                //Delete row by 8th column delete button
                                log.Debug("************** DELETE ROW [" + i + "] BEG *************");
                                this._selenium.Click(string.Format("//table[*]/tbody/tr[{0}]/td[*]/a[@class='delete align_center']", i + 1));
                                log.Debug("************** DELETE  [" + i + "] END *************");

                                //Reset, since we lost a row. Get new row count and start over
                                i = 1;
                                rows = this._generalMethods.GetTableRowCount(TableIds.Giving_ContributorDetails_Scheduled);


                            }
                        }
                    }

                    log.Debug("*******************************************************");

                }
            }
            else
            {
                log.Info("No Schedules to Delete");
            }
        }

        /// <summary>
        /// Deletes all scheduled contributions.
        /// </summary>
        /// <param name="attributedTo">The individual who the contribution is attributed to</param>
        /// <param name="amount">The amount of the contribution</param>
        /// <param name="method">The method of payment</param>
        public void Giving_ContributorDetails_Scheduled_Delete_All_WebDriver(string attributedTo, double? amount, DateTime date, string method)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._generalMethods.GetUrl().Contains("/giving/householdcontribution2.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            // ctl00_ctl00_MainContent_content_lblName
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_lblName")))
            {
                if (!this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblName").Text.Equals(attributedTo))
                {
                    this._driver.FindElementByLinkText("Change person").Click();
                    this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
                }
            }
            else
            {
                this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
            }




            // View the scheduled section
            this._driver.FindElementByXPath("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']").Click();

            int rows = 0;
            try
            {
                this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.Giving_ContributorDetails_Scheduled), 30, "No Schedules Found");
                //Get latest Row number
                rows = this._generalMethods.GetTableRowCountWebDriver(TableIds.Giving_ContributorDetails_Scheduled);
            }
            catch (Exception e)
            {

                // if (!this._generalMethods.IsElementPresentWebDriver(By.Id("grid_no_records")))
                if (this._generalMethods.IsTextPresentWebDriver("No records found"))
                {
                    rows = 0;
                }
                else
                {
                    Assert.Fail("Did not go to Contributor Schedules");

                }
            }


            //Header will always be row 0
            if (rows > 0)
            {
                for (int i = 1; i < rows; i++)
                {
                    log.Debug("*******************************************************");
                    log.Debug("************** ROW  [" + rows + "] *************");
                    log.Debug("************** INT  [" + i + "] *************");
                    log.Debug("Today: " + date.ToShortDateString());
                    //string tableDate = this._selenium.GetTable(string.Format("{0}.{1}.6", TableIds.Giving_ContributorDetails_Scheduled, i));
                    IWebElement table = this._driver.FindElementByXPath(TableIds.Giving_ContributorDetails_Scheduled);
                    IWebElement row = table.FindElements(By.TagName("tr"))[i];
                    string tableDate = row.FindElements(By.TagName("td"))[6].Text;

                    log.Debug("Table Date: " + tableDate);
                    DateTime dt = Convert.ToDateTime(tableDate);
                    log.Debug("Compare Date: " + (dt.Date - TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))).Days);

                    //if (date.ToShortDateString() == this._selenium.GetTable(string.Format("{0}.{1}.6", TableIds.Giving_ContributorDetails_Scheduled, i)))
                    if ((dt.Date - TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))).Days <= 0)
                    {
                        log.Debug("Amount Format: " + string.Format("{0:c}", amount));
                        //string amountTable = this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Giving_ContributorDetails_Scheduled, i));
                        string amountTable = row.FindElements(By.TagName("td"))[4].Text;

                        log.Debug("Amount Table " + amountTable);
                        if (string.Format("{0:c}", amount) == amountTable)
                        {

                            log.Debug("Found amount: " + string.Format("{0:c}", amount));
                            //string methodTable = this._selenium.GetTable(string.Format("{0}.{1}.8", TableIds.Giving_ContributorDetails_Scheduled, i));
                            string methodTable = row.FindElements(By.TagName("td"))[8].Text;

                            if (method == methodTable)
                            {
                                log.Debug("Method found:  " + method);
                                //Delete row by 8th column delete button
                                log.Debug("************** DELETE ROW [" + i + "] BEG *************");
                                this._driver.FindElementByXPath(string.Format("//table[*]/tbody/tr[{0}]/td[*]/a[@class='delete align_center']", i + 1)).Click();
                                log.Debug("************** DELETE  [" + i + "] END *************");

                                //Reset, since we lost a row. Get new row count and start over
                                this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.Giving_ContributorDetails_Scheduled));
                                i = 1;
                                rows = this._generalMethods.GetTableRowCountWebDriver(TableIds.Giving_ContributorDetails_Scheduled);
                                log.Debug("************** NEW ROW  [" + rows + "] END *************");
                                log.Debug("************** NEW INT  [" + i + "] *************");

                            }
                        }
                    }

                    log.Debug("*******************************************************");

                }
            }
            else
            {
                log.Info("No Schedules to Delete");
            }
        }

        /// <summary>
        /// Creates a scheduled contribution.
        /// </summary>
        /// <param name="attributedTo">The individual who the contribution is attributed to</param>
        /// <param name="amount">The amount of the contribution</param>
        /// <param name="frequency">The frequency of the contribution</param>
        /// <param name="gifts">The number of gifts</param>
        /// <param name="date">The date of the first contribution</param>
        /// <param name="fund">The fund</param>
        /// <param name="subFund">The sub fund</param>
        /// <param name="pledgeDrive">The pledge drive</param>
        /// <param name="method">The method of payment</param>
        /// <param name="paymentInfo">The payment information</param>
        public void Giving_ContributorDetails_Scheduled_Create(string attributedTo, double? amount, string frequency, int? gifts, DateTime date, string fund, string subFund, string pledgeDrive, string method, string[] paymentInfo)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._selenium.GetLocation().Contains("/giving/householdcontribution2.aspx"))
            {
                this._selenium.Navigate(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            this._generalMethods.SelectPersonFromModal(attributedTo, false);

            // View the scheduled section
            this._selenium.ClickAndWaitForPageToLoad("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']");

            // Populate fields
            System.Threading.Thread.Sleep(5000);
            log.Info("Populate Fields");
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlAutomaticAttributedTo_dropDownList", attributedTo);
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox", amount.ToString());
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlAutomaticFrequency_dropDownList", frequency);

            if (frequency == "One Time")
            {
                gifts = 1;
            }
            else if (frequency != "One Time" && gifts > 0)
            {
                this._selenium.Click("ctl00_ctl00_MainContent_content_rdbtnGifts");
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticGift_textBox", gifts.ToString());
            }

            this._selenium.Type("ctl00_ctl00_MainContent_content_ctl00_DateTextBox", date.ToShortDateString());
            string designation = string.Empty;

            if (!string.IsNullOrEmpty(fund))
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlAutomaticFund_dropDownList", fund);
                designation = fund;

                if (!string.IsNullOrEmpty(subFund))
                {
                    this._selenium.Select("ctl00_ctl00_MainContent_content_ddlAutomaticSubFund_dropDownList", subFund);
                    designation = string.Format("{0} - {1}", fund, subFund);
                }
            }

            if (!string.IsNullOrEmpty(pledgeDrive))
            {
                this._selenium.Click("ctl00_ctl00_MainContent_content_rdbtnPledges");
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlAutomaticPledges_dropDownList", pledgeDrive);
                designation = pledgeDrive;
            }

            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlAutomaticIndividualPayment_dropDownList", attributedTo);

            if (method == "eCheck")
            {
                this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList", method, this._javascript.IsElementPresent("ctl00_ctl00_MainContent_content_txtAutomaticBankAccountNumber_textBox"), "10000");
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticBankName_textBox", paymentInfo[0]);
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticBankRoutingNumber_textBox", paymentInfo[1]);
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticBankAccountNumber_textBox", paymentInfo[2]);
                this._selenium.Type("ctl00_ctl00_MainContent_content_ctlAddress_txtPhoneNumber_textBox", "630-217-2170");
            }
            else
            {
                this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList", method, this._javascript.IsElementPresent("ctl00_ctl00_MainContent_content_txtAutomaticcvcNumber_textBox"), "10000");
                method = "Credit Card";
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticCardHolderName_textBox", paymentInfo[0]);
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticCardNumber_textBox", paymentInfo[1]);
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticExpireDate", paymentInfo[2]);
            }

            this._selenium.Type("ctl00_ctl00_MainContent_content_ctlAddress_txtAddress1_textBox", "9616 Armour Dr");
            this._selenium.Type("ctl00_ctl00_MainContent_content_ctlAddress_txtCity_textBox", "Keller");
            this._selenium.Select("ctl00_ctl00_MainContent_content_ctlAddress_ddlState_dropDownList", "Texas");
            this._selenium.Type("ctl00_ctl00_MainContent_content_ctlAddress_txtPostalCode_textBox", "76244");

            // Submit the schedule
            log.Info("Submit Schedule");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnAutomaticAddNew");
            System.Threading.Thread.Sleep(5000);

            // Verify the schedule was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null);
            Assert.AreEqual(attributedTo, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Giving_ContributorDetails_Scheduled, itemRow)));
            Assert.AreEqual(designation, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Giving_ContributorDetails_Scheduled, itemRow)));
            Assert.AreEqual(string.Format("{0:c}", amount), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Giving_ContributorDetails_Scheduled, itemRow)));
            Assert.AreEqual(frequency, this._selenium.GetTable(string.Format("{0}.{1}.5", TableIds.Giving_ContributorDetails_Scheduled, itemRow)));
            Assert.AreEqual(date.ToShortDateString(), this._selenium.GetTable(string.Format("{0}.{1}.6", TableIds.Giving_ContributorDetails_Scheduled, itemRow)));
            Assert.AreEqual(gifts.ToString(), this._selenium.GetTable(string.Format("{0}.{1}.7", TableIds.Giving_ContributorDetails_Scheduled, itemRow)));
            Assert.AreEqual(method, this._selenium.GetTable(string.Format("{0}.{1}.8", TableIds.Giving_ContributorDetails_Scheduled, itemRow)));
            Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[10]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1)));
            Assert.AreEqual(false, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[11]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1)));
        }

        /// <summary>
        /// Creates a scheduled contribution.
        /// </summary>
        /// <param name="attributedTo">The individual who the contribution is attributed to</param>
        /// <param name="amount">The amount of the contribution</param>
        /// <param name="frequency">The frequency of the contribution</param>
        /// <param name="gifts">The number of gifts</param>
        /// <param name="date">The date of the first contribution</param>
        /// <param name="fund">The fund</param>
        /// <param name="subFund">The sub fund</param>
        /// <param name="pledgeDrive">The pledge drive</param>
        /// <param name="method">The method of payment</param>
        /// <param name="paymentInfo">The payment information</param>
        public void Giving_ContributorDetails_Scheduled_Create_WebDriver(string attributedTo, double? amount, string frequency, int? gifts, DateTime date, string fund, string subFund, string pledgeDrive, string method, string[] paymentInfo)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._generalMethods.GetUrl().Contains("/giving/householdcontribution2.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_lblName")))
            {
                if (!this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblName").Text.Equals(attributedTo))
                {
                    this._driver.FindElementByLinkText("Change person").Click();
                    this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
                }
            }
            else
            {
                this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
            }

            // View the scheduled section
            this._driver.FindElementByXPath("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']").Click();

            // Populate fields
            //System.Threading.Thread.Sleep(5000);
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_ddlAutomaticAttributedTo_dropDownList"));

            log.Info("Populate Fields");
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticAttributedTo_dropDownList")).SelectByText(attributedTo);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox").SendKeys(amount.ToString());
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticFrequency_dropDownList")).SelectByText(frequency);

            if (frequency == "One Time")
            {
                gifts = 1;
            }
            else if (frequency != "One Time" && gifts > 0)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_rdbtnGifts").Click();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticGift_textBox").SendKeys(gifts.ToString());
            }

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl00_DateTextBox").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl00_DateTextBox").SendKeys(date.ToShortDateString());
            string designation = string.Empty;

            if (!string.IsNullOrEmpty(fund))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticFund_dropDownList")).SelectByText(fund);
                designation = fund;

                if (!string.IsNullOrEmpty(subFund))
                {
                    new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticSubFund_dropDownList")).SelectByText(subFund);
                    designation = string.Format("{0} - {1}", fund, subFund);
                }
            }

            if (!string.IsNullOrEmpty(pledgeDrive))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_rdbtnPledges").Click();
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticPledges_dropDownList")).SelectByText(pledgeDrive);
                designation = pledgeDrive;
            }

            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticIndividualPayment_dropDownList")).SelectByText(attributedTo);

            if (method == "eCheck")
            {
                //this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList", method, this._javascript.IsElementPresent("ctl00_ctl00_MainContent_content_txtAutomaticBankAccountNumber_textBox"), "10000");
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList")).SelectByText(method);
                this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_txtAutomaticBankAccountNumber_textBox"), 15);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticBankName_textBox").SendKeys(paymentInfo[0]);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticBankRoutingNumber_textBox").SendKeys(paymentInfo[1]);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticBankAccountNumber_textBox").SendKeys(paymentInfo[2]);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtPhoneNumber_textBox").SendKeys("630-217-2170");
            }
            else
            {
                //this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList", method, this._javascript.IsElementPresent("ctl00_ctl00_MainContent_content_txtAutomaticcvcNumber_textBox"), "10000");

                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList")).SelectByText(method);
                this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_txtAutomaticcvcNumber_textBox"), 15);
                method = "Credit Card";
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticCardHolderName_textBox").SendKeys(paymentInfo[0]);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticCardNumber_textBox").SendKeys(paymentInfo[1]);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticExpireDate").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticExpireDate").SendKeys(paymentInfo[2]);
            }

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtAddress1_textBox").SendKeys("9616 Armour Dr");
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtCity_textBox").SendKeys("Keller");
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_ddlState_dropDownList")).SelectByText("Texas");
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtPostalCode_textBox").SendKeys("76244");

            // Submit the schedule
            log.Info("Submit Schedule");
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnAutomaticAddNew").Click();
            //System.Threading.Thread.Sleep(5000);
            //this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox").SendKeys(amount.ToString());
            WebDriverWait wait = new WebDriverWait(this._driver, TimeSpan.FromSeconds(10));
            bool submitted = wait.Until<bool>((d) => { d.FindElement(By.Id("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox")).Text.Equals(""); return true; });

            if (!submitted)
            {
                throw new WebDriverTimeoutException("Schedule was not succssfully submitted or Time Out submitting a schedule");
            }

            // Verify the schedule was created
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null);
            IWebElement table = this._driver.FindElementByXPath(TableIds.Giving_ContributorDetails_Scheduled);
            IWebElement row = table.FindElements(By.TagName("tr"))[itemRow];

            Assert.AreEqual(attributedTo, row.FindElements(By.TagName("td"))[2].Text);
            Assert.AreEqual(designation, row.FindElements(By.TagName("td"))[3].Text);
            Assert.AreEqual(string.Format("{0:c}", amount), row.FindElements(By.TagName("td"))[4].Text);
            Assert.AreEqual(frequency, row.FindElements(By.TagName("td"))[5].Text);
            Assert.AreEqual(date.ToShortDateString(), row.FindElements(By.TagName("td"))[6].Text);  //"M/dd/yyyy"
            Assert.AreEqual(gifts.ToString(), row.FindElements(By.TagName("td"))[7].Text);
            Assert.AreEqual(method, row.FindElements(By.TagName("td"))[8].Text);
            Assert.AreEqual(true, this._generalMethods.IsElementPresentWebDriver(By.XPath(string.Format("{0}/tbody/tr[{1}]/td[10]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1))));
            Assert.AreEqual(false, this._generalMethods.IsElementPresentWebDriver(By.XPath(string.Format("{0}/tbody/tr[{1}]/td[11]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1))));

        }

        public void Giving_ContributorDetails_Scheduled_Update(string attributedTo, double? amount, string frequency, int? gifts, DateTime date, string fund, string subFund, string pledgeDrive, string method, string[] paymentInfo, double? amountUpdated)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._selenium.GetLocation().Contains("/giving/householdcontribution2.aspx"))
            {
                this._selenium.Navigate(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            this._generalMethods.SelectPersonFromModal(attributedTo, false);

            // View the scheduled section
            this._selenium.ClickAndWaitForPageToLoad("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']");
            System.Threading.Thread.Sleep(5000);

            // Update the scheduled contribution
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1));

            Assert.AreEqual(attributedTo, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlAutomaticAttributedTo_dropDownList"));
            Assert.AreEqual(amount.ToString(), this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox"));
            Assert.AreEqual(frequency, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlAutomaticFrequency_dropDownList"));

            if (frequency == "One Time")
            {
                gifts = 1;
            }
            if (gifts != null && frequency != "One Time")
            {
                Assert.AreEqual(gifts.ToString(), this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticGift_textBox"));
            }
            Assert.AreEqual(date.ToShortDateString(), this._selenium.GetValue("ctl00_ctl00_MainContent_content_ctl00_DateTextBox"));

            string designation = string.Empty;
            if (!string.IsNullOrEmpty(fund))
            {
                designation = fund;
                Assert.AreEqual(fund, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlAutomaticFund_dropDownList"));

                if (!string.IsNullOrEmpty(subFund))
                {
                    designation = string.Format("{0} - {1}", fund, subFund);
                    Assert.AreEqual(subFund, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlAutomaticSubFund_dropDownList"));
                }
            }

            if (!string.IsNullOrEmpty(pledgeDrive))
            {
                designation = pledgeDrive;
                Assert.AreEqual(pledgeDrive, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlAutomaticPledges_dropDownList"));
            }

            Assert.AreEqual(attributedTo, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlAutomaticIndividualPayment_dropDownList"));
            Assert.AreEqual(method, this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList"));

            if (method == "eCheck")
            {
                Assert.AreEqual(paymentInfo[0], this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticBankName_textBox"));
                Assert.AreEqual(paymentInfo[1], this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticBankRoutingNumber_textBox"));
                Assert.AreEqual("************7890", this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticBankAccountNumber_textBox"));
                Assert.AreEqual("630-217-2170", this._selenium.GetValue("ctl00_ctl00_MainContent_content_ctlAddress_txtPhoneNumber_textBox"));
            }
            else
            {
                method = "Credit Card";
                Assert.AreEqual(paymentInfo[0], this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticCardHolderName_textBox"));
                Assert.AreEqual(paymentInfo[1].Replace("411111111111", "************"), this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticCardNumber_textBox"));
                Assert.AreEqual(paymentInfo[2], this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtAutomaticExpireDate"));
            }

            Assert.AreEqual("9616 Armour Dr", this._selenium.GetValue("ctl00_ctl00_MainContent_content_ctlAddress_txtAddress1_textBox"));
            Assert.AreEqual("Keller", this._selenium.GetValue("ctl00_ctl00_MainContent_content_ctlAddress_txtCity_textBox"));
            Assert.AreEqual("Texas", this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ctlAddress_ddlState_dropDownList"));
            Assert.AreEqual("76244", this._selenium.GetValue("ctl00_ctl00_MainContent_content_ctlAddress_txtPostalCode_textBox"));

            // Update the amount
            this._selenium.Type("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox", amountUpdated.ToString());

            // Update the schedule
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnAutomaticEdit");
            System.Threading.Thread.Sleep(5000);

            // Verify the schedule was updated
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amountUpdated), "Amount", null);
            Assert.AreEqual(attributedTo, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(designation, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(string.Format("{0:c}", amountUpdated), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(frequency, this._selenium.GetTable(string.Format("{0}.{1}.5", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(date.ToShortDateString(), this._selenium.GetTable(string.Format("{0}.{1}.6", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(gifts.ToString(), this._selenium.GetTable(string.Format("{0}.{1}.7", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(method, this._selenium.GetTable(string.Format("{0}.{1}.8", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[10]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated + 1)));
            Assert.AreEqual(false, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[11]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated + 1)));
        }

        public void Giving_ContributorDetails_Scheduled_Update_WebDriver(string attributedTo, double? amount, string frequency, int? gifts, DateTime date, string fund, string subFund, string pledgeDrive, string method, string[] paymentInfo, double? amountUpdated)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._generalMethods.GetUrl().Contains("/giving/householdcontribution2.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_lblName")))
            {
                if (!this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblName").Text.Equals(attributedTo))
                {
                    this._driver.FindElementByLinkText("Change person").Click();
                    this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
                }
            }
            else
            {
                this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
            }

            // View the scheduled section
            this._driver.FindElementByXPath("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']").Click();

            // Populate fields
            //System.Threading.Thread.Sleep(5000);
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_ddlAutomaticAttributedTo_dropDownList"));

            // Update the scheduled contribution
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null);
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1)).Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_ddlAutomaticAttributedTo_dropDownList"));

            Assert.AreEqual(attributedTo, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticAttributedTo_dropDownList")).SelectedOption.Text);
            Assert.AreEqual(amount.ToString(), this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox").GetAttribute("value").Trim().ToString());
            Assert.AreEqual(frequency, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticFrequency_dropDownList")).SelectedOption.Text);

            if (frequency == "One Time")
            {
                gifts = 1;
            }
            if (gifts != null && frequency != "One Time")
            {
                Assert.AreEqual(gifts.ToString(), this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticGift_textBox").GetAttribute("value").Trim().ToString());
            }
            Assert.AreEqual(date.ToShortDateString(), this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl00_DateTextBox").GetAttribute("value").Trim().ToString());  //"M/dd/yyyy"

            string designation = string.Empty;
            if (!string.IsNullOrEmpty(fund))
            {
                designation = fund;
                Assert.AreEqual(fund, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticFund_dropDownList")).SelectedOption.Text);

                if (!string.IsNullOrEmpty(subFund))
                {
                    designation = string.Format("{0} - {1}", fund, subFund);
                    Assert.AreEqual(subFund, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticSubFund_dropDownList")).SelectedOption.Text);
                }
            }

            if (!string.IsNullOrEmpty(pledgeDrive))
            {
                designation = pledgeDrive;
                Assert.AreEqual(pledgeDrive, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticPledges_dropDownList")).SelectedOption.Text);
            }

            Assert.AreEqual(attributedTo, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticIndividualPayment_dropDownList")).SelectedOption.Text);
            Assert.AreEqual(method, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAutomaticPaymentMethod_dropDownList")).SelectedOption.Text);

            if (method == "eCheck")
            {
                Assert.AreEqual(paymentInfo[0], this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticBankName_textBox").GetAttribute("value").Trim().ToString());
                Assert.AreEqual(paymentInfo[1], this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticBankRoutingNumber_textBox").GetAttribute("value").Trim().ToString());
                Assert.AreEqual("************7890", this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticBankAccountNumber_textBox").GetAttribute("value").Trim().ToString());
                Assert.AreEqual("630-217-2170", this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtPhoneNumber_textBox").GetAttribute("value").Trim().ToString());
            }
            else
            {
                method = "Credit Card";
                Assert.AreEqual(paymentInfo[0], this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticCardHolderName_textBox").GetAttribute("value").Trim().ToString());
                Assert.AreEqual(paymentInfo[1].Replace("411111111111", "************"), this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticCardNumber_textBox").GetAttribute("value").Trim().ToString());
                Assert.AreEqual(paymentInfo[2], this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticExpireDate").GetAttribute("value").Trim().ToString());
            }

            Assert.AreEqual("9616 Armour Dr", this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtAddress1_textBox").GetAttribute("value").Trim().ToString());
            Assert.AreEqual("Keller", this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtCity_textBox").GetAttribute("value").Trim().ToString());
            Assert.AreEqual("Texas", new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_ddlState_dropDownList")).SelectedOption.Text);
            Assert.AreEqual("76244", this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlAddress_txtPostalCode_textBox").GetAttribute("value").Trim().ToString());

            // Update the amount
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox").SendKeys(amountUpdated.ToString());

            // Update the schedule
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnAutomaticEdit").Click();
            //System.Threading.Thread.Sleep(5000);
            WebDriverWait wait = new WebDriverWait(this._driver, TimeSpan.FromSeconds(10));
            bool submitted = wait.Until<bool>((d) => { d.FindElement(By.Id("ctl00_ctl00_MainContent_content_txtAutomaticAmount_textBox")).GetAttribute("value").Equals(""); return true; });

            if (!submitted)
            {
                throw new WebDriverTimeoutException("Schedule was not succssfully updated or Time Out updating a schedule");
            }


            // Verify the schedule was updated
            int itemRowUpdated = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amountUpdated), "Amount", null);
            IWebElement table = this._driver.FindElementByXPath(TableIds.Giving_ContributorDetails_Scheduled);
            IWebElement row = table.FindElements(By.TagName("tr"))[itemRowUpdated];

            Assert.AreEqual(attributedTo, row.FindElements(By.TagName("td"))[2].Text);
            Assert.AreEqual(designation, row.FindElements(By.TagName("td"))[3].Text);
            Assert.AreEqual(string.Format("{0:c}", amountUpdated), row.FindElements(By.TagName("td"))[4].Text);
            Assert.AreEqual(frequency, row.FindElements(By.TagName("td"))[5].Text);
            Assert.AreEqual(date.ToShortDateString(), row.FindElements(By.TagName("td"))[6].Text);
            Assert.AreEqual(gifts.ToString(), row.FindElements(By.TagName("td"))[7].Text);
            Assert.AreEqual(method, row.FindElements(By.TagName("td"))[8].Text);
            Assert.AreEqual(true, this._generalMethods.IsElementPresentWebDriver(By.XPath(string.Format("{0}/tbody/tr[{1}]/td[10]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1))));
            Assert.AreEqual(false, this._generalMethods.IsElementPresentWebDriver(By.XPath(string.Format("{0}/tbody/tr[{1}]/td[11]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1))));


            /*
            Assert.AreEqual(attributedTo, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(designation, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(string.Format("{0:c}", amountUpdated), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(frequency, this._selenium.GetTable(string.Format("{0}.{1}.5", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(date.ToShortDateString(), this._selenium.GetTable(string.Format("{0}.{1}.6", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(gifts.ToString(), this._selenium.GetTable(string.Format("{0}.{1}.7", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(method, this._selenium.GetTable(string.Format("{0}.{1}.8", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated)));
            Assert.AreEqual(true, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[10]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated + 1)));
            Assert.AreEqual(false, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[11]/img[contains(@src, '/check.gif?')]", TableIds.Giving_ContributorDetails_Scheduled, itemRowUpdated + 1)));
            */
        }


        /// <summary>
        /// Deletes a contribution schedule.
        /// </summary>
        /// <param name="attributedTo">The individual that the schedule belongs to.</param>
        /// <param name="amount">The amount of the contribution.</param>
        public void Giving_ContributorDetails_Scheduled_Delete(string attributedTo, double amount)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._selenium.GetLocation().Contains("/giving/householdcontribution2.aspx"))
            {
                this._selenium.Navigate(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            this._generalMethods.SelectPersonFromModal(attributedTo, false);

            // View the scheduled section
            this._selenium.ClickAndWaitForPageToLoad("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']");

            // Delete the contribution schedule
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[12]/a", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1));

            // Verify the schedule was deleted
            if (this._selenium.IsElementPresent(TableIds.Giving_ContributorDetails_Scheduled))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("No records found");
            }
        }

        /// <summary>
        /// Deletes a contribution schedule.
        /// </summary>
        /// <param name="attributedTo">The individual that the schedule belongs to.</param>
        /// <param name="amount">The amount of the contribution.</param>
        public void Giving_ContributorDetails_Scheduled_Delete_WebDriver(string attributedTo, double amount)
        {
            // Navigate to giving->contributor details if not the current page
            if (!this._generalMethods.GetUrl().Contains("/giving/householdcontribution2.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Contributor_Details);
            }

            // Search for and select an individual
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_lblName")))
            {
                if (!this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblName").Text.Equals(attributedTo))
                {
                    this._driver.FindElementByLinkText("Change person").Click();
                    this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
                }
            }
            else
            {
                this._generalMethods.SelectPersonFromModalWebDriver(attributedTo, false);
            }


            // View the scheduled section
            this._driver.FindElementByXPath("//a[@id='ctl00_ctl00_MainContent_content_lbtnAutomatic' and text()='Schedules']").Click();

            // Delete the contribution schedule
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null);
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[12]/a", TableIds.Giving_ContributorDetails_Scheduled, itemRow + 1)).Click();

            // Verify the schedule was deleted
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath(TableIds.Giving_ContributorDetails_Scheduled)))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Giving_ContributorDetails_Scheduled, string.Format("{0:c}", amount), "Amount", null));
            }
            else
            {
                this._generalMethods.VerifyTextPresentWebDriver("No records found");
            }
        }

        #endregion Giving 1.0 Schedules

        #endregion Schedules

        #region Accounts
        /// <summary>
        /// Views the accounts for a given contributor.
        /// </summary>
        /// <param name="individualName">The name of the contributor.</param>
        public void Giving_ContributorDetails_Accounts_View(string individualName)
        {
            // Navigate to Contributor Details and select individual
            this.Giving_ContributorDetails_View(individualName);

            // Click on the Accounts tab
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_lbtnAccounts");

        }

        public void Giving_ContributorDetails_Accounts_View_WebDriver(string individualName)
        {
            // Navigate to Contributor Details and select individual
            this.Giving_ContributorDetails_View_WebDriver(individualName);

            // Click on the Accounts tab
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbtnAccounts").Click();

        }

        public void Giving_ContributorDetails_Accounts_AddAccountAndDelete_WebDriver(string individualName, string attributedTo, string accountType, string accountNumber, string routingNumber, bool shared)
        {
            // Navigate to Accounts tab
            this.Giving_ContributorDetails_Accounts_View_WebDriver(individualName);

            // Select who the account is attributed to
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddHsdIndAccountId")).SelectByText(attributedTo);

            // Select the account type
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddAccountTypeId")).SelectByText(accountType);

            // Enter in the account number
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccount").SendKeys(accountNumber);

            // Enter in the routing number
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtRoutingNo").SendKeys(routingNumber);

            // Check if the account is shared
            if (shared)
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsSharedAccount").Click();

            // Save the account
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveNewAccount").Click();

            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_rptrAccounts_ctl01_lnkDelete1"));

            // Verify that the account was saved
            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Accounts, accountType, "Account Type") + 1;
            TestLog.WriteLine("Row: " + row);
            IWebElement table = this._driver.FindElementByXPath(TableIds.Giving_Accounts);
            //IWebElement row = table.FindElements(By.TagName("tr"))[itemRowCompleted];

            //Assert.AreEqual(individualName, this._driver.FindElementByCssSelector(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row)).Text, "Attributed To was not correct.");
            //Assert.AreEqual(accountType, this._driver.FindElementByCssSelector(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[4]", row)).Text, "Account Type was not correct.");
            //Assert.AreEqual(accountNumber, this._driver.FindElementByCssSelector(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row)).Text, "Account Number was not correct.");
            //Assert.AreEqual(routingNumber, this._driver.FindElementByCssSelector(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[6]", row)).Text, "Routing Number was not correct.");

            Assert.AreEqual(individualName, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row))).Text, "Attributed To was not correct.");
            Assert.AreEqual(accountType, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[4]", row))).Text, "Account Type was not correct.");
            Assert.AreEqual(accountNumber, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row))).Text, "Account Number was not correct.");
            Assert.AreEqual(routingNumber, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[6]", row))).Text, "Routing Number was not correct.");

            // Delete Account
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_rptrAccounts_ctl01_lnkDelete1").Click();
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            // Verify account was deleted
            this._generalMethods.VerifyElementNotPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_rptrAccounts_ctl01_lnkDelete1"));

        }

        /// <summary>
        /// Adds a new account for an individual
        /// </summary>
        /// <param name="individualName">The name of the contributor.</param>
        /// <param name="attributedTo">Who the account is attributed to.</param>
        /// <param name="accountType">The account type.</param>
        /// <param name="accountNumber">The account number.</param>
        /// <param name="routingNumber">The routing number.</param>
        /// <param name="shared">This account is shared with other (true or false).</param>
        public void Giving_ContributorDetails_Accounts_AddAccount_WebDriver(string individualName, string attributedTo, string accountType, string accountNumber, string routingNumber, bool shared)
        {
            // Navigate to Accounts tab
            this.Giving_ContributorDetails_Accounts_View_WebDriver(individualName);

            // Select who the account is attributed to
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddHsdIndAccountId")).SelectByText(attributedTo);

            // Select the account type
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddAccountTypeId")).SelectByText(accountType);

            // Enter in the account number
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccount").SendKeys(accountNumber);

            // Enter in the routing number
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtRoutingNo").SendKeys(routingNumber);

            // Check if the account is shared
            if (shared)
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsSharedAccount").Click();

            // Save the account
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveNewAccount").Click();

            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_rptrAccounts_ctl01_lnkDelete1"));

            // Verify that the account was saved
            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Accounts, accountType, "Account Type") + 1;
            TestLog.WriteLine("Row: " + row);
            IWebElement table = this._driver.FindElementByXPath(TableIds.Giving_Accounts);
   
            Assert.AreEqual(individualName, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[3]", row))).Text, "Attributed To was not correct.");
            Assert.AreEqual(accountType, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[4]", row))).Text, "Account Type was not correct.");
            Assert.AreEqual(accountNumber, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row))).Text, "Account Number was not correct.");
            Assert.AreEqual(routingNumber, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[6]", row))).Text, "Routing Number was not correct.");
        }

        public void Giving_ContributorDetails_Accounts_EditAccount_WebDriver(string newAccountType, string newRouting, string accountType, string accountNumber, string routingNumber)
        {
            // Verify that the account was saved
            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Accounts, routingNumber, "Routing #") + 1;
            TestLog.WriteLine("Row: " + row);

            // Edit Account
            this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[1]/a", row)).Click();
            this._generalMethods.WaitForPageIsLoaded();
            Assert.AreEqual("Edit Account", this._driver.FindElementByXPath("//div[@id='ctl00_ctl00_MainContent_content_pnlAccounts']/div/h3").Text, "Edit Account page display error");

            // Select the account type
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddAccountTypeId")).SelectByText(newAccountType);

            // Enter in the routing number
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtRoutingNo").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtRoutingNo").SendKeys(newRouting);

            // Save the account
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveAccountChanges").Click();
            this._generalMethods.WaitForPageIsLoaded();

            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_rptrAccounts_ctl01_lnkDelete1"));

            // Verify that the account was saved
            //row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Accounts, accountType, "Account Type") + 1;
            row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Accounts, newAccountType, "Account Type") + 1;
            TestLog.WriteLine("Row: " + row);
            IWebElement table = this._driver.FindElementByXPath(TableIds.Giving_Accounts);

            Assert.AreEqual(newAccountType, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[4]", row))).Text, "Account Type was not correct.");
            Assert.AreEqual(accountNumber, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]", row))).Text, "Account Number was not correct.");
            Assert.AreEqual(newRouting, table.FindElement(By.XPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[6]", row))).Text, "Routing Number was not correct.");

        }

        public void Giving_ContributorDetails_Accounts_DeleteAccount_WebDriver(string accountType, string accountNumber, string routingNumber)
        {
            // Verify that the account was saved
            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Accounts, routingNumber, "Routing #") + 1;
            TestLog.WriteLine("Row: " + row);
 
            // Delete Account
            this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[8]/a", row)).Click();
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            // Verify account was deleted
            this._generalMethods.VerifyElementNotPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_rptrAccounts_ctl01_lnkDelete1"));

        }

        #endregion Accounts

        #endregion Contributor Details

        #region Batches

        /// <summary>
        /// Searches for a batch or set of batches
        /// </summary>
        /// <param name="name">The name value</param>
        /// <param name="amountFrom">The lower end of the amount range</param>
        /// <param name="amountTo">The upper end of the amount range</param>
        /// <param name="dateFrom">The lower end of the date range</param>
        /// <param name="dateTo">The upper end of the date range</param>
        public void Giving_Batches_Search(string name, int? amountFrom, int? amountTo, DateTime? dateFrom, DateTime? dateTo)
        {
            // Roll out the search drawer
            this._selenium.ClickAndWaitForCondition("search_pull_tab", this._javascript.IsElementPresent("startSearchOver"), "10000");

            // Populate the specified field(s)
            if (!string.IsNullOrEmpty(name))
            {
                this._selenium.Type("search_name", name);
            }

            if (amountFrom != null)
            {
                this._selenium.Type("search_amount_from", amountFrom.ToString());
            }

            if (amountTo != null)
            {
                this._selenium.Type("search_amount_to", amountTo.ToString());
            }

            if (dateFrom != null)
            {
                this._selenium.Type("search_start_date", amountTo.ToString());
            }

            if (dateTo != null)
            {
                this._selenium.Type("search_end_date", amountTo.ToString());
            }

            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
        }


        /// <summary>
        /// Searches for a batch or set of batches
        /// </summary>
        /// <param name="name">The name value</param>
        /// <param name="amountFrom">The lower end of the amount range</param>
        /// <param name="amountTo">The upper end of the amount range</param>
        /// <param name="dateFrom">The lower end of the date range</param>
        /// <param name="dateTo">The upper end of the date range</param>
        public void Giving_Batches_Search_WebDriver(string name, int? amountFrom, int? amountTo, DateTime? dateFrom, DateTime? dateTo)
        {
            // Roll out the search drawer
            this._driver.FindElementById("search_pull_tab").Click();
            new WebDriverWait(this._driver, TimeSpan.FromSeconds(10)).Until(ExpectedConditions.ElementIsVisible(By.Id("startSearchOver")));

            // Populate the specified field(s)
            if (!string.IsNullOrEmpty(name))
            {
                this._driver.FindElementById("search_name").SendKeys(name);
            }

            if (amountFrom != null)
            {
                this._driver.FindElementById("search_amount_from").SendKeys(amountFrom.ToString());
            }

            if (amountTo != null)
            {
                this._driver.FindElementById("search_amount_to").SendKeys(amountTo.ToString());
            }

            if (dateFrom != null)
            {
                this._driver.FindElementById("search_start_date").SendKeys(amountTo.ToString());
            }

            if (dateTo != null)
            {
                this._driver.FindElementById("search_end_date").SendKeys(amountTo.ToString());
            }

            this._driver.FindElementById(GeneralButtons.submitQuery).Click();

        }



        /// <summary>
        /// Resumes progress on an existing credit card batch.
        /// </summary>
        /// <param name="batchName">The name of the batch to resume progress on.</param>
        public void Giving_Batches_CreditCardBatches_ResumeProgress(string batchName)
        {
            // Navigate to giving->batches->credit card batches
            this._selenium.Navigate(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);

            // Resume progress on the specified batch
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Giving_Batches, batchName, "Name", null);
            this._generalMethods.SelectOptionFromGear(Convert.ToInt16(itemRow), "Resume progress");
        }

        /// <summary>
        /// Resumes progress on an existing credit card batch.
        /// </summary>
        /// <param name="batchName">The name of the batch to resume progress on.</param>
        public void Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(string batchName)
        {

            // Navigate to giving->batches->credit card batches
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);

            // Resume progress on the specified batch
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Batches, batchName, "Name", null);
            this._generalMethods.SelectOptionFromGearWebDriver(itemRow, "Resume progress");

            // Wait for Page to load
            this._generalMethods.WaitForElement(this._driver, By.PartialLinkText("RETURN"), 30, "Timed out waiting for Resume Progress page to load");
        }


        /// <summary>
        /// Creates a batch WebDriver
        /// </summary>
        /// <param name="batchName">Name of the batch</param>
        /// <param name="batchAmount">Starting amount of the batch</param>
        /// <param name="creditCard">Determines whether or not this is a credit card batch</param>
        /// <param name="receivedDate">The received date of the batch</param>
        public void Giving_Batches_Create_WebDriver(string batchName, int? batchAmount, bool creditCard, string receivedDate)
        {
            // Local variables
            string batchAmountCurrency = null;

            // Navigate to giving->batches if not the current page
            if (!this._driver.Url.Contains("/Payment/Batch/Index.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches);
            }

            // Click to begin creating a new batch
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add a new batch"), 20);
            this._driver.FindElementByLinkText("Add a new batch").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("batch_name"), 20);


            // Populate the fields with the provided data
            if (!string.IsNullOrEmpty(batchName))
            {
                this._driver.FindElementById("batch_name").SendKeys(batchName);

                // Check the max length of the field
                if (batchName.Length > 45)
                {
                    this._errorText.Add("Batch name can not be longer than 45 characters.");
                }
            }
            else
            {
                this._errorText.Add("Batch name is required.");
            }

            if (batchAmount != null)
            {
                this._driver.FindElementById("batch_amount").SendKeys(batchAmount.ToString());
                batchAmountCurrency = string.Format("{0:c}", batchAmount);
            }
            else
            {
                this._errorText.Add("Batch amount is required.");
            }

            if (creditCard)
            {
                this._driver.FindElementById("is_cc").Click();
                this._generalMethods.WaitForElement(this._driver, By.Id("received_date"));

                if (!string.IsNullOrEmpty(receivedDate))
                {
                    if (receivedDate.Contains("\\"))
                    {
                        this._driver.FindElementById("received_date").Clear();
                        //this._driver.FindElementById("received_date").SendKeys("t");                        
                        this._driver.FindElementById("received_date").SendKeys(receivedDate);
                        this._driver.FindElementById("received_date").SendKeys(Keys.Tab);
                        TestLog.WriteLine("Received Date Typed: " + this._driver.FindElementById("received_date").Text);
                    }
                    else if (receivedDate == "151515")
                    {
                        this._errorText.Add("Received date is not a valid date.");
                        this._driver.FindElementById("received_date").Clear();
                        this._driver.FindElementById("received_date").SendKeys("151515");
                        TestLog.WriteLine("Received Date Typed: " + this._driver.FindElementById("received_date").Text);

                        this._driver.FindElementById("received_date").SendKeys(Keys.Tab);
                        //this._driver.FindElementById("received_date").SendKeys("\\9");
                        //this._selenium.Focus("//input[@id='submitQuery']");
                    }
                    else
                    {
                        this._driver.FindElementById("received_date").Clear();
                        this._driver.FindElementById("received_date").SendKeys(receivedDate);
                    }
                }
                else
                {
                    this._errorText.Add("Received date is required.");
                }
            }

            this._driver.FindElementById("submitQuery").Click();

            //Do We have any Errors that were not expected?
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//dl[@id='error_message']/dd")))
            {
                if (this._errorText.Count == 0)
                {
                    this._generalMethods.CheckAndThrowErrorMessagesException();

                }
            }

            // Verify the batch was created or correct error(s) is/are present
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessagesWebDriver(this._errorText);
            }
            else
            {
                //TODO Standardize
                string dateFormat = "M/d/yyyy";

                // If the batch is a credit card batch, verify the user is taken to the add contributions page
                if (creditCard)
                {
                    DateTime now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
                    Assert.AreEqual(this._driver.Title, "Fellowship One :: Add Contributions");
                    this._generalMethods.VerifyTextPresentWebDriver("Add Contributions");
                    Assert.AreEqual(batchName, this._driver.FindElementByClassName("gutter_bottom_none").Text, string.Format("{0} not match", batchName));
                    Assert.AreEqual(batchAmountCurrency, this._driver.FindElementById("batch_header_amount").Text, string.Format("{0} not match", batchAmountCurrency));

                    try
                    {
                        Assert.AreEqual(string.Format("Created on {0:d}", now.ToString(dateFormat)), this._driver.FindElementByClassName("float_left gutter_bottom").Text, "Time stamp not match");
                    }
                    catch (Exception eCC)
                    {
                        Assert.AreEqual(string.Format("Created on {0:d}", now.ToString(dateFormat)), this._driver.FindElementByClassName("mute").Text, "Time stamp not match");
                    }

                    // Return to the landing page
                    this._driver.FindElementByLinkText("RETURN").Click();

                    // Verify the batch was created
                    int itemRowCC = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Batches, batchName, "Name", null);
                    IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_Batches);
                    Assert.AreEqual(batchName, table.FindElements(By.TagName("tr"))[itemRowCC].FindElements(By.TagName("td"))[0].Text);
                    Assert.AreEqual("Contribution", table.FindElements(By.TagName("tr"))[itemRowCC].FindElements(By.TagName("td"))[1].Text);
                    Assert.AreEqual(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).ToShortDateString(), table.FindElements(By.TagName("tr"))[itemRowCC].FindElements(By.TagName("td"))[2].Text);  //"M/dd/yyyy"
                    Assert.AreEqual(batchAmountCurrency, table.FindElements(By.TagName("tr"))[itemRowCC].FindElements(By.TagName("td"))[3].Text);
                }
                else
                {
                    this._driver.FindElementByLinkText("General").Click();

                    Thread.Sleep(5000);
                    //this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.Giving_Batches), 20);

                    int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Batches, batchName, "Name", null);
                    TestLog.WriteLine("Batch Rows Items: " + itemRow);
                    IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_Batches);
                    Assert.AreEqual(batchName, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[1].Text);
                    Assert.AreEqual(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).ToShortDateString(), table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[3].Text);  //"M/dd/yyyy"
                    Assert.AreEqual(string.Format("{0:c}", batchAmount), table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[4].Text);

                }
            }
        }

        /// <summary>
        /// Creates a batch
        /// </summary>
        /// <param name="batchName">Name of the batch</param>
        /// <param name="batchAmount">Starting amount of the batch</param>
        /// <param name="creditCard">Determines whether or not this is a credit card batch</param>
        /// <param name="receivedDate">The received date of the batch</param>
        public void Giving_Batches_Create(string batchName, int? batchAmount, bool creditCard, string receivedDate)
        {
            // Local variables
            string batchAmountCurrency = null;

            // Navigate to giving->batches if not the current page
            if (!this._selenium.GetLocation().Contains("/Payment/Batch/Index.aspx"))
            {
                this._selenium.Navigate(Navigation.Giving.Contributions.Batches);
            }

            // Click to begin creating a new batch
            this._selenium.ClickAndWaitForPageToLoad("link=Add a new batch");

            // Populate the fields with the provided data
            if (!string.IsNullOrEmpty(batchName))
            {
                this._selenium.Type("batch_name", batchName);

                // Check the max length of the field
                if (batchName.Length > 45)
                {
                    this._errorText.Add("Batch name can not be longer than 45 characters.");
                }
            }
            else
            {
                this._errorText.Add("Batch name is required.");
            }

            if (batchAmount != null)
            {
                this._selenium.Type("batch_amount", batchAmount.ToString());
                batchAmountCurrency = string.Format("{0:c}", batchAmount);
            }
            else
            {
                this._errorText.Add("Batch amount is required.");
            }

            if (creditCard)
            {
                this._selenium.ClickAndWaitForCondition("is_cc", this._javascript.IsElementPresent("received_date"), "10000");

                if (!string.IsNullOrEmpty(receivedDate))
                {
                    if (receivedDate.Contains("\\"))
                    {
                        this._selenium.KeyDown("received_date", receivedDate);
                    }
                    else if (receivedDate == "151515")
                    {
                        this._errorText.Add("Received date is not a valid date.");
                        this._selenium.Focus("received_date");
                        //this._selenium.TypeKeys("received_date", "151515");
                        this._selenium.Type("received_date", "151515");
                        TestLog.WriteLine("Received Date Typed: " + this._selenium.GetText("received_date"));
                        this._selenium.KeyDown("received_date", "\\9");
                        this._selenium.Focus("//input[@id='submitQuery']");
                    }
                    else
                    {
                        this._selenium.Type("received_date", receivedDate);
                    }
                }
                else
                {
                    this._errorText.Add("Received date is required.");
                }
            }
            this._selenium.ClickAndWaitForPageToLoad("//input[@id='submitQuery']");

            // Verify the batch was created or correct error(s) is/are present
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            else
            {
                // If the batch is a credit card batch, verify the user is taken to the add contributions page
                if (creditCard)
                {
                    this._selenium.VerifyTitle("Fellowship One :: Add Contributions");
                    this._selenium.VerifyTextPresent("Add Contributions");
                    Assert.AreEqual(batchName, this._selenium.GetText("//h2[@class='gutter_bottom_none']"));
                    Assert.AreEqual(batchAmountCurrency, this._selenium.GetText("//span[@id='batch_header_amount']"));
                    Assert.AreEqual(string.Format("Created on {0:d}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))), this._selenium.GetText("//div[@class='float_left gutter_bottom']/small"));

                    // Return to the landing page
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);

                    // Verify the batch was created
                    decimal itemRowCC = this._generalMethods.GetTableRowNumber(TableIds.Giving_Batches, batchName, "Name", null);
                    Assert.AreEqual(batchName, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.Giving_Batches, itemRowCC)));
                    Assert.AreEqual("Contribution", this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Giving_Batches, itemRowCC)));
                    Assert.AreEqual(string.Format("{0:d}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))), this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Giving_Batches, itemRowCC)));
                    Assert.AreEqual(batchAmountCurrency, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Giving_Batches, itemRowCC)));
                }
                else
                {
                    this._selenium.ClickAndWaitForPageToLoad("link=General Batches");

                    decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Giving_Batches, batchName, "Name", null);
                    Assert.AreEqual(batchName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Giving_Batches, itemRow)));
                    Assert.AreEqual(string.Format("{0:d}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))), this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Giving_Batches, itemRow)));
                    Assert.AreEqual(string.Format("{0:c}", batchAmount), this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Giving_Batches, itemRow)));
                }
            }
        }

        /// <summary>
        /// Updates a batch.
        /// </summary>
        /// <param name="batchName">The current name of the batch</param>
        /// <param name="batchAmount">The current amount of the batch</param>
        /// <param name="creditCard">Flag that determines the type of batch</param>
        /// <param name="batchNameUpdated">The updated name of the batch</param>
        /// <param name="batchAmountUpdated">The updated amount of the batch</param>
        public void Giving_Batches_Update(string batchName, double batchAmount, bool creditCard, string batchNameUpdated, int batchAmountUpdated)
        {
            // Navigate to giving->batches if not current page
            if (!this._selenium.GetLocation().Contains("/Payment/Batch/Index.aspx"))
            {

                this._selenium.Navigate(Navigation.Giving.Contributions.Batches);

            }


            if (creditCard)
            {
                this._selenium.ClickAndWaitForPageToLoad("link=Credit Card");
            }
            else
            {
                this._selenium.ClickAndWaitForPageToLoad("link=General");
            }

            // Update the batch
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Giving_Batches, batchName, "Name", null);
            this._generalMethods.SelectOptionFromGear(Convert.ToInt16(itemRow), "Edit batch");

            Assert.AreEqual(batchName, this._selenium.GetValue("batch_name"));
            Assert.AreEqual(batchAmount, Convert.ToDouble(this._selenium.GetValue("batch_amount")));

            if (!string.IsNullOrEmpty(batchNameUpdated))
            {
                this._selenium.Type("batch_name", batchNameUpdated);
            }
            if (batchAmountUpdated != batchAmount)
            {
                this._selenium.Type("batch_amount", batchAmountUpdated.ToString());
            }

            // Save the batch
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

            // Verify the batch was updated
            decimal rowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Giving_Batches, batchNameUpdated, "Name", null);

            if (creditCard)
            {
                Assert.AreEqual(batchNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.Giving_Batches, rowUpdated)));
                Assert.AreEqual(String.Format("{0:c}", batchAmountUpdated), this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Giving_Batches, rowUpdated)));
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Giving_Batches, batchName, "Name", null));
            }
            else
            {
                //Added Status columns to all areas.
                Assert.AreEqual(batchNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Giving_Batches, rowUpdated)));
                //Assert.AreEqual(batchNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.Giving_Batches, rowUpdated)));
                Assert.AreEqual(String.Format("{0:c}", batchAmountUpdated), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Giving_Batches, rowUpdated)));
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Giving_Batches, batchName, "Name", null));
            }
        }

        /// <summary>
        /// Updates a batch. only Name to change amount use Giving_Batches_CreditCardBatches_EditBatchAmount_WebDriver
        /// </summary>
        /// <param name="batchName">The current name of the batch</param>
        /// <param name="batchAmount">The current amount of the batch</param>
        /// <param name="creditCard">Flag that determines the type of batch</param>
        /// <param name="batchNameUpdated">The updated name of the batch</param>        
        public void Giving_Batches_Update_WebDriver(string batchName, double batchAmount, bool creditCard, string batchNameUpdated)
        {
            // Navigate to giving->batches if not current page
            if (!this._generalMethods.GetUrl().Contains("/Payment/Batch/Index.aspx"))
            {

                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches);

            }


            if (creditCard)
            {
                this._driver.FindElementByLinkText("Credit Card").Click();
            }
            else
            {
                this._driver.FindElementByLinkText("General").Click();
            }

            // Update the batch
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Batches, batchName, "Name", null);
            this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Edit batch");

            Assert.AreEqual(batchName, this._driver.FindElementById("batch_name").GetAttribute("value").Trim());
            Assert.AreEqual(batchAmount, Convert.ToDouble(this._driver.FindElementById("batch_amount").GetAttribute("value")));

            if (!string.IsNullOrEmpty(batchNameUpdated))
            {
                this._driver.FindElementById("batch_name").SendKeys(batchNameUpdated);
            }

            /* Batch Amount is only seen as label and not edit
            if (batchAmountUpdated != batchAmount)
            {
                this._driver.FindElementById("batch_amount").SendKeys(batchAmountUpdated.ToString());
            }
             */

            // Save the batch
            this._driver.FindElementById(GeneralButtons.submitQuery).Click();

            // Verify the batch was updated
            int rowUpdated = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Batches, batchNameUpdated, "Name", null);
            IWebElement table = this._driver.FindElementByXPath(TableIds.Giving_Batches);

            if (creditCard)
            {
                Assert.AreEqual(batchNameUpdated, table.FindElements(By.TagName("tr"))[rowUpdated].FindElements(By.TagName("td"))[0].Text);
                Assert.AreEqual(String.Format("{0:c}", batchAmount), table.FindElements(By.TagName("tr"))[rowUpdated].FindElements(By.TagName("td"))[3].Text);
                //Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_Batches, batchName, "Name", null));
                Assert.AreEqual(0, this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Batches, batchName, "Name", null, false), string.Format("{0} was found.", batchName));
            }
            else
            {
                //Added Status columns to all areas.                
                Assert.AreEqual(batchNameUpdated, table.FindElements(By.TagName("tr"))[rowUpdated].FindElements(By.TagName("td"))[1].Text);
                Assert.AreEqual(String.Format("{0:c}", batchAmount), table.FindElements(By.TagName("tr"))[rowUpdated].FindElements(By.TagName("td"))[4].Text);
                //Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_Batches, batchName, "Name", null));
                Assert.AreEqual(0, this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Batches, batchName, "Name", null, false), string.Format("{0} was found.", batchName));
            }
        }


        /// <summary>
        /// Deletes a credit card batch
        /// </summary>
        /// <param name="batchName">The name of the batch to be deleted</param>
        public void Giving_Batches_CreditCardBatches_Delete(string batchName)
        {
            // Navigate to giving->batches->credit card batches
            //if (!this._selenium.GetLocation().Contains("/Payment/Batch/CCBatchIndex.aspx")) {
            if (!this._selenium.GetLocation().Contains("/bridge/batches/batch/creditcard"))
            {
                if (this._selenium.IsElementPresent(GeneralLinks.RETURN))
                {
                    //this._selenium.Open("/Payment/Batch/CCBatchIndex.aspx");
                    this._selenium.Open("/bridge/batches/batch/creditcard");
                    //this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
                }
                else
                {
                    this._selenium.Navigate(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                }
            }

            // Delete the batch
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Giving_Batches, batchName, "Name", null);
            this._generalMethods.SelectOptionFromGear(Convert.ToInt32(itemRow), "Delete batch");

            string confirmationMsg = this._selenium.GetConfirmation();
            TestLog.WriteLine(string.Format("Confirmation Message: {0}", confirmationMsg));
            //Regex is messing things up.
            //Assert.IsTrue(Regex.IsMatch(confirmationMsg, string.Format("^Are you sure you want to permanently delete '{0}' credit card batch[\\s\\S]$", batchName)));
            //                                                           Are you sure you want to permanently delete 'Test Credit Card Batch - Delete' credit card batch?
            //System.Web.HttpUtility.HtmlEncode(batchName);
            Assert.Contains(string.Format("Are you sure you want to permanently delete '{0}' credit card batch?", HttpUtility.HtmlEncode(batchName)), confirmationMsg.Trim());

            // Verify the batch was deleted
            Retry.WithPolling(500).WithTimeout(15000).WithFailureMessage("Did not detect the flyout in the specified time.")
                .Until(() => this._selenium.GetText("//div[@id='success_middle']/p").Equals(string.Format("{0} was successfully deleted.", batchName)));

            //this._selenium.WaitForCondition(this._javascript.IsElementPresent("success_middle"), "10000");
            //string script = string.Format("selenium.isTextPresent(\"{0}\");", batchName);
            //this._selenium.WaitForCondition(script, "30000");
            //Assert.AreEqual(string.Format("{0} was successfully deleted.", batchName), this._selenium.GetText("//div[@id='success_middle']/p"));
            //this._selenium.VerifyTextPresent(string.Format("{0} was successfully deleted.", batchName));

            if (this._selenium.IsElementPresent(TableIds.Giving_Batches))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Giving_Batches, batchName, "Name", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("No batches were found");
            }
        }

        /// <summary>
        /// Deletes a credit card batch
        /// </summary>
        /// <param name="batchName">The name of the batch to be deleted</param>
        public void Giving_Batches_CreditCardBatches_Delete_WebDriver(string batchName)
        {
            // Navigate to giving->batches->credit card batches
            //if (!this._selenium.GetLocation().Contains("/Payment/Batch/CCBatchIndex.aspx")) {
            if (!this._generalMethods.GetUrl().Contains("/bridge/batches/batch/creditcard"))
            {
                if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GeneralLinksWebDriver.RETURN)))
                {
                    //this._selenium.Open("/Payment/Batch/CCBatchIndex.aspx");                    
                    this._driver.Navigate().GoToUrl(string.Format("{0}bridge/batches/batch/creditcard", this.GetPortalURL()));

                }
                else
                {
                    this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                }
            }

            // Delete the batch
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Batches, batchName, "Name", null);
            this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt32(itemRow), "Delete batch");

            string confirmationMsg = this._driver.SwitchTo().Alert().Text;

            TestLog.WriteLine(string.Format("Confirmation Message: {0}", confirmationMsg));
            //Regex is messing things up.
            //Assert.IsTrue(Regex.IsMatch(confirmationMsg, string.Format("^Are you sure you want to permanently delete '{0}' credit card batch[\\s\\S]$", batchName)));
            //                                                           Are you sure you want to permanently delete 'Test Credit Card Batch - Delete' credit card batch?
            //System.Web.HttpUtility.HtmlEncode(batchName);
            Assert.Contains(string.Format("Are you sure you want to permanently delete '{0}' credit card batch?", HttpUtility.HtmlEncode(batchName)), confirmationMsg.Trim());


            //Click OK
            this._driver.SwitchTo().Alert().Accept();

            // Verify the batch was deleted
            //Retry.WithPolling(1000).WithTimeout(20000).WithFailureMessage("Did not detect the flyout in the specified time.")
            //    .Until(() => this._driver.FindElementByXPath("//div[@id='success_middle']/p").Text.Equals(string.Format("{0} was successfully deleted.", batchName)));

            //Retry.WithPolling(1000).WithTimeout(20000).WithFailureMessage("Did not detect the flyout in the specified time.")
            //    .Until(() => this._driver.FindElementById("success_middle").Text.Equals(string.Format("{0} was successfully deleted.", batchName)));
            //.Until(() => this._driver.FindElementByXPath("//div[@id='success_middle_messages']/p").Text.Equals(string.Format("{0} was successfully deleted.", batchName)));



            if (this._generalMethods.IsElementPresentWebDriver(By.XPath(TableIds.Giving_Batches)))
            {
                Assert.AreEqual(0, this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Batches, batchName, "Name", null, false), string.Format("{0} was found", batchName));
            }
            else
            {
                this._generalMethods.VerifyTextPresentWebDriver("No batches were found");
            }
        }

        public void Giving_SearchIndividual(string individual, string address)
        {
            // Search for, select the individual
            if (!string.IsNullOrEmpty(individual))
            {
                this._selenium.Type("SearchName", individual);
                this._selenium.ClickAndWaitForCondition("findIndividualSearch", this._javascript.IsElementPresent("find_individual_results"), "30000");

                System.Threading.Thread.Sleep(3000);

                if (this._selenium.GetText("//table[@id='findIndividualResults']").Contains(string.Format("{0} \n", individual)))
                {
                    this._selenium.ClickAndWaitForPageToLoad("//table[@id='findIndividualResults']/tbody/tr[2]/td/form/button");
                }
                else
                {
                    Assert.Fail();
                }
            }
        }

        public void Giving_SearchIndividual_WebDriver(string individual, string address = "")
        {

            Boolean found = false;
            Boolean amsEnabled = false;
            // Search for, select the individual

            //AMS uses different ID's
            //SearchName and SearchAddress
            amsEnabled = this._sql.IsAMSEnabled(this._churchID);

            if (amsEnabled)
            {
                if (!string.IsNullOrEmpty(individual))
                {
                    this._driver.FindElementById("SearchName").SendKeys(individual);
                }

                if (!string.IsNullOrEmpty(address))
                {
                    this._driver.FindElementById("SearchAddress").SendKeys(address);
                }

                this._driver.FindElementById("findIndividualSearch").Click();
                this._generalMethods.WaitForElement(this._driver, By.Id("selectedIndividualId"), 40);

            }
            else
            {
                if (!string.IsNullOrEmpty(individual))
                {
                    this._driver.FindElementById("find_individual_name").SendKeys(individual);
                }

                if (!string.IsNullOrEmpty(address))
                {
                    this._driver.FindElementById("find_individual_address").SendKeys(address);
                }

                this._driver.FindElementByXPath("//button[@type='submit']").Click();
            }

            //Get Rows Results    
            this._generalMethods.WaitForElement(this._driver, By.Id("find_individual_results"), 30);
            IWebElement table = this._driver.FindElementByXPath("//table[@class='grid select_row']");
            int rows = table.FindElements(By.TagName("tr")).Count;

            for (int r = 1; r < rows; r++)
            {

                TestLog.WriteLine(string.Format("Individual Name: {0}", table.FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[1].Text.Trim()));
                if (table.FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[1].Text.Trim().Contains(individual))
                {

                    if (amsEnabled)
                    {
                        table.FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[0].FindElement(By.XPath("//button[@type='submit']")).Click();
                    }
                    else
                    {
                        table.FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[0].Click();
                    }

                    found = true;
                    break;
                }
            }

            //choose_row
            ////*[@id="find_individual_results"]/div/table/tbody/tr[2]/td[2]
            /*
            if (this._driver.FindElementByXPath("//table[@class='grid select_row']/tbody/tr[2]/td[2]").Text.Contains(string.Format("{0} \n", individual)))
            {
                this._driver.FindElementByXPath("//table[@class='grid select_row']/tbody/tr[2]/td[2]").Click();
            }
            else
            {
                Assert.Fail(string.Format("Did not find individual {0}", individual));
            }
             */

            if (!found)
            {
                Assert.Fail(string.Format("Did not find individual {0}", individual));
            }

        }


        public void Giving_Batches_CreditCardBatches_AddContributions(string batchName, string individual, string ccType, string ccNumber, string ccExpMonth,
            string ccExpYear, string amount, string fund, string subFund, string pledgeDrive)
        {
            // Navigate to giving->batches->credit card batches and resume progress if necessary
            if (!this._selenium.GetLocation().Contains("/Payment/BatchContribution/New.aspx") || (this._selenium.GetText("//h2[@class='gutter_bottom_none']") != batchName))
            {
                if (this._selenium.IsElementPresent(GeneralLinks.RETURN))
                {
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
                }
                else
                {
                    this._selenium.Navigate(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                }
                this.Giving_Batches_CreditCardBatches_ResumeProgress(batchName);
            }

            // Search for, select the individual
            this.Giving_SearchIndividual(individual, null);

            // Populate the fields
            if (!string.IsNullOrEmpty(ccType))
            {
                this._selenium.Select("card_type", ccType);
            }

            if (!string.IsNullOrEmpty(ccNumber))
            {
                this._selenium.Type("card_number", ccNumber);

                if (!this.IsValidCardType(ccNumber.Replace("-", ""), ccType) && !this.IsValidCardType(ccNumber.Replace(" ", ""), ccType))
                {
                    this._errorText.Add("The credit card number entered does not match the type selected.");
                }
            }

            if (!string.IsNullOrEmpty(ccExpMonth))
            {
                this._selenium.Select("card_expiration_month", ccExpMonth);
            }
            if (!string.IsNullOrEmpty(ccExpYear))
            {
                this._selenium.Select("card_expiration_year", ccExpYear);
            }

            int currentMonth = Convert.ToInt16(string.Format("{0:MM}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
            int currentYear = Convert.ToInt16(string.Format("{0:yyyy}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
            int selectedMonth = Convert.ToInt16(this._selenium.GetSelectedValue("card_expiration_month"));
            int selectedYear = Convert.ToInt16(this._selenium.GetSelectedValue("card_expiration_year"));
            if (selectedMonth < currentMonth && selectedYear <= currentYear || selectedYear < currentYear)
            {
                this._errorText.Add("The card you have entered is expired.");
            }

            if (!string.IsNullOrEmpty(amount))
            {
                this._selenium.Focus("amount_1");
                this._selenium.Type("amount_1", amount);
                //this._selenium.TypeKeys("amount_1", amount);
                this._selenium.KeyPress("amount_1", "\\9");

                if (amount == "0")
                {
                    this._errorText.Add("The amount of the 1st contribution cannot be zero.");
                }
            }

            if (!string.IsNullOrEmpty(fund) && !string.IsNullOrEmpty(subFund))
            {
                this._selenium.SelectAndWaitForCondition("ddlFund_1", fund, this._javascript.OptionExistsInSelect("ddlSubfund_1", subFund), "10000");
            }
            else
            {
                this._selenium.Select("ddlFund_1", fund);
            }

            if (!string.IsNullOrEmpty(subFund) && !string.IsNullOrEmpty(pledgeDrive))
            {
                this._selenium.SelectAndWaitForCondition("ddlSubfund_1", subFund, this._javascript.OptionExistsInSelect("ddlPledgedrive_1", pledgeDrive), "10000");
            }
            else if (!string.IsNullOrEmpty(subFund))
            {
                this._selenium.Select("ddlSubfund_1", subFund);
            }

            if (!string.IsNullOrEmpty(pledgeDrive))
            {
                this._selenium.Select("ddlPledgedrive_1", pledgeDrive);
            }
            this._selenium.ClickAndWaitForPageToLoad("//input[@value='Save to batch']");

            // Verify the correct error(s) is/are present
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
            //TODO Check for Errors if so fail test with error

        }


        public void Giving_Batches_CreditCardBatches_AddContributions_WebDriver(string batchName, string individual, string ccType, string ccNumber, string ccExpMonth,
            string ccExpYear, string amount, string fund, string subFund, string pledgeDrive)
        {

            Boolean amsEnabled = this._sql.IsAMSEnabled(this._churchID);

            // Navigate to giving->batches->credit card batches and resume progress if necessary
            if (!this._generalMethods.GetUrl().Contains("/Payment/BatchContribution/New.aspx") || (this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text != batchName))
            {
                if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GeneralLinksWebDriver.RETURN)))
                {
                    this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                }
                else
                {
                    this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                }

                this.Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(batchName);
            }

            // Search for, select the individual
            this.Giving_SearchIndividual_WebDriver(individual, null);

            // Populate the fields
            if (!string.IsNullOrEmpty(ccType))
            {
                if (amsEnabled)
                {
                    new SelectElement(this._driver.FindElementById("payment_type_id")).SelectByText(ccType);
                }
                else
                {
                    new SelectElement(this._driver.FindElementById("card_type")).SelectByText(ccType);
                }
            }

            if (!string.IsNullOrEmpty(ccNumber))
            {
                if (amsEnabled)
                {
                    this._driver.FindElementById("account_number").SendKeys(ccNumber);
                }
                else
                {
                    this._driver.FindElementById("card_number").SendKeys(ccNumber);
                }

                if (!this.IsValidCardType(ccNumber.Replace("-", ""), ccType) && !this.IsValidCardType(ccNumber.Replace(" ", ""), ccType))
                {
                    this._errorText.Add("The credit card number entered does not match the type selected.");
                }
            }

            if (!string.IsNullOrEmpty(ccExpMonth))
            {
                if (amsEnabled)
                {
                    new SelectElement(this._driver.FindElementById("expiration_month")).SelectByText(ccExpMonth);
                }
                else
                {
                    new SelectElement(this._driver.FindElementById("card_expiration_month")).SelectByText(ccExpMonth);
                }
            }

            if (!string.IsNullOrEmpty(ccExpYear))
            {
                if (amsEnabled)
                {
                    new SelectElement(this._driver.FindElementById("expiration_year")).SelectByText(ccExpYear);
                }
                else
                {
                    new SelectElement(this._driver.FindElementById("card_expiration_year")).SelectByText(ccExpYear);
                }
            }

            int currentMonth = Convert.ToInt16(string.Format("{0:MM}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
            int currentYear = Convert.ToInt16(string.Format("{0:yyyy}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
            int selectedMonth;
            int selectedYear;

            if (amsEnabled)
            {
                selectedMonth = Convert.ToInt16(new SelectElement(this._driver.FindElementById("expiration_month")).SelectedOption.Text);
            }
            else
            {
                selectedMonth = Convert.ToInt16(new SelectElement(this._driver.FindElementById("card_expiration_month")).SelectedOption.Text);
            }

            if (amsEnabled)
            {
                selectedYear = Convert.ToInt16(new SelectElement(this._driver.FindElementById("expiration_year")).SelectedOption.Text);
            }
            else
            {
                selectedYear = Convert.ToInt16(new SelectElement(this._driver.FindElementById("card_expiration_year")).SelectedOption.Text);
            }

            if (selectedMonth < currentMonth && selectedYear <= currentYear || selectedYear < currentYear)
            {
                this._errorText.Add("The card you have entered is expired.");
            }

            if (!string.IsNullOrEmpty(amount))
            {

                this._driver.FindElementById("amount_1").SendKeys(amount);
                this._driver.FindElementById("amount_1").SendKeys(Keys.Tab);

                if (amount == "0")
                {
                    this._errorText.Add("The amount of the 1st contribution cannot be zero.");
                }
            }

            if (!string.IsNullOrEmpty(fund) && !string.IsNullOrEmpty(subFund))
            {
                new SelectElement(this._driver.FindElementById("ddlFund_1")).SelectByText(fund);
                this._generalMethods.WaitForElement(this._driver, By.Id("ddlSubfund_1"), 20);
            }
            else
            {
                new SelectElement(this._driver.FindElementById("ddlFund_1")).SelectByText(fund);
            }

            if (!string.IsNullOrEmpty(subFund) && !string.IsNullOrEmpty(pledgeDrive))
            {
                //this._selenium.SelectAndWaitForCondition("ddlSubfund_1", subFund, this._javascript.OptionExistsInSelect("ddlPledgedrive_1", pledgeDrive), "10000");
                new SelectElement(this._driver.FindElementById("ddlSubfund_1")).SelectByText(subFund);
                this._generalMethods.WaitForElement(this._driver, By.Id("ddlPledgedrive_1"), 20);
            }
            else if (!string.IsNullOrEmpty(subFund))
            {
                new SelectElement(this._driver.FindElementById("ddlSubfund_1")).SelectByText(subFund);
            }

            if (!string.IsNullOrEmpty(pledgeDrive))
            {
                new SelectElement(this._driver.FindElementById("ddlPledgedrive_1")).SelectByText(pledgeDrive);
            }


            string total = this._driver.FindElementById("fund_total").Text;
            TestLog.WriteLine("Total Added {0}", total);

            this._driver.FindElementByXPath("//input[@value='Save to batch']").Click();

            // Verify the correct error(s) is/are present
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessagesWebDriver(this._errorText);
            }
            //TODO Check for Errors if so fail test with error

        }

        /// <summary>
        /// Edits the amount of a credit card batch.
        /// </summary>
        /// <param name="batchName">The name of the batch</param>
        /// <param name="batchAmount">The new amount of the batch</param>
        /// <param name="comment">The optional comment for why the batch amount is being changed</param>
        public void Giving_Batches_CreditCardBatches_EditBatchAmount(string batchName, int? batchAmount, string comment)
        {
            // Resume progress
            this.Giving_Batches_CreditCardBatches_ResumeProgress(batchName);

            // View the edit batch amount page
            this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Payment/BatchContribution/EditBatchAmount.aspx?ID=')]");

            // Update the batch amount
            if (batchAmount.HasValue)
            {
                this._selenium.Type("batch_amount_new", batchAmount.ToString());
            }
            else
            {
                this._selenium.Type("batch_amount_new", "");
                this._errorText.Add("Batch amount is required.");
            }

            if (!string.IsNullOrEmpty(comment))
            {
                this._selenium.Type("batch_amount_comment", comment);

                if (comment.Length > 300)
                {
                    this._errorText.Add(string.Format("Note cannot exceed 300 characters, it is currently {0} characters.", comment.Length));
                }
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
        }

        /// <summary>
        /// Edits the amount of a credit card batch.
        /// </summary>
        /// <param name="batchName">The name of the batch</param>
        /// <param name="batchAmount">The new amount of the batch</param>
        /// <param name="comment">The optional comment for why the batch amount is being changed</param>
        public void Giving_Batches_CreditCardBatches_EditBatchAmount_WebDriver(string batchName, int? batchAmount, string comment)
        {

            //Click on RETURN to go to list page
            this._driver.FindElementByXPath("//a[@class='minimal_return_arrow']").Click();
            // Resume progress
            this.Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(batchName);

            // View the edit batch amount page
            this._driver.FindElementByXPath("//a[contains(@href, '/Payment/BatchContribution/EditBatchAmount.aspx?ID=')]").Click();

            // Update the batch amount
            if (batchAmount.HasValue)
            {
                this._driver.FindElementById("batch_amount_new").SendKeys(batchAmount.ToString());
            }
            else
            {
                this._driver.FindElementById("batch_amount_new").Clear();
                this._errorText.Add("Batch amount is required.");
            }

            if (!string.IsNullOrEmpty(comment))
            {
                this._driver.FindElementById("batch_amount_comment").SendKeys(comment);

                if (comment.Length > 300)
                {
                    this._errorText.Add(string.Format("Note cannot exceed 300 characters, it is currently {0} characters.", comment.Length));
                }
            }

            this._driver.FindElementById(GeneralButtons.submitQuery).Click();

            if (this._errorText.Count > 0)
            {
                this._generalMethods.WaitForElement(this._driver, By.Id("error_message"), 10, string.Format("Expecting {0} error message(s).", this._errorText.Count));
                this._generalMethods.VerifyErrorMessagesWebDriver(this._errorText);
            }
        }

        /// <summary>
        /// Attempts to authorize a credit card batch
        /// </summary>
        /// <param name="batchName">Name of the batch</param>
        /// <param name="responseCode">Expected response code after authorization attempt</param>
        public void Giving_Batches_CreditCardBatches_Authorize(string batchName, string responseCode)
        {
            // Navigate to giving->batches->credit card batches and resume progress if necessary
            if (!this._selenium.GetLocation().Contains("/Payment/BatchContribution/New.aspx?batchID=") || (this._selenium.GetText("//h2[@class='gutter_bottom_none']") != batchName))
            {
                if (this._selenium.IsElementPresent(GeneralLinks.RETURN))
                {
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
                }
                else
                {
                    this._selenium.Navigate(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                }
                this.Giving_Batches_CreditCardBatches_ResumeProgress(batchName);
            }

            //Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Submit Authorize not present")
            //        .Until(() => this._selenium.IsElementPresent("//input[@type='submit' and @value='Authorize']"));

            // Authorize the batch
            this._selenium.ClickAndWaitForPageToLoad("//input[@type='submit' and @value='Authorize']");

            // Verify the information on the page
            this._selenium.VerifyTitle("Fellowship One :: Batch Authorization");
            this._selenium.VerifyTextPresent("Batch Authorization");

            Assert.AreEqual(batchName, this._selenium.GetText("//h2[@class='gutter_bottom_none']"));
            Assert.AreEqual(string.Format("Created on {0:d}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))), this._selenium.GetText("//div[@class='float_left gutter_bottom']/small"));

            // Wait until the authorization attempt is complete
            this._selenium.WaitForCondition("selenium.isVisible('settle_batch_button')", "60000");

            this._selenium.Click("//a[@class='show_more_arrow']");
            if (!string.IsNullOrEmpty(responseCode))
            {
                if (responseCode == "150")
                {
                    Assert.AreEqual(string.Format("Error: General system failure. \n (code: {0})", responseCode), this._selenium.GetText("//td[@class='align_center align_middle border_left border_right']/small"));
                }
                Assert.AreEqual(string.Format("(code: {0})", responseCode), this._selenium.GetText("//td[@class='align_center align_middle border_left border_right']/small/span"));
            }
            else
            {
                Assert.AreEqual("The transaction was successful. \n (code: 100)", this._selenium.GetText("//td[@class='align_center align_middle border_left border_right']/small"));
            }

            // Verify that the settlement button is disabled if the response code is not '100'
            if (this._selenium.GetText("//td[@class='align_center align_middle border_left border_right']/small/span") != "(code: 100)")
            {
                this._selenium.WaitForCondition("selenium.browserbot.getCurrentWindow().document.getElementById('batch_end_state')", "15000");
                this._selenium.VerifyElementPresent("//input[@id='settle_batch_button' and @disabled]");
            }
        }

        /// <summary>
        /// Attempts to authorize a credit card batch
        /// </summary>
        /// <param name="batchName">Name of the batch</param>
        /// <param name="responseCode">Expected response code after authorization attempt</param>
        public void Giving_Batches_CreditCardBatches_Authorize_WebDriver(string batchName, string responseCode)
        {

            Boolean amsEnabled = this._sql.IsAMSEnabled(this._churchID);
            TestLog.WriteLine("AMS Status : {0}", amsEnabled);


            //This path is for AMS disabled so commenting here moving to If condition
            // Navigate to giving->batches->credit card batches and resume progress if necessary
            /* if (!this._generalMethods.GetUrl().Contains("/Payment/BatchContribution/New.aspx?batchID=") || (this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text != batchName))
             {
                 if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GeneralLinksWebDriver.RETURN)))
                 {
                     this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                 }
                 else
                 {
                     this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                 }

                 this.Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(batchName);

             } */

            //Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Submit Authorize not present")
            //        .Until(() => this._selenium.IsElementPresent("//input[@type='submit' and @value='Authorize']"));

            // Authorize the batch when AMS disabled for church
            //Suchitra change - changfe this condition since the control executing this statement even when AMS enabled... 
            //if( (!amsEnabled) || ((responseCode != null) & (responseCode != "209")) )

            if ((!amsEnabled))
            {//AMS DISABLED

                //Moved the get Url logic to here since this path is for AMS DISABLED 
                // Navigate to giving->batches->credit card batches and resume progress if necessary
                if (!this._generalMethods.GetUrl().Contains("/Payment/BatchContribution/New.aspx?batchID=") || (this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text != batchName))
                {
                    if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GeneralLinksWebDriver.RETURN)))
                    {
                        this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                    }
                    else
                    {
                        this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                    }

                    this.Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(batchName);

                }

                this._driver.FindElementByXPath("//input[@type='submit' and @value='Authorize']").Click();
                this._generalMethods.WaitForElement(this._driver, By.XPath("//h2[@class='gutter_bottom_none']"));

                // Verify the information on the page
                Assert.AreEqual("Fellowship One :: Batch Authorization", this._driver.Title);
                this._generalMethods.VerifyTextPresentWebDriver("Batch Authorization");

                Assert.AreEqual(batchName, this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text);
                Assert.Contains(this._driver.FindElementByXPath("//div[@class='float_left gutter_bottom']/small").Text, TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).ToShortDateString());  //"M/dd/yyyy"


                // Wait until the authorization attempt is complete
                //settle_batch_button
                //batch_end_state
                //this._selenium.WaitForCondition("selenium.isVisible('settle_batch_button')", "60000");
                //this._generalMethods.WaitForElement(this._driver, By.Id("settle_batch_button"), 60, "Authorization attempt timed out");
                //this._generalMethods.WaitForElement(this._driver, By.Id("batch_end_state"), 60, "Authorization attempt timed out");
                WebDriverWait wait = new WebDriverWait(this._driver, TimeSpan.FromSeconds(600));
                IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("settle_batch_button")));

                // //*[@id="batchTransaction"]/table/tbody/tr[2]/td[2]/a
                //this._driver.FindElementByCssSelector("[class='show_more_arrow']").Click();
                //this._generalMethods.WaitForElementEnabled(By.XPath("//a[@class='show_more_arrow']"));
                this._driver.FindElementByXPath("//a[@class='show_more_arrow']").Click();

                if (!string.IsNullOrEmpty(responseCode))
                {
                    if (responseCode == "150")
                    {
                        Assert.AreEqual(string.Format("Error: General system failure.\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                    }

                    //Assert.AreEqual(string.Format("(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                    Assert.Contains(this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text, string.Format("(code: {0})", responseCode));
                }
                else
                {
                    Assert.AreEqual(string.Format("The transaction was successful.\r\n(code: 100)"), HttpUtility.HtmlEncode(this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text.Trim()));
                }

                // Verify that the settlement button is disabled if the response code is not '100'
                //if (this._driver.FindElementByXPath("//td[@class='align_center align_middle border_left border_right']/small/span").Text != "(code: 100)")
                if (!(this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text.Contains("(code: 100)")))
                {
                    WebDriverWait waitBatch = new WebDriverWait(this._driver, TimeSpan.FromSeconds(20));
                    IWebElement elementBatch = waitBatch.Until(ExpectedConditions.ElementIsVisible(By.Id("batch_end_state")));
                    this._generalMethods.VerifyElementPresentWebDriver(By.XPath("//input[@id='settle_batch_button' and @disabled]"));
                }

            }//END of AMS DISABLED
            else
            {
                //AMS Enabled

                //Get AMS Enabled Url for batch Settlement
                if (!this._generalMethods.GetUrl().Contains("/bridge/batches/creditcard/contributions?batchid=") || (this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text != batchName))
                {
                    if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GeneralLinksWebDriver.RETURN)))
                    {
                        this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                    }
                    else
                    {
                        this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                    }

                    this.Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(batchName);
                }


                TestLog.WriteLine("AMS Enabled ... skipping authorization and settling");
                this._driver.FindElementById("submitQuery").Click();
                this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@class='extra_info']"));
                this._generalMethods.WaitForElement(this._driver, By.Id("batchStateTitle"));

                // Verify the information on the page                
                Assert.AreEqual("Fellowship One :: Batch Settlement", this._driver.Title, "Title Mismatch");
                this._generalMethods.VerifyTextPresentWebDriver("Batch Settlement");

                // Get the current date
                DateTime now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
                Assert.AreEqual(batchName, this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text);
                Assert.AreEqual(string.Format("Created on {0}", now.ToString("M/d/yyyy")), this._driver.FindElementByXPath("//div[@class='float_left gutter_bottom']/small").Text);



                //this._generalMethods.
                this._driver.FindElementByXPath("//a[@class='show_more_arrow']").Click();

                //Retry.WithPolling(500).WithTimeout(20000).Until(() => this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']");
                WebDriverWait wait = new WebDriverWait(this._driver, TimeSpan.FromSeconds(600));
                //IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.CssSelector("[class='align_center align_middle border_left border_right']")));
                IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("batchStateTitle")));

                // Added logic to handle  all error codes for AMS Enabled
                /*    if (!string.IsNullOrEmpty(responseCode))
                    {
                        if (responseCode == "150")
                        {
                            Assert.AreEqual(string.Format("Error: General system failure.\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                        }

                        //Assert.AreEqual(string.Format("(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                        Assert.Contains(this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text, string.Format("(code: {0})", responseCode));
                    }
                    else
                    {
                        Assert.AreEqual(string.Format("The transaction was successful.\r\n(code: 100)"), HttpUtility.HtmlEncode(this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text.Trim()));
                    }

                // Verify that the settlement button is disabled if the response code is not '100'
                    if (this._selenium.GetText("//td[@class='align_center align_middle border_left border_right']/small/span") != "(code: 100)")
                    {
                        this._selenium.WaitForCondition("selenium.browserbot.getCurrentWindow().document.getElementById('batch_end_state')", "15000");
                        this._selenium.VerifyElementPresent("//input[@id='settle_batch_button' and @disabled]");
                    }  */

                if (!string.IsNullOrEmpty(responseCode))
                {
                    switch (responseCode)
                    {
                        case "230":
                            //Assert.AreEqual(string.Format("The authorization request was approved by the issuing bank but declined by CyberSource because it did not pass the card verification (CV) check. \n (code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                            Assert.AreEqual(string.Format("The authorization request was approved by the issuing bank but declined by\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                            break;

                        case "233":
                            Assert.AreEqual(string.Format("General decline by the processor.\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                            break;

                        case "204":
                            Assert.AreEqual(string.Format("Insufficient funds in the account.\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                            break;

                        case "231":
                            Assert.AreEqual(string.Format("Invalid account number.\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                            break;

                        case "211":
                            Assert.AreEqual(string.Format("Invalid card verification number.\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                            break;

                        case "100":
                            Assert.AreEqual(string.Format("Successful transaction\r\n(code: {0})", responseCode), this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text);
                            break;

                        default:
                            throw new WebDriverException("Unknown Error Code");


                    }
                    //commenting this line since after switch execution this line is executing
                    //       Assert.AreEqual("This batch is incomplete.", this._driver.FindElementById("batchStateTitle").Text, "Text: 'This batch is incomplete' is not preset");

                }
                else
                {
                    this._generalMethods.WaitForElement(By.LinkText("View all batches"));
                    Assert.AreEqual(string.Format("Successful transaction\r\n(code: 100)"), HttpUtility.HtmlEncode(this._driver.FindElementByCssSelector("[class='align_center align_middle border_left border_right']").Text.Trim()));
                }

            }

        }

        public void Giving_Batches_CreditCardBatches_EditFailedAuthorization(string batchName, string firstName, string lastName, string cardType, string cardNumber, string expMonth, string expYear,
            string country, string address1, string address2, string city, string state, string zip)
        {
            // Resume progress if not on the authorization page
            if (!this._selenium.GetLocation().Contains("/Payment/Batch/Authorization.aspx?batchID="))
            {
                this.Giving_Batches_CreditCardBatches_ResumeProgress(batchName);
            }

            // Edit the failed authorization
            this._selenium.ClickAndWaitForPageToLoad("link=Edit");

            if (!string.IsNullOrEmpty(firstName))
            {

            }
            if (!string.IsNullOrEmpty(lastName))
            {

            }
            if (!string.IsNullOrEmpty(cardType))
            {
                this._selenium.Select("card_type", cardType);
            }
            else
            {
                cardType = this._selenium.GetSelectedValue("card_type");
            }

            if (!string.IsNullOrEmpty(cardNumber))
            {
                this._selenium.Type("card_number", cardNumber);

                if (!this.IsValidCardType(cardNumber.Replace("-", ""), cardType) && !this.IsValidCardType(cardNumber.Replace(" ", ""), cardType))
                {
                    this._errorText.Add("The credit card number entered does not match the type selected.");
                }
            }
            if (!string.IsNullOrEmpty(expMonth))
            {
                this._selenium.Select("card_expiration_month", expMonth);
            }
            if (!string.IsNullOrEmpty(expYear))
            {
                this._selenium.Select("card_expiration_year", expYear);
            }

            int currentMonth = Convert.ToInt16(string.Format("{0:MM}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
            int currentYear = Convert.ToInt16(string.Format("{0:yyyy}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
            int selectedMonth = Convert.ToInt16(this._selenium.GetSelectedValue("card_expiration_month"));
            int selectedYear = Convert.ToInt16(this._selenium.GetSelectedValue("card_expiration_year"));
            if (selectedMonth < currentMonth && selectedYear <= currentYear || selectedYear < currentYear)
            {
                this._errorText.Add("The card you have entered is expired.");
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
        }

        public void Giving_Batches_CreditCardBatches_EditFailedAuthorization_WebDriver(string batchName, string firstName, string lastName,
                                                                       string cardType, string cardNumber, string expMonth, string expYear,
                                                                       string country, string address1, string address2, string city, string state, string zip)
        {
            Boolean amsEnabled = this._sql.IsAMSEnabled(this._churchID);

            if ((!amsEnabled))
            {

                // Resume progress if not on the authorization page

                if (!this._generalMethods.GetUrl().Contains("/Payment/Batch/Authorization.aspx?batchID="))
                {
                    if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GeneralLinksWebDriver.RETURN)))
                    {
                        this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                    }

                    // Commenting this line since control is clicking on wrong "Edit" button
                    this.Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(batchName);
                }


                // Edit the failed authorization
                this._driver.FindElementByLinkText("Edit").Click();

                if (!string.IsNullOrEmpty(firstName))
                {

                }
                if (!string.IsNullOrEmpty(lastName))
                {

                }
                if (!string.IsNullOrEmpty(cardType))
                {
                    new SelectElement(this._driver.FindElementById("card_type")).SelectByText(cardType);
                }
                else
                {
                    cardType = new SelectElement(this._driver.FindElementById("card_type")).SelectedOption.Text;
                }

                if (!string.IsNullOrEmpty(cardNumber))
                {

                    this._driver.FindElementById("card_number").Clear();
                    this._driver.FindElementById("card_number").SendKeys(cardNumber);

                    if (!this.IsValidCardType(cardNumber.Replace("-", ""), cardType) && !this.IsValidCardType(cardNumber.Replace(" ", ""), cardType))
                    {
                        this._errorText.Add("The credit card number entered does not match the type selected.");
                    }
                }
                if (!string.IsNullOrEmpty(expMonth))
                {
                    new SelectElement(this._driver.FindElementById("card_expiration_month")).SelectByText(expMonth);
                }
                if (!string.IsNullOrEmpty(expYear))
                {
                    new SelectElement(this._driver.FindElementById("card_expiration_year")).SelectByText(expYear);
                }

                int currentMonth = Convert.ToInt16(string.Format("{0:MM}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
                int currentYear = Convert.ToInt16(string.Format("{0:yyyy}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
                int selectedMonth = Convert.ToInt16(new SelectElement(this._driver.FindElementById("card_expiration_month")).SelectedOption.Text);
                int selectedYear = Convert.ToInt16(new SelectElement(this._driver.FindElementById("card_expiration_year")).SelectedOption.Text);
                if (selectedMonth < currentMonth && selectedYear <= currentYear || selectedYear < currentYear)
                {
                    this._errorText.Add("The card you have entered is expired.");
                }

                this._driver.FindElementById(GeneralButtons.submitQuery).Click();

                if (this._errorText.Count > 0)
                {
                    this._generalMethods.VerifyErrorMessagesWebDriver(this._errorText);
                }
            }
            else
            {
                //AMS Enabled

                // Edit the failed authorization
                this._driver.FindElementByLinkText("Edit").Click();

                if (!string.IsNullOrEmpty(firstName))
                {

                }
                if (!string.IsNullOrEmpty(lastName))
                {

                }
                if (!string.IsNullOrEmpty(cardType))
                {
                    new SelectElement(this._driver.FindElementById("payment_type_id")).SelectByText(cardType);
                }
                else
                {
                    cardType = new SelectElement(this._driver.FindElementById("payment_type_id")).SelectedOption.Text;
                }

                if (!string.IsNullOrEmpty(cardNumber))
                {

                    this._driver.FindElementById("account_number").Clear();
                    this._driver.FindElementById("account_number").SendKeys(cardNumber);

                    if (!this.IsValidCardType(cardNumber.Replace("-", ""), cardType) && !this.IsValidCardType(cardNumber.Replace(" ", ""), cardType))
                    {
                        this._errorText.Add("The credit card number entered does not match the type selected.");
                    }
                }
                if (!string.IsNullOrEmpty(expMonth))
                {
                    new SelectElement(this._driver.FindElementById("expiration_month")).SelectByText(expMonth);
                }
                if (!string.IsNullOrEmpty(expYear))
                {
                    new SelectElement(this._driver.FindElementById("expiration_year")).SelectByText(expYear);
                }

                int currentMonth = Convert.ToInt16(string.Format("{0:MM}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
                int currentYear = Convert.ToInt16(string.Format("{0:yyyy}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"))));
                int selectedMonth = Convert.ToInt16(new SelectElement(this._driver.FindElementById("expiration_month")).SelectedOption.Text);
                int selectedYear = Convert.ToInt16(new SelectElement(this._driver.FindElementById("expiration_year")).SelectedOption.Text);
                if (selectedMonth < currentMonth && selectedYear <= currentYear || selectedYear < currentYear)
                {
                    this._errorText.Add("The card you have entered is expired.");
                }

                this._driver.FindElementById(GeneralButtons.submitQuery).Click();

                if (this._errorText.Count > 0)
                {
                    this._generalMethods.WaitForElement(this._driver, By.Id("error_message"), 10, string.Format("Expecting {0} error message(s).", this._errorText.Count));
                    this._generalMethods.VerifyErrorMessagesWebDriver(this._errorText);
                    //Assert.AreEqual("The credit card number entered does not match the type selected.", this._driver.FindElementById("error_message").Text);

                }
            }
        }

        /// <summary>
        /// Settles a credit card batch
        /// </summary>
        /// <param name="batchName">The name of the batch to be settled</param>
        public void Giving_Batches_CreditCardBatches_Settle(string batchName)
        {
            // Navigate to giving->batches->credit card batches and resume progress if necessary
            if (!this._selenium.GetLocation().Contains("/Payment/Batch/Authorization.aspx?batchID=") || (this._selenium.GetText("//h2[@class='gutter_bottom_none']") != batchName))
            {
                if (this._selenium.IsElementPresent(GeneralLinks.RETURN))
                {
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
                }
                else
                {
                    this._selenium.Navigate(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                }

                // Resume progress
                this.Giving_Batches_CreditCardBatches_ResumeProgress(batchName);
            }

            // Settle the batch
            this._selenium.ClickAndWaitForPageToLoad("settle_batch_button");

            // Verify the information on the page
            this._selenium.VerifyTitle("Fellowship One :: Batch Settlement");
            this._selenium.VerifyTextPresent("Batch Settlement");

            // Get the current date
            Assert.AreEqual(batchName, this._selenium.GetText("//h2[@class='gutter_bottom_none']"));
            Assert.AreEqual("Created on " + TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).ToShortDateString(), this._selenium.GetText("//div[@class='float_left gutter_bottom']/small"));  //"M/dd/yyyy"

            // Wait until the settlement attempt is complete
            this._selenium.WaitForCondition("selenium.browserbot.getCurrentWindow().document.getElementsByClassName('show_more_arrow').length", "20000");
        }

        /// <summary>
        /// Settles a credit card batch
        /// </summary>
        /// <param name="batchName">The name of the batch to be settled</param>
        /// <param name="amsAuthorize">AMS Authorize step</param>
        /// <param name="amsSettle">AMS Settle step</param>
        public void Giving_Batches_CreditCardBatches_Settle_WebDriver(string batchName, Boolean amsAuthorize = false, Boolean amsSettle = false)
        {

            //if (this._sql.IsAMSEnabled(this._churchID) & (!amsAuthorize) & (!amsSettle))
            if (this._sql.IsAMSEnabled(this._churchID))
            {
                //No need to authorize when going through Portal.
                //Need to authorize when going through SQL
                // this._generalMethods.WaitForElementDisplayed(By.Id("submitQuery"));
                if (this._generalMethods.IsElementPresentWebDriver(By.Id("submitQuery")))
                {
                    this._driver.FindElementById("submitQuery").Click();
                }

            }
            else
            {
                // Navigate to giving->batches->credit card batches and resume progress if necessary
                if (!this._driver.Url.Contains("/Payment/Batch/Authorization.aspx?batchID=") || (this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text != batchName))
                {
                    if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GeneralLinksWebDriver.RETURN)))
                    {
                        this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                    }
                    else
                    {
                        this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_CreditCardBatches);
                    }

                    // Resume progress
                    this.Giving_Batches_CreditCardBatches_ResumeProgressWebDriver(batchName);

                }

                //Authorize if AMS
                // if (this._sql.IsAMSEnabled(this._churchID) & amsAuthorize & !amsSettle)
                //{
                //this._driver.FindElementById("button_authorize_submit").Click();
                // this._generalMethods.WaitForElementDisplayed(By.Id("submitQuery"));
                // this._driver.FindElementById("submitQuery").Click();
                //this._generalMethods.WaitForElement(this._driver, By.Id("settle_batch_button"));
                //new WebDriverWait(this._driver, TimeSpan.FromSeconds(5000)).Until(ExpectedConditions.ElementIsVisible(By.Id("settle_batch_button")));

                // }

                // Settle the batch 
                //This action is already performed above.

                WebDriverWait wait = new WebDriverWait(this._driver, TimeSpan.FromSeconds(60));
                IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("batch_end_state")));

                // this._driver.FindElementById("settle_batch_button").Click();
                //this._driver.FindElementById("submitQuery").Click();
                this._generalMethods.WaitForElementDisplayed(By.Id("settle_batch_button"));
                this._driver.FindElementById("settle_batch_button").Click();


                // Commenting this to debug the isue with settled test case
                // WebDriverWait wait = new WebDriverWait(this._driver, TimeSpan.FromSeconds(60));
                // IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.Id("batchStateTitle")));

                this._generalMethods.WaitForElement(this._driver, By.XPath("//h2[@class='gutter_bottom_none']"));
            }

            // Verify the information on the page
            //Assert.IsTrue(this._driver.Title.Equals("Fellowship One :: Batch Settlement"));
            Assert.AreEqual("Fellowship One :: Batch Settlement", this._driver.Title, "Title Mismatch");
            this._generalMethods.VerifyTextPresentWebDriver("Batch Settlement");

            // Get the current date
            DateTime now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            Assert.AreEqual(batchName, this._driver.FindElementByXPath("//h2[@class='gutter_bottom_none']").Text);
            Assert.AreEqual(string.Format("Created on {0}", now.ToString("M/d/yyyy")), this._driver.FindElementByXPath("//div[@class='float_left gutter_bottom']/small").Text);

            // Wait until the settlement attempt is complete
            //this._selenium.WaitForCondition("selenium.browserbot.getCurrentWindow().document.getElementsByClassName('show_more_arrow').length", "15000");
            this._generalMethods.WaitForElement(this._driver, By.ClassName("show_more_arrow"), 20);

            if (this._sql.IsAMSEnabled(this._churchID))
            {
                //If AMS wait for it to process
                //NOTE: Timing out on settled process to show up on search
                Thread.Sleep(TimeSpan.FromSeconds(120));
            }
        }




        /// <summary>
        /// Filters the RDC page to only show certain batches.
        /// </summary>
        /// <param name="filter">The batches you wish to see.</param>
        public void Giving_Batches_RemoteDepositCapture_Filter(GeneralEnumerations.RemoteDepositeCaptureSearchFilters filter)
        {

            // View the RDC Page (Now Imported Batches F1-3376 Consolidated Batches Screen
            //this.Giving_Batches_RemoteDepositCapture_View();
            this.Giving_Batches_ImportedBatches_View();

            switch (filter)
            {
                case GeneralEnumerations.RemoteDepositeCaptureSearchFilters.All:
                    this._selenium.Click("bool_filter_all");
                    break;
                case GeneralEnumerations.RemoteDepositeCaptureSearchFilters.Saved:
                    this._selenium.Click("bool_filter_true");
                    break;
                case GeneralEnumerations.RemoteDepositeCaptureSearchFilters.Pending:
                    this._selenium.Click("bool_filter_false");
                    break;
                default:
                    break;
            }

            // Filter
            TestLog.WriteLine("Filter: " + filter.ToString());
            this._selenium.ClickAndWaitForPageToLoad("//input[@id='RDCFilterButton']");
        }

        /// <summary>
        /// Filters the RDC page to only show certain batches.
        /// </summary>
        /// <param name="filter">The batches you wish to see.</param>
        public void Giving_Batches_RemoteDepositCapture_Filter_WebDriver(GeneralEnumerations.RemoteDepositeCaptureSearchFilters filter)
        {

            // View the RDC Page (Now Imported Batches F1-3376 Consolidated Batches Screen
            //this.Giving_Batches_RemoteDepositCapture_View();
            this.Giving_Batches_ImportedBatches_View_WebDriver();

            switch (filter)
            {
                case GeneralEnumerations.RemoteDepositeCaptureSearchFilters.All:
                    this._driver.FindElementById("bool_filter_all").Click();
                    break;
                case GeneralEnumerations.RemoteDepositeCaptureSearchFilters.Saved:
                    this._driver.FindElementById("bool_filter_true").Click();
                    break;
                case GeneralEnumerations.RemoteDepositeCaptureSearchFilters.Pending:
                    this._driver.FindElementById("bool_filter_false").Click();
                    break;
                default:
                    throw new WebDriverException(string.Format("{0} is unknown", filter));
                //break;
            }

            // Filter
            TestLog.WriteLine("Filter: " + filter.ToString());
            this._driver.FindElementByXPath("//input[@id='RDCFilterButton']").Click();

        }

        /// <summary>
        ///  Views the RDC Page in Portal.
        /// </summary>
        [Obsolete("Use Giving_Batches_ImportedBatches_View", false)]
        public void Giving_Batches_RemoteDepositCapture_View()
        {
            this._selenium.Navigate(Navigation.Giving.Contributions.Batches_RemoteDepositCapture);
        }

        /// <summary>
        /// Views the Imported Batches in Portal
        /// </summary>
        public void Giving_Batches_ImportedBatches_View()
        {
            this._selenium.Navigate(Navigation.Giving.Contributions.Batches_RemoteDepositCapture);
        }

        /// <summary>
        /// Views the Imported Batches in Portal
        /// </summary>
        public void Giving_Batches_ImportedBatches_View_WebDriver()
        {
            this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_RemoteDepositCapture);
        }

        /// <summary>
        /// Views the audit page for a RDC Batch
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        [Obsolete("Use Giving_Batches_ImportedBatches_View_Audit", true)]
        public void Giving_Batches_RemoteDepositCapture_View_Audit(string rdcBatchName)
        {

            this.Giving_Batches_RemoteDepositCapture_View();

            // View the Audit Page
            this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", rdcBatchName));

            // Get the row
            TestLog.WriteLine("Find Row for " + rdcBatchName);
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Giving_RemoteDepositCapture, rdcBatchName, "Name", null); //+1

            // View the matching page
            TestLog.WriteLine("View Pending for " + rdcBatchName);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Giving_Batches, row));

            //Verify we went into the correct pending audit
            TestLog.WriteLine("Verify we are in " + rdcBatchName);
            this._selenium.VerifyTextPresent(rdcBatchName);

            TestLog.WriteLine("Verify we are in Audit " + rdcBatchName);
            this._selenium.VerifyTextPresent("Remote Deposit Capture Audit");

        }

        /// <summary>
        /// F1-3376 Consolidated Batches Screen
        /// Views the audit page for an Imported Batch
        /// </summary>
        /// <param name="rdcBatchName">Imported Batch Name</param>
        public void Giving_Batches_ImportedBatches_View_Audit(string rdcBatchName)
        {

            // View the RDC Page (Now Imported Batches F1-3376 Consolidated Batches Screen
            this.Giving_Batches_ImportedBatches_View();

            // View the Audit Page
            // Get the row
            TestLog.WriteLine("Find Row for " + rdcBatchName);
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Giving_RemoteDepositCapture, rdcBatchName, "Name", null); // +1;

            // View the matching page
            TestLog.WriteLine("View Audit for " + rdcBatchName);
            //User Gears now due to F1-3376 Consolidated Batches Screen
            this._generalMethods.SelectOptionFromGear(Convert.ToInt16(row), "View audit");

            //Verify we went into the correct pending audit
            TestLog.WriteLine("Verify we are in " + rdcBatchName);
            this._selenium.VerifyTextPresent(rdcBatchName);

            TestLog.WriteLine("Verify we are in Audit " + rdcBatchName);
            this._selenium.VerifyTextPresent("Batch Audit");

        }


        /// <summary>
        /// F1-3376 Consolidated Batches Screen
        /// Views the audit page for an Imported Batch
        /// </summary>
        /// <param name="rdcBatchName">Imported Batch Name</param>
        public void Giving_Batches_ImportedBatches_View_Audit_WebDriver(string rdcBatchName)
        {

            // View the RDC Page (Now Imported Batches F1-3376 Consolidated Batches Screen
            this.Giving_Batches_ImportedBatches_View_WebDriver();

            // View the Audit Page
            // Get the row
            TestLog.WriteLine("Find Row for " + rdcBatchName);
            decimal row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_RemoteDepositCapture, rdcBatchName, "Name", null); // +1;

            // View the matching page
            TestLog.WriteLine("View Audit for " + rdcBatchName);
            //User Gears now due to F1-3376 Consolidated Batches Screen
            this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(row), "View audit");

            //Verify we went into the correct pending audit
            TestLog.WriteLine("Verify we are in " + rdcBatchName);
            //this._generalMethods.VerifyTextPresentWebDriver(rdcBatchName);
            Assert.IsTrue(this._driver.FindElementByTagName("html").Text.Contains(rdcBatchName), string.Format("{0} was not found", rdcBatchName));

            TestLog.WriteLine("Verify we are in Audit " + rdcBatchName);
            this._generalMethods.VerifyTextPresentWebDriver("Batch Audit");

        }

        /// <summary>
        /// Views the pending page for a RDC Batch.
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        [Obsolete("Use Giving_Batches_ImportedBatches_View_Pending_WebDriver", true)]
        public void Giving_Batches_RemoteDepositCapture_View_Pending_WebDriver(string rdcBatchName)
        {

            // View the RDC Page
            TestLog.WriteLine("View RDC Page");
            this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_RemoteDepositCapture);

            // Get the row
            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Batches, rdcBatchName, "Name") + 1;

            // View the matching page
            TestLog.WriteLine("View " + rdcBatchName + " Page");
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Giving_Batches, row)).Click();

        }

        /// <summary>
        /// F1-3376 Consolidated Batches Screen
        /// Views the pending page for a Import Batches.
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        public void Giving_Batches_ImportedBatches_View_Pending_WebDriver(string rdcBatchName, Boolean gear = false)
        {

            // View the RDC Page
            TestLog.WriteLine("View Imported Batches Page");
            this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_RemoteDepositCapture);
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Remote Deposit Capture"), 20);

            // Verify user is taken to the pending page
            //Assert.AreEqual("Fellowship One :: Batch Contributions", this._driver.Title, "Title Page is incorrect");
            Assert.AreEqual("Fellowship One :: Remote Deposit Capture Batches", this._driver.Title, "Title Page is incorrect");

            // Get the row
            var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_RemoteDepositCapture, rdcBatchName, "Name", null); // +1;

            // View the matching page
            TestLog.WriteLine("View " + rdcBatchName + " Page");
            if (gear)
            {
                TestLog.WriteLine("View " + rdcBatchName + " Page using gear");
                this._generalMethods.SelectOptionFromGearWebDriver(row, "View/Edit batch");
            }
            else
            {
                TestLog.WriteLine("View " + rdcBatchName + " Page using link");
                this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Giving_RemoteDepositCapture, row + 1)).Click();

            }

            this._generalMethods.WaitForElement(this._driver, By.LinkText("Match"));
            this._generalMethods.VerifyTextPresentWebDriver(rdcBatchName);
            this._generalMethods.VerifyTextPresentWebDriver("Batch - Pending");

        }

        /// <summary>
        /// F1-3376 Consolidated Batches Screen
        /// Views Imported Batches Pending
        /// </summary>
        /// <param name="importBatchName">Imported Batch Name</param>
        /// <param name="gear">Select using Gear. Default is False.</param>
        public void Giving_Batches_ImportedBatches_View_Pending(string importedBatchName, Boolean gear = false)
        {

            // View the RDC Page (Now Imported Batches F1-3376 Consolidated Batches Screen
            TestLog.WriteLine("Go To Imported Batches View");
            this.Giving_Batches_ImportedBatches_View();

            // Get the row
            TestLog.WriteLine("Find Row for " + importedBatchName);
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Giving_RemoteDepositCapture, importedBatchName, "Name", null); //+1

            if (gear)
            {
                // View the matching page by Gear
                TestLog.WriteLine("View Pending for " + importedBatchName + " using gear");
                //Uses Gears now due to F1-3376 Consolidated Batches Screen
                this._generalMethods.SelectOptionFromGear(Convert.ToInt16(row), "View/Edit batch");

            }
            else
            {

                TestLog.WriteLine("View Pending for " + importedBatchName + " using link");
                //Click on batch link
                this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Giving_RemoteDepositCapture, row + 1));

            }

            //Verify we went into the correct pending
            TestLog.WriteLine("Verify we are in " + importedBatchName);
            this._selenium.VerifyTextPresent(importedBatchName);
            this._selenium.VerifyTextPresent("Batch - Pending");


        }

        /// <summary>
        /// Views the pending page for a RDC Batch.
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        /// <param name="gear">Use gear to view pending. Default is false</param>
        [Obsolete("F1-3376 Consolidated Batches Screen: Use Giving_Batches_Imported_Batches_View_Pending", true)]
        public void Giving_Batches_RemoteDepositCapture_View_Pending(string rdcBatchName, Boolean gear = false)
        {
            // View the RDC Page
            this.Giving_Batches_RemoteDepositCapture_View();

            // Get the row
            TestLog.WriteLine("Find Row for " + rdcBatchName);
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Giving_RemoteDepositCapture, rdcBatchName, "Name", null); //+1

            // View the matching page
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Giving_Batches, row));

            //Verify we went into the correct pending
            TestLog.WriteLine("Verify we are in " + rdcBatchName);
            this._selenium.VerifyTextPresent(rdcBatchName);
            this._selenium.VerifyTextPresent("Remote Deposit Capture - Pending");

        }


        /// <summary>
        /// Searches for a batch or set of remote deposit capture batches
        /// </summary>
        /// <param name="name">The name value</param>
        /// <param name="amountFrom">The lower end of the amount range</param>
        /// <param name="amountTo">The upper end of the amount range</param>
        /// <param name="dateFrom">The lower end of the date range</param>
        /// <param name="dateTo">The upper end of the date range</param>
        public void Giving_Batches_RemoteDepositCapture_Search(string name, int? amountFrom, int? amountTo, DateTime? dateFrom, DateTime? dateTo)
        {

            // View the RDC Page (Now Imported Batches F1-3376 Consolidated Batches Screen
            //this.Giving_Batches_RemoteDepositCapture_View();
            this.Giving_Batches_ImportedBatches_View();

            // Search
            this.Giving_Batches_Search(name, amountFrom, amountTo, dateFrom, dateTo);
        }

        /// <summary>
        /// Searches for a batch or set of remote deposit capture batches
        /// </summary>
        /// <param name="name">The name value</param>
        /// <param name="amountFrom">The lower end of the amount range</param>
        /// <param name="amountTo">The upper end of the amount range</param>
        /// <param name="dateFrom">The lower end of the date range</param>
        /// <param name="dateTo">The upper end of the date range</param>
        public void Giving_Batches_RemoteDepositCapture_Search_WebDriver(string name, int? amountFrom, int? amountTo, DateTime? dateFrom, DateTime? dateTo)
        {

            // View the RDC Page (Now Imported Batches F1-3376 Consolidated Batches Screen
            //this.Giving_Batches_RemoteDepositCapture_View();
            this.Giving_Batches_ImportedBatches_View_WebDriver();

            // Search
            this.Giving_Batches_Search_WebDriver(name, amountFrom, amountTo, dateFrom, dateTo);
        }

        /// <summary>
        /// Views the matching page for an RDC Batch Item.
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        /// <param name="rdcBatchItemAmount">The amount of the RDC Batch Item that you wish to view.</param>
        public void Giving_Batches_RemoteDepositCapture_Match_RDCBatchItem_View(string rdcBatchName, string rdcBatchItemAmount, [Optional, DefaultParameterValue(false)] bool processAsSplits)
        {

            // View the RDC Pending Page
            this.Giving_Batches_ImportedBatches_View_Pending(rdcBatchName);

            // If we are processing as splits, click process this batch as splits
            if (processAsSplits)
            {
                this._selenium.ClickAndWaitForPageToLoad("link=Process this batch as splits");
            }
            else
            {

                // Get the row of the RDC batch item
                var row = this._generalMethods.GetTableRowNumber(TableIds.Giving_RDC_RDCBatchItemList, string.Format("${0}", rdcBatchItemAmount), "Amount") + 1;

                // Click on match
                this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Giving_RDC_RDCBatchItemList, row));
            }
        }


        /// <summary>
        /// Views the matching page for an RDC Batch Item.
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        /// <param name="rdcBatchItemAmount">The amount of the RDC Batch Item that you wish to view.</param>
        public void Giving_Batches_RemoteDepositCapture_Match_RDCBatchItem_View_WebDriver(string rdcBatchName, string rdcBatchItemAmount, [Optional, DefaultParameterValue(false)] bool processAsSplits)
        {

            // View the RDC Pending Page
            this.Giving_Batches_ImportedBatches_View_Pending_WebDriver(rdcBatchName);

            // If we are processing as splits, click process this batch as splits
            if (processAsSplits)
            {
                this._driver.FindElementByLinkText("Process this batch as splits").Click();
            }
            else
            {

                // Get the row of the RDC batch item
                var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_RDC_RDCBatchItemList, string.Format("${0}", rdcBatchItemAmount), "Amount") + 1;

                // Click on match
                this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Giving_RDC_RDCBatchItemList, row)).Click();
            }
        }

        /// <summary>
        /// Matches an rdc batch item to an individual.
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        /// <param name="rdcBatchItemAmount">The amount of the RDC Batch Item.</param>
        /// <param name="individualToMatchTo">The individual you wish to match to.</param>
        /// <param name="hasMatches">Specifies if any potential matching occured.</param>
        /// <param name="sharedAccount">Specifies if this RDC Batch Item is tied to one account shared amongst multiple individuals.</param>
        /// <param name="confirmMatch">Specifies if you want to confirm the match and go to the next RDC Batch Item.</param>
        public void Giving_Batches_RemoteDepositCapture_Match_RDCBatchItem(string rdcBatchName, string rdcBatchItemAmount, string individualToMatchTo, bool hasMatches, bool sharedAccount, bool confirmMatch, [Optional, DefaultParameterValue(false)] bool processAsSplits)
        {

            // View the match page for the RDC Batch Item
            this.Giving_Batches_RemoteDepositCapture_Match_RDCBatchItem_View(rdcBatchName, rdcBatchItemAmount, processAsSplits);

            // If it it has matches, select the person from the list of potential matches
            if (hasMatches)
            {
                this._selenium.ClickAndWaitForCondition("//button[@type='submit']", string.Format("selenium.isElementPresent(\"xpath=//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo), "30000");
            }
            else
            {

                if (this._selenium.IsElementPresent("link=Change"))
                {
                    // Click Change
                    this._selenium.Click("link=Change");
                }

                // Search the specific individual name
                this._selenium.Type("find_individual_name", individualToMatchTo);
                if (!processAsSplits)
                {
                    //used to be //button
                    this._selenium.ClickAndWaitForCondition("//input[@value='Search']", string.Format("selenium.isElementPresent(\"xpath=//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo), "30000");
                }
                else
                {
                    this._selenium.ClickAndWaitForCondition("//input[@type='submit']", string.Format("selenium.isElementPresent(\"xpath=//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo), "30000");
                }
            }
            // Specify if this is a shared account
            if (sharedAccount)
            {
                this._selenium.Click("shared_account");
            }

            if (confirmMatch)
            {

            }
        }


        /// <summary>
        /// Matches an rdc batch item to an individual.
        /// </summary>
        /// <param name="rdcBatchName">The name of the RDC batch.</param>
        /// <param name="rdcBatchItemAmount">The amount of the RDC Batch Item.</param>
        /// <param name="individualToMatchTo">The individual you wish to match to.</param>
        /// <param name="hasMatches">Specifies if any potential matching occured.</param>
        /// <param name="sharedAccount">Specifies if this RDC Batch Item is tied to one account shared amongst multiple individuals.</param>
        /// <param name="confirmMatch">Specifies if you want to confirm the match and go to the next RDC Batch Item.</param>
        public void Giving_Batches_RemoteDepositCapture_Match_RDCBatchItem_WebDriver(string rdcBatchName, string rdcBatchItemAmount, string individualToMatchTo, bool hasMatches, bool sharedAccount, bool confirmMatch, [Optional, DefaultParameterValue(false)] bool processAsSplits)
        {

            // View the match page for the RDC Batch Item
            this.Giving_Batches_RemoteDepositCapture_Match_RDCBatchItem_View_WebDriver(rdcBatchName, rdcBatchItemAmount, processAsSplits);

            WebDriverWait wait = new WebDriverWait(this._driver, TimeSpan.FromSeconds(90));

            // If it it has matches, select the person from the list of potential matches
            if (hasMatches)
            {
                //this._driver.ClickAndWaitForCondition("//button[@type='submit']", string.Format("selenium.isElementPresent(\"xpath=//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo), "30000");
                this._driver.FindElementByXPath("//button[@type='submit']").Click();
                //IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath(string.Format("//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo))));
                this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@class='grid select_row']"), 90);
            }
            else
            {

                if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Change")))
                {
                    // Click Change
                    this._driver.FindElementByLinkText("Change").Click();
                }

                // Search the specific individual name
                this._driver.FindElementById("find_individual_name").SendKeys(individualToMatchTo);
                if (!processAsSplits)
                {
                    //used to be //button
                    //this._selenium.ClickAndWaitForCondition("//input[@value='Search']", string.Format("selenium.isElementPresent(\"xpath=//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo), "30000");
                    this._driver.FindElementByXPath("//input[@value='Search']").Click();
                    //IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath(string.Format("//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo))));
                    this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@class='grid select_row']"), 90);

                }
                else
                {
                    //this._selenium.ClickAndWaitForCondition("//input[@type='submit']", string.Format("selenium.isElementPresent(\"xpath=//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo), "30000");
                    this._driver.FindElementByXPath("//input[@type='submit']").Click();
                    //IWebElement element = wait.Until(ExpectedConditions.ElementIsVisible(By.XPath(string.Format("//table[@class='grid select_row']/tbody/tr/td[position()=2 and normalize-space(text())='{0}']\");", individualToMatchTo))));
                    this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@class='grid select_row']"), 90);
                }
            }
            // Specify if this is a shared account
            if (sharedAccount)
            {
                this._driver.FindElementById("shared_account").Click();
            }

            if (confirmMatch)
            {

            }
        }

        #endregion Batches

        #region New Batches Page

        /// <summary>
        /// Verifying batches links based on modules
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        public void Giving_Batches_View(int churchId)
        {
            // Navigate to Giving > Batches page
            this._selenium.Navigate(Navigation.Portal.Giving.Contributions.Batches_General);

            // Verify links
            if (churchId.ToString() == "15")
            {
                this._selenium.VerifyElementPresent("link=All");
                this._selenium.VerifyElementPresent("link=General");
                this._selenium.VerifyElementPresent("link=Credit Card");
                this._selenium.VerifyElementPresent("link=Scanned");
                this._selenium.VerifyElementPresent("link=Remote Deposit Capture");
                this._selenium.ClickAndWaitForPageToLoad("link=All");
                this._selenium.VerifyTextPresent("RDC");

            }
            else if (churchId.ToString() == "255")
            {
                this._selenium.VerifyElementPresent("link=All");
                this._selenium.VerifyElementPresent("link=General");
                this._selenium.VerifyElementPresent("link=Scanned");
                this._selenium.VerifyElementPresent("link=Remote Deposit Capture");
                this._selenium.VerifyElementNotPresent("link=Credit Card");
            }
            else if (churchId.ToString() == "256")
            {
                //Make sure Module 70 is now turned on
                this._selenium.ClickAndWaitForPageToLoad("link=All");
                this._selenium.VerifyElementPresent("link=General");
                this._selenium.VerifyElementPresent("link=Scanned");
                this._selenium.VerifyElementNotPresent("link=Credit Card");
                if (this._selenium.IsTextPresent("RDC"))
                {
                    throw new SeleniumException("Remote Deposit Capture is Present");
                }
            }
            else if (churchId.ToString() == "258")
            {
                //Make sure Module 70 & 71 are now turned on
                this._selenium.VerifyElementPresent("link=All");
                this._selenium.VerifyElementPresent("link=General");
                this._selenium.VerifyElementPresent("link=Credit Card");
                this._selenium.VerifyElementPresent("link=Scanned");
                this._selenium.ClickAndWaitForPageToLoad("link=All");
                if (this._selenium.IsTextPresent("RDC"))
                {
                    throw new SeleniumException("Remote Deposit Capture is Present");
                }
            }

        }

        /// <summary>
        /// Verifying batches links based on modules
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        public void Giving_Batches_View_WebDriver(int churchId)
        {
            // Navigate to Giving > Batches page
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Batches_General);

            // Verify links
            if (churchId.ToString() == "15")
            {
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("All"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("General"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("Credit Card"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("Scanned"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("Remote Deposit Capture"));

                this._driver.FindElementByLinkText("All").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Remote Deposit Capture"));

                //Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver("//table[@class='grid make_clear']", "RDC", "Type", null), "RDC types were not Found");
            }
            else if (churchId.ToString() == "255")
            {
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("All"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("General"));
                this._generalMethods.VerifyElementNotPresentWebDriver(By.LinkText("Credit Card"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("Remote Deposit Capture"));
            }
            else if (churchId.ToString() == "256")
            {
                //Make sure Module 70 is not turned on
                this._driver.FindElementByLinkText("All").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("General"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("General"));
                this._generalMethods.VerifyElementNotPresentWebDriver(By.LinkText("Credit Card"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("Scanned"));
                this._generalMethods.VerifyElementNotPresentWebDriver(By.LinkText("Remote Deposit Capture"));
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver("//table[@class='grid make_clear']", "RDC", "Type", null), "RDC types were Found");

            }
            else if (churchId.ToString() == "258")
            {
                //Make sure Module 70 & 71 are now turned on
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("All"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("General"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("Credit Card"));
                this._generalMethods.VerifyElementPresentWebDriver(By.LinkText("Scanned"));
                this._generalMethods.VerifyElementNotPresentWebDriver(By.LinkText("Remote Deposit Capture"));

                this._driver.FindElementByLinkText("All").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Scanned"));
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver("//table[@class='grid make_clear']", "RDC", "Type", null), "RDC Types were Found");

            }

        }

        #region Unmatched Contributions

        /// <summary>
        /// Views the list of ALL unmatched contributions
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="hasAccess">Does user have Contribution Write permission?</param>
        public void Giving_Batches_ViewUnmatched_All(int churchId, bool hasAccess)
        {

            // If the portal user has Contribution Write access
            if (hasAccess)
            {
                // Navigate to Giving -> Batches
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches);

                // If church 256 show that the link is not present
                if (churchId.ToString() == "256")
                {
                    this._generalMethods.VerifyTextNotPresentWebDriver("Unmatched Contributions");
                }

                else if (churchId.ToString() == "15")
                {
                    // Click on View Unmatched Contributions
                    this._driver.FindElementByLinkText("View unmatched contributions").Click();
                    this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));

                    // Verify you are on the All list page
                    this._generalMethods.VerifyTextPresentWebDriver("Unmatched Contributions");
                }
            }
            // If portal user does not have Contribution Write permission
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_ScannedContributions);
                this._generalMethods.WaitForElement(this._driver, By.Id("RDCFilterButton"));

                // Verify you are on the Scanned Contributions page
                this._generalMethods.VerifyTextPresentWebDriver("Scanned Contribution");
                // this._generalMethods.VerifyTextNotPresentWebDriver("General");
                this._generalMethods.VerifyTextNotPresentWebDriver("Credit Card");
                this._generalMethods.VerifyTextNotPresentWebDriver("Remote Deposit Capture");

            }

        }

        /// <summary>
        /// Views the list of all Batches containing unmatched contributions
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="hasAccess">Does user have Contribution Write permission?</param>
        public void Giving_Batches_ViewUnmatched_Batches(int churchId, bool hasAccess)
        {

            // If the portal user has Contribution Write access
            if (hasAccess)
            {
                // Navigate to Giving -> Batches
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches);

                // If church 256 show that the link is not present
                if (churchId.ToString() == "256")
                {
                    this._generalMethods.VerifyTextNotPresentWebDriver("Unmatched Contributions");
                }

                else if (churchId.ToString() == "15")
                {
                    // Click on View Unmatched Contributions
                    this._driver.FindElementByLinkText("View unmatched contributions").Click();
                    this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));

                    // Click on Batches link
                    this._driver.FindElementByLinkText("Batches").Click();
                    this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));

                    // Verify you are on the Batches list page
                    this._generalMethods.VerifyTextPresentWebDriver("Unmatched Batch Items");
                }
                // If portal user does not have Contribution Write permission
                else
                {
                    this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_ScannedContributions);
                    this._generalMethods.WaitForElement(this._driver, By.Id("RDCFilterButton"));

                    // Verify you are on the Scanned Contributions page
                    this._generalMethods.VerifyTextPresentWebDriver("Scanned Contribution");
                    // this._generalMethods.VerifyTextNotPresentWebDriver("General");
                    this._generalMethods.VerifyTextNotPresentWebDriver("Credit Card");
                    this._generalMethods.VerifyTextNotPresentWebDriver("Remote Deposit Capture");

                }
            }

        }

        /// <summary>
        /// Searches the list of all unmatched contributions
        /// </summary>
        /// <param name="startDate">The start date for search.</param>
        /// <param name="endDate">The end date for search.</param>
        public void Giving_Batches_ViewUnmatched_All_Search(DateTime startDate, DateTime endDate)
        {

            // Enter the Start Date for the search
            this._driver.FindElementById("start_date").Clear();
            this._driver.FindElementById("start_date").SendKeys(startDate.ToShortDateString() + Keys.Tab);

            if ((endDate - startDate).TotalDays > 90)
            {
                this._driver.FindElementById("end_date").GetAttribute("value").Equals(startDate.AddDays(90).ToShortDateString());
                // this._generalMethods.VerifyElementPresentWebDriver(By.XPath(string.Format("//input[@id='end_date' and value='{0}']", startDate.AddDays(90).ToShortDateString())));
            }

            // Enter the End Date for the search
            this._driver.FindElementById("end_date").Clear();
            this._driver.FindElementById("end_date").SendKeys(endDate.ToShortDateString() + Keys.Tab);

            if ((endDate - startDate).TotalDays > 90)
            {
                this._driver.FindElementById("start_date").GetAttribute("value").Equals(endDate.AddDays(-90).ToShortDateString());
                // this._generalMethods.VerifyElementPresentWebDriver(By.XPath(string.Format("//input[@id='end_date' and value='{0}']", startDate.AddDays(90).ToShortDateString())));
            }

            // Click on Search
            this._driver.FindElementById("submitQuery").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));

            // Verify search results
            if (this._driver.PageSource.Contains("No unmatched contributions exist"))
            {
                this._generalMethods.VerifyTextPresentWebDriver("No unmatched contributions were found.");
            }
            else
            {
                this._generalMethods.VerifyTextPresentWebDriver("Type");
                this._generalMethods.VerifyTextPresentWebDriver("Amount");
            }
        }

        /// <summary>
        /// Searches the list of all unmatched contributions within a Batch
        /// </summary>
        /// <param name="startDate">The start date for search.</param>
        /// <param name="endDate">The end date for search.</param>
        public void Giving_Batches_ViewUnmatched_Batches_Search(DateTime startDate, DateTime endDate)
        {

            // Enter the Start Date for the search
            this._driver.FindElementById("start_date").Clear();
            this._driver.FindElementById("start_date").SendKeys(startDate.ToShortDateString() + Keys.Tab);

            if ((endDate - startDate).TotalDays > 90)
            {
                this._driver.FindElementById("end_date").GetAttribute("value").Equals(startDate.AddDays(90).ToShortDateString());
                // this._generalMethods.VerifyElementPresentWebDriver(By.XPath(string.Format("//input[@id='end_date' and value='{0}']", startDate.AddDays(90).ToShortDateString())));
            }

            // Enter the End Date for the search
            this._driver.FindElementById("end_date").Clear();
            this._driver.FindElementById("end_date").SendKeys(endDate.ToShortDateString() + Keys.Tab);

            if ((endDate - startDate).TotalDays > 90)
            {
                this._driver.FindElementById("start_date").GetAttribute("value").Equals(endDate.AddDays(-90).ToShortDateString());
                // this._generalMethods.VerifyElementPresentWebDriver(By.XPath(string.Format("//input[@id='end_date' and value='{0}']", startDate.AddDays(90).ToShortDateString())));
            }

            // Click on Search
            this._driver.FindElementById("submitQuery").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));

            // Verify search results
            if (this._driver.PageSource.Contains("No unmatched contributions exist"))
            {
                this._generalMethods.VerifyTextPresentWebDriver("No unmatched contributions were found.");
            }
            else
            {
                this._generalMethods.VerifyTextPresentWebDriver("Batch Name");
                this._generalMethods.VerifyTextPresentWebDriver("Total Contributions");
            }
        }

        /// <summary>
        /// Matches an unmatched contribution through the new unmatched workflow
        /// </summary>
        /// <param name="isInBatch">Is the contribution in a batch?</param>
        /// <param name="batchName">The name of the batch.</param>
        /// <param name="amount">The amount of the individual contribution.</param>
        /// <param name="individual">The name of the individual</param>
        /// <param name="doesExist">Does the individual already exist?</param>
        /// <param name="firstName">The first name of the new individual.</param>
        /// <param name="lastName">The last name of the new individual.</param>
        /// <param name="status">The status of the new individual.</param>
        /// <param name="isHousehold">Is the contribution matched to the HH?</param>
        /// <param name="isOrganization">OPTIONAL: Is the contributor an Organization?</param>
        /// <param name="orgExist">OPTIONAL: Does the organization already exist?</param>
        /// <param name="orgName">OPTIONAL: The name of the organization.</param>
        /// <param name="orgContact">OPTIONAL: The name of the org contact.</param>
        public void Giving_Batches_ViewUnmatched_MatchContribution(bool isInBatch, string batchName, string amount, string individual, bool doesExist, string firstName, string lastName, string status, bool isHousehold, bool isOrganization = false, bool orgExist = true, string orgName = null, string orgContact = null)
        {
            // Set Variables
            var start = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).AddDays(-1);
            var end = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

            // Navigate to the View Unmatched Contributions page
            this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches);
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add a new batch"));
            this._driver.FindElementByLinkText("View unmatched contributions").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"), 20);

            // If it's in a batch go to the Batches page
            if (isInBatch)
            {
                this._driver.FindElementByLinkText("Batches").Click();
                this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));

                // Click on the batch name
                this.Giving_Batches_ViewUnmatched_Batches_Search(start, end);
                this._driver.FindElementByLinkText(batchName).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Skip this item"));

                // If it's not an organization continue on
                if (!isOrganization)
                {

                    // If the individual exists Search and select them
                    if (doesExist)
                    {
                        this._driver.FindElementById("find_individual_name").SendKeys(individual);
                        this._driver.FindElementByXPath("//input[@value='Search']").Click();
                        this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@class='grid select_row']"));
                        this._driver.FindElementByClassName("choose_row").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Household"));

                    }
                    else
                    {

                        // Otherwise click on the New Individual link
                        this._driver.FindElementByLinkText("New individual").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Add person"));

                        // Create the new individual
                        this._driver.FindElementById("input_firstname_1").SendKeys(firstName);
                        this._driver.FindElementById("last_name1").SendKeys(lastName);
                        new SelectElement(this._driver.FindElementById("individual_status1")).SelectByText(status);
                        this._driver.FindElementById("button_submit").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Household"));

                    }

                    // If the contribution is to be matched at the HH level click the Household link
                    if (isHousehold)
                    {
                        this._driver.FindElementByLinkText("Household").Click();
                        // this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@class='horiz full default_leading']/tbody/tr/td[1]/small[contains'Household']"));
                    }
                }
                // Otherwise select or create a new Organization
                else
                {
                    this._driver.FindElementByLinkText("Organization").Click();

                    // If the organization does not exist then create it
                    if (!orgExist)
                    {
                        this._driver.FindElementByLinkText("New organization").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

                        // Create new organization
                        this._driver.FindElementById("organization_name").SendKeys(orgName);
                        this._driver.FindElementById("contact_name").SendKeys(orgContact);
                        this._driver.FindElementById("submitQuery").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Organization"));
                        this._driver.FindElementByLinkText("Organization").Click();

                    }

                    // Search and select the organization
                    this._driver.FindElementById("find_organization_name").SendKeys(orgName);
                    this._driver.FindElementByXPath("//form[@id='find_organization_form']/table/tbody/tr[2]/td[3]/span/input[@value='Search']").Click();
                    this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@class='grid select_row']"));
                    //this._driver.FindElementByClassName("choose_row").Click();
                    this._driver.FindElementByXPath("//table[@class='grid select_row']/tbody/tr[2]/td/button[@class='choose_row']").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("Change or unmatch"));
                }

                // Click on the Return link to go back to the list page
                this._driver.FindElementByXPath("//a[@class='minimal_return_arrow']").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Batches"));

            }
            else
            {
                // If it's not in a batch go to the All page
                this._generalMethods.VerifyTextPresentWebDriver("Unmatched Contributions");

                // Search for today's date
                this._driver.FindElementById("start_date").Clear();
                this._driver.FindElementById("start_date").SendKeys(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).ToShortDateString() + Keys.Tab);
                this._driver.FindElementById("submitQuery").Click();
                this._generalMethods.WaitForElement(this._driver, By.Id("submitQuery"));

                // Click on a contribution amount
                decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Unmatched_All, amount, "Amount", null);
                this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Giving_Unmatched_All, itemRow + 1)).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Skip this item"));

                // If it's not an organization continue on
                if (!isOrganization)
                {

                    // If the individual exists Search and select them
                    if (doesExist)
                    {
                        this._driver.FindElementById("find_individual_name").SendKeys(individual);
                        this._driver.FindElementByXPath("//input[@value='Search']").Click();
                        this._generalMethods.WaitForElement(this._driver, By.ClassName("choose_row"), 20, "It timed out Yo!");
                        this._driver.FindElementByClassName("choose_row").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Household"));

                    }
                    else
                    {

                        // Otherwise click on the New Individual link
                        this._driver.FindElementByLinkText("New individual").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Add person"));

                        // Create the new individual
                        this._driver.FindElementById("input_firstname_1").SendKeys(firstName);
                        this._driver.FindElementById("last_name1").SendKeys(lastName);
                        new SelectElement(this._driver.FindElementById("individual_status1")).SelectByText(status);
                        this._driver.FindElementById("button_submit").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Household"));

                    }

                    // If the contribution is to be matched at the HH level click the Household link
                    if (isHousehold)
                    {
                        this._driver.FindElementByLinkText("Household").Click();
                    }
                }
                // Otherwise select or create a new Organization
                else
                {
                    this._driver.FindElementByLinkText("Organization").Click();

                    // If the organization does not exist then create it
                    if (!orgExist)
                    {
                        this._driver.FindElementByLinkText("New organization").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

                        // Create new organization
                        this._driver.FindElementById("organization_name").SendKeys(orgName);
                        this._driver.FindElementById("contact_name").SendKeys(orgContact);
                        this._driver.FindElementById("submitQuery").Click();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("Organization"));
                        this._driver.FindElementByLinkText("Organization").Click();

                    }

                    // Search and select the organization
                    this._driver.FindElementById("find_organization_name").SendKeys(orgName);
                    this._driver.FindElementByXPath("//form[@id='find_organization_form']/table/tbody/tr[2]/td[3]/span/input[@value='Search']").Click();
                    this._generalMethods.WaitForElement(this._driver, By.ClassName("choose_row"));
                    this._driver.FindElementByClassName("choose_row").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("Change or unmatch"));
                }

                // Click on the Return link to go back to the list page
                this._driver.FindElementByXPath("//a[@class='minimal_return_arrow']").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Batches"));

            }

            // Go to the individual's giving page
            if (!isOrganization)
            {
                this.Giving_ContributorDetails_View_WebDriver(individual);

                // Confirm contribution was matched
                decimal row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Contributions, amount, "Amount", null);
                Assert.AreEqual(amount, this._driver.FindElementById("ctl00_ctl00_MainContent_content_rptrContribution_ctl01_lblAmount1").Text, string.Format("{0} contribution not found", amount));

            }

        }

        #endregion Unmatched Contributions

        #region Edit Batch Name

        /// <summary>
        /// Edits the batch name for a Scanned Batch
        /// </summary>
        /// <param name="batchName">The name of the batch.</param>
        /// <param name="updatedBatchName">The updated batch name.</param>
        /// <param name="isScannedBatch">Is the batch a scanned batch?</param>
        public void Giving_Batches_ScannedContribution_EditBatchName(string batchName, string updatedBatchName, bool isScannedBatch)
        {

            // If the batch is a scanned batch continue on
            if (isScannedBatch)
            {

                // Navigate to the Scanned Contribution batches page
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_ScannedContributions);

                // Click on the gear icon and select to edit the batch name for the designated batch
                decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ScannedContribution, batchName, "Name", null);
                this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Edit batch name");
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

                // Cancel if no changes are made
                if (string.IsNullOrEmpty(updatedBatchName))
                {
                    this._driver.FindElementByLinkText("Cancel").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out"));

                    // Verify no changes were made
                    this._generalMethods.VerifyTextPresentWebDriver(batchName);
                    // int itemRow2 = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ScannedContribution, batchName, "Name", null);
                    // IWebElement table = this._driver.FindElementById(TableIds.Giving_ScannedContribution);
                    // Assert.AreEqual(batchName, table.FindElements(By.TagName("tr"))[itemRow2].FindElements(By.TagName("td"))[0].Text, "Batch name does not match");

                }
                else
                {
                    // Edit batch name
                    this._driver.FindElementById("newName").SendKeys(updatedBatchName);

                    // Save changes
                    this._driver.FindElementById("submitQuery").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out"));

                    // Verify changes were saved
                    if (updatedBatchName == "HTML - <b>Updated</b> - HTML")
                    {
                        Assert.IsTrue(this._driver.FindElementByTagName("html").Text.Contains(updatedBatchName), string.Format("Can't find batch: {0}", updatedBatchName));
                        this._generalMethods.VerifyTextNotPresentWebDriver(batchName);
                    }
                    else
                    {
                        this._generalMethods.VerifyTextPresentWebDriver(updatedBatchName);
                        this._generalMethods.VerifyTextNotPresentWebDriver(batchName);
                    }
                    // int itemRow3 = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ScannedContribution, updatedBatchName, "Name", null);
                    // IWebElement table = this._driver.FindElementById(TableIds.Giving_ScannedContribution);
                    // Assert.AreEqual(updatedBatchName, table.FindElements(By.TagName("tr"))[itemRow3].FindElements(By.TagName("td"))[0].Text, "Batch name was not updated");

                }
            }
            // If RDC batch then verify name cannot be edited
            else
            {
                // Navigate to the RDC batch page
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_RemoteDepositCapture);

                // Click on the gear icon and verify edit batch name is not an option
                decimal itemRow4 = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ScannedContribution, batchName, "Name", null);
                this._driver.FindElementByXPath(string.Format("//table[*]/tbody/tr[{0}]/td[*]/a[@class='gear_trigger']", itemRow4 + 1)).Click();
                this._generalMethods.VerifyTextNotPresentWebDriver("Edit batch name");

            }

        }

        #endregion Edit Batch Name

        #region Delete Batch

        /// <summary>
        /// Deletes the batch for a Scanned Batch
        /// </summary>
        /// <param name="hasAccess">Does the portal user have permission to delete?</param>
        /// <param name="batchName">The name of the batch.</param>
        public void Giving_Batches_ScannedContribution_DeleteBatch(bool hasAccess, string batchName)
        {

            // If the user has permission to delete continue on
            if (hasAccess)
            {

                // Navigate to the Scanned Batches page
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_ScannedContributions);

                while(true)
                { 
                    // Click on the gear icon and select Delete batch for the designated batch
                    bool flag = false;
                    try
                    {
                        decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ScannedContribution, batchName, "Name", null);
                        this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Delete batch");

                        // Click OK to confirm the deletion
                        this._driver.SwitchTo().Alert().Accept();
                        this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out"));
                    }
                    catch (WebDriverException e)
                    {
                        flag = true;                      
                    }
                    if(flag)
                    {
                        break;
                    }
                }
                // Confirm the batch was deleted
                this._driver.FindElementById("RDCFilterButton").Click();
                

                this._generalMethods.VerifyTextNotPresentWebDriver(batchName);

            }
            // otherwise, show that the user does not have the option to Delete
            else
            {
                // Navigate to the Scanned Batches page
                this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches_ScannedContributions);

                // Click on the gear icon and verify delete batch is not an option
                decimal itemRow4 = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_ScannedContribution, batchName, "Name", null);
                this._driver.FindElementByXPath(string.Format("//table[*]/tbody/tr[{0}]/td[*]/a[@class='gear_trigger']", itemRow4 + 1)).Click();
                this._generalMethods.VerifyTextNotPresentWebDriver("Delete batch");
            }

        }

        #endregion Delete Batch

        #region Completed Batch Screen

        /// <summary>
        /// Views the Completed Batch Screen for any batch type
        /// </summary>
        /// <param name="batchType">The type oof batch you want to view</param>
        /// <param name="batchName"></param>
        public void Giving_Batches_CompletedBatch_View(GeneralEnumerations.BatchTypes batchType, string batchName)
        {

            // Navigate to Batches screen
            this._generalMethods.Navigate_Portal(Navigation.Giving.Contributions.Batches);
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add a new batch"));
            this._generalMethods.VerifyTextPresentWebDriver("All Batches");

            // Click on the type of batches you want to view
            switch (batchType)
            {
                case GeneralEnumerations.BatchTypes.Standard:
                    this._driver.FindElementByLinkText("General").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText(batchName));
                    this._generalMethods.VerifyTextPresentWebDriver("General Batches");
                    break;
                case GeneralEnumerations.BatchTypes.Scanned:
                    this._driver.FindElementByLinkText("Scanned").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText(batchName));
                    this._generalMethods.VerifyTextPresentWebDriver("Scanned Batches");
                    break;
                case GeneralEnumerations.BatchTypes.RDC:
                    this._driver.FindElementByLinkText("Remote Deposit Capture").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText(batchName));
                    this._generalMethods.VerifyTextPresentWebDriver("Remote Deposit Capture Batches");
                    break;
                default:
                    break;
            }

            // Click on the batch name
            this._driver.FindElementByLinkText(batchName).Click();
            if (batchType.Equals(GeneralEnumerations.BatchTypes.RDC))
            {
                // Verify you are on the Completed Batch screen
                this._generalMethods.WaitForElement(this._driver, By.Id("tab_back"));
                this._generalMethods.VerifyTextPresentWebDriver("Completed Batch");
                this._generalMethods.VerifyTextPresentWebDriver(batchName);

            }
            else
            {
                //Verify you are on the Contributiion search screen
                this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_ctlFindPerson_lnkFindPerson"));
                this._generalMethods.VerifyElementPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_ddlAction_dropDownList"));
                //Assert.AreEqual(batchName, this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_txtBatchName_textBox")).Text.ToString());
            }
        }

        #endregion Completed Batch Screen


        #endregion New Batches Page

        #region Enter Contributions
        /// <summary>
        /// Creates a contribution in portal.
        /// </summary>
        /// <param name="batch">The name of the batch the contribution is to be attributed to</param>
        /// <param name="contributor">The contributor the contribution is to be attributed to</param>
        /// <param name="attributedTo">Household or individual</param>
        /// <param name="type">The type of contribution being created</param>
        /// <param name="fund">The fund the contribution is to be attributed to</param>
        /// <param name="args">Type specific information</param>
        /// <param name="doNotThank">Flag specifying thank/do not thank</param>
        public void Giving_EnterContributions(string batch, string contributor, string attributedTo, string type, string fund, string[] args, bool doNotThank, bool split, string[][] splitArgs)
        {
            // Navigate to giving->enter contributions
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Contributions.Enter_Contributions);

            // Enter a contribution
            if (!string.IsNullOrEmpty(batch))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_lnkSelectBatch").Click();
                this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);
                this._driver.FindElementById("ctl00_content_txtBatchNameSearch_textBox").SendKeys(batch);
                this._driver.FindElementById("ctl00_content_btnSearch").Click();
                this._driver.FindElementByLinkText("Select").Click();
                this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);
            }

            // Search for and select an individual
            this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(contributor);

            if (attributedTo != "Household" && !split)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAttributedTo")).SelectByText(attributedTo);
            }

            if (type != "Check")
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlContributionType")).SelectByText(type);
            }

            if (!string.IsNullOrEmpty(fund))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlFund_dropDownList")).SelectByText(fund);
            }
            else
            {
                this._errorText.Add("Fund is required.");
            }

            if (args != null)
            {
                if (!string.IsNullOrEmpty(args[0]))
                {
                    this._driver.FindElementByXPath("//input[contains(@id, '_txtAmount_textBox')]").SendKeys(args[0].ToString());
                }
                else
                {
                    this._errorText.Add("Invalid amount. No currency symbol. Can contain decimals. Ex: 4,532 or 4532.56");
                }
            }

            if (type == "Voucher")
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlVoucher_ddlAcct_dropDownList")).SelectByText(args[1]);
            }

            if (args != null)
            {
                if (!string.IsNullOrEmpty(args[1]))
                {
                    switch (type)
                    {
                        case "ACH":
                        case "Check":
                            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlCheck_txtReference_textBox").SendKeys(args[1]);
                            break;
                        case "Credit Card":
                            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlCreditCard_txtReference_textBox").SendKeys(args[1]);
                            break;
                        case "Voucher":
                            this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlVoucher_txtReference_textBox").SendKeys(args[2]);
                            break;
                        default:
                            break;
                    }
                }
                else
                {
                    if (type != "Cash" || type != "Non-Cash")
                    {
                        this._errorText.Add("Reference is required.");
                    }
                }
            }

            if (doNotThank)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkBoxThank").Click();
            }

            if (split)
            {
                // Select the checkbox indiciating this is a split
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkSplit").Click();

                foreach (string[] splitData in splitArgs)
                {
                    if (!string.IsNullOrEmpty(splitData[0]))
                    {
                        new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlSplitAttributedTo")).SelectByText(splitData[0]);
                    }

                    if (!string.IsNullOrEmpty(splitData[1]))
                    {
                        this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSplitAmount_textBox").SendKeys(splitData[1]);
                    }

                    if (!string.IsNullOrEmpty(splitData[2]))
                    {
                        new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlSplitFund_dropDownList")).SelectByText(splitData[2]);
                    }

                    if (!string.IsNullOrEmpty(splitData[3]))
                    {
                        new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlSplitSubFund_dropDownList")).SelectByText(splitData[3]);
                    }

                    if (!string.IsNullOrEmpty(splitData[4]))
                    {
                        new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlSplitPledgeDrive_dropDownList")).SelectByText(splitData[4]);
                    }

                    // Save the split
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveSplit").Click();

                    System.Threading.Thread.Sleep(3000);

                    // Verify the split was added
                    string splitAttributedTo = string.Empty;
                    string splitFund = string.Empty;
                    string splitSubFund = string.Empty;
                    string splitPledgeDrive = string.Empty;
                    string splitAmount = string.Empty;
                    Assert.AreEqual(splitAttributedTo = !string.IsNullOrEmpty(splitData[0]) ? splitData[0] : string.Empty, this._driver.FindElementByXPath("//table[@id='ctl00_ctl00_MainContent_content_dgSplitContributions']/tbody/tr[last()]/td[2]").Text);
                    Assert.AreEqual(splitFund = !string.IsNullOrEmpty(splitData[2]) ? splitData[2] : string.Empty, this._driver.FindElementByXPath("//table[@id='ctl00_ctl00_MainContent_content_dgSplitContributions']/tbody/tr[last()]/td[3]").Text);
                    Assert.AreEqual(splitSubFund = !string.IsNullOrEmpty(splitData[3]) ? splitData[3] : " ", this._driver.FindElementByXPath("//table[@id='ctl00_ctl00_MainContent_content_dgSplitContributions']/tbody/tr[last()]/td[4]").Text);
                    Assert.AreEqual(splitPledgeDrive = !string.IsNullOrEmpty(splitData[4]) ? splitData[4] : " ", this._driver.FindElementByXPath("//table[@id='ctl00_ctl00_MainContent_content_dgSplitContributions']/tbody/tr[last()]/td[5]").Text);
                    Assert.AreEqual(splitAmount = !string.IsNullOrEmpty(splitData[1]) ? splitData[1] : string.Empty, this._driver.FindElementByXPath("//table[@id='ctl00_ctl00_MainContent_content_dgSplitContributions']/tbody/tr[last()]/td[6]").Text);
                }
            }

            // Save the contribution
            this._driver.FindElementById(GeneralButtons.Save).Click();
        }
        #endregion Enter Contributions

        #region Edit Contributions
        /// <summary>
        /// Edits a contribution
        /// </summary>
        /// <param name="contributorName">The name of the contributor</param>
        /// <param name="amount">The amount of the contribution being edited</param>
        /// <param name="updatedBatch">The updated name of the batch</param>
        /// <param name="updatedContributorName">The updated contributor name</param>
        /// <param name="updatedAttributedTo">Who the contribution is attributed to</param>
        /// <param name="updatedFund">The name of the fund</param>
        /// <param name="updatedReceivedDate">The date the contribution was received</param>
        /// <param name="updatedAmount">The amount of the contribution</param>
        public void Giving_EditContribution(string contributorName, string amount, string updatedBatch, string updatedContributorName, string updatedAttributedTo, string updatedFund, DateTime? updatedReceivedDate, string updatedAmount)
        {
            // Navigate to the individual's giving records
            this.Giving_ContributorDetails_View_WebDriver(contributorName);

            // Edit the contribution
            //Actions doubleClick = new Actions(_driver);
            //IWebElement startDate = _driver.FindElementById("ctl00_ctl00_MainContent_content_dteStartDate");
            //doubleClick.DoubleClick(startDate);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dteStartDate").SendKeys("t");
            //this._driver.FindElementById("ctl00_ctl00_MainContent_content_dteStartDate").SendKeys(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).AddDays(-2).ToShortDateString());
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_dteStartDate").SendKeys(Keys.Tab);
            System.Threading.Thread.Sleep(5000);

            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Giving_Contributions, amount, "Amount", null);
            this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Edit");
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // Update the desired information
            if (!string.IsNullOrEmpty(updatedBatch))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_lnkSelectBatch").Click();
                this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);
                this._driver.FindElementById("ctl00_content_txtBatchNameSearch_textBox").SendKeys(updatedBatch);
                this._driver.FindElementById("ctl00_content_btnSearch").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Select"));
                this._driver.FindElementByLinkText("Select").Click();
                this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);
            }

            if (!string.IsNullOrEmpty(updatedContributorName))
            {
                this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(updatedContributorName);
                //this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlFindPerson_lnkFindPerson").Click();
                //this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);
                //this._driver.FindElementById("ctl00_content_txtName_textBox").SendKeys(updatedContributorName);
                //this._driver.FindElementById("ctl00_content_btnSearchPeople").Click();
                //this._generalMethods.WaitForElement(this._driver, By.LinkText("Select"));
                //this._driver.FindElementByLinkText("Select").Click();
            }

            if (!string.IsNullOrEmpty(updatedAttributedTo))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAttributedTo")).SelectByText(updatedAttributedTo);
            }

            if (!string.IsNullOrEmpty(updatedFund))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlFund_dropDownList")).SelectByText(updatedFund);
            }

            if (updatedReceivedDate.HasValue)
            {
                var dateReceived = (updatedReceivedDate.Value.ToShortDateString());
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl01_DateTextBox").SendKeys(dateReceived);
            }

            if (!string.IsNullOrEmpty(updatedAmount))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlCheck_txtAmount_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlCheck_txtAmount_textBox").SendKeys(updatedAmount);
            }

            // Save the contribution
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSave").Click();

            // Wait for possible popup window
            Thread.Sleep(5000);

            if (this._driver.WindowHandles.Count > 1)
            {
                this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);
                this._driver.FindElementById("ctl00_content_btnOK").Click();
                this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);
            }

            this._generalMethods.WaitForElement(this._driver, By.LinkText("Change person"));

        }
        #endregion Edit Contributions

        #endregion Contributions

        #region Statements
        #endregion Statements

        #region Setup
        #region Funds
        /// <summary>
        /// Creates a fund.
        /// </summary>
        /// <param name="fundName">The name of the fund</param>
        /// <param name="fundCode">The fund code</param>
        /// <param name="fundType">The type of the fund</param>
        /// <param name="webEnabled">Flag for web enabled</param>
        /// <param name="accountReferenceDescription">The account reference description</param>
        /// <param name="active">Flag for active</param>
        public void Giving_Funds_Create(string fundName, string fundCode, string fundType, bool webEnabled, string accountReferenceDescription, bool active)
        {
            // Navigate to giving->funds
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Funds);

            // Create a fund
            if (!string.IsNullOrEmpty(fundName))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundName_textBox").SendKeys(fundName);
            }

            if (!string.IsNullOrEmpty(fundCode))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundCode_textBox").SendKeys(fundCode);
            }
            else
            {
                fundCode = "-";
            }

            if (!string.IsNullOrEmpty(fundType))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlFundType_dropDownList")).SelectByText(fundType);
            }

            if (webEnabled)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkWebEnabled").Click();
            }

            if (!string.IsNullOrEmpty(accountReferenceDescription))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAcctRef_dropDownList")).SelectByText(accountReferenceDescription);
            }
            else
            {
                accountReferenceDescription = "-";
            }

            if (!active)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive").Click();
            }
            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify the fund was created
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Funds, fundName, "Fund Name", null);
            this._generalMethods.VerifyTableDataWebDriver(TableIds.Portal.Giving_Funds, itemRow, new Dictionary<int, string>() { { 1, fundName }, { 2, fundCode }, { 3, fundType }, { 5, accountReferenceDescription } });
            IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_Funds);
            Assert.AreEqual(webEnabled, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[4].FindElements(By.TagName("img")).Count > 0);
            Assert.AreEqual(active, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[6].FindElements(By.TagName("img")).Count > 0);
        }

        public void Giving_Funds_Update(string currentFundName, string currentFundCode, string currentFundType, bool currentWebEnabled, string currentAccountReferenceDescription, bool currentActive, string modifiedFundName, string modifiedFundCode, string modifiedFundType, bool modifiedWebEnabled, string modifiedAccountReferenceDescription, bool modifiedActive)
        {
            // Navigate to giving->funds
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Funds);

            // Update the fund
            int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Funds, currentFundName, "Fund Name", null);
            this._driver.FindElementById(TableIds.Portal.Giving_Funds).FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();

            Assert.AreEqual(currentFundName, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundName_textBox").GetAttribute("value"));
            Assert.AreEqual(currentFundCode, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundCode_textBox").GetAttribute("value"));
            Assert.AreEqual(currentFundType, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlFundType_dropDownList")).SelectedOption.Text);
            Assert.AreEqual(currentWebEnabled, this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkWebEnabled").Selected);
            Assert.AreEqual(currentAccountReferenceDescription, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAcctRef_dropDownList")).SelectedOption.Text);
            Assert.AreEqual(currentActive, this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive").Selected);

            if (!string.IsNullOrEmpty(modifiedFundName))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundName_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundName_textBox").SendKeys(modifiedFundName);
            }
            if (!string.IsNullOrEmpty(modifiedFundCode))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundCode_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFundCode_textBox").SendKeys(modifiedFundCode);
            }
            if (!string.IsNullOrEmpty(modifiedFundType))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlFundType_dropDownList")).SelectByText(modifiedFundType);
            }

            IWebElement checkBoxWebEnabled = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkWebEnabled");
            if ((modifiedWebEnabled && !checkBoxWebEnabled.Selected) || (!modifiedWebEnabled && checkBoxWebEnabled.Selected))
            {
                checkBoxWebEnabled.Click();
            }

            if (!string.IsNullOrEmpty(modifiedAccountReferenceDescription))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlAcctRef_dropDownList")).SelectByText(modifiedAccountReferenceDescription);
            }

            IWebElement checkBoxActive = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive");
            if ((modifiedActive && !checkBoxActive.Selected) || (!modifiedActive && checkBoxActive.Selected))
            {
                checkBoxActive.Click();
            }
            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify the fund was updated, original does not exist
            int itemRowUpdated = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Funds, modifiedFundName, "Fund Name", null);
            this._generalMethods.VerifyTableDataWebDriver(TableIds.Portal.Giving_Funds, itemRowUpdated, new Dictionary<int, string>() { { 1, modifiedFundName }, { 2, modifiedFundCode }, { 3, modifiedFundType }, { 5, modifiedAccountReferenceDescription } });
            IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_Funds);
            Assert.AreEqual(modifiedWebEnabled, table.FindElements(By.TagName("tr"))[itemRowUpdated].FindElements(By.TagName("td"))[4].FindElements(By.TagName("img")).Count > 0);
            Assert.AreEqual(modifiedActive, table.FindElements(By.TagName("tr"))[itemRowUpdated].FindElements(By.TagName("td"))[6].FindElements(By.TagName("img")).Count > 0);
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_Funds, currentFundName, "Fund Name", null));
        }

        /// <summary>
        /// Deletes a fund.
        /// </summary>
        /// <param name="fundName">The name of the fund to be deleted</param>
        public void Giving_Funds_Delete(string fundName)
        {
            // Navigate to giving->funds
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Funds);

            // Delete the fund
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_Funds, fundName, "Fund Name", null);
            this._driver.FindElementById(TableIds.Portal.Giving_Funds).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[7].FindElement(By.TagName("a")).Click();

            // Click 'Yes' at the confirmation
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            // Verify the fund was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_Funds, fundName, "Fund Name", null));
        }
        #endregion Funds

        #region Sub Funds
        /// <summary>
        /// Creates a Sub Fund
        /// </summary>
        /// <param name="parentFund">Name of the parent fund</param>
        /// <param name="subFundName">Name of the sub fund</param>
        /// <param name="generalLedger">General ledger</param>
        /// <param name="subFundCode">Sub fund code</param>
        /// <param name="webEnabled">Indicates that this sub fund is web enabled</param>
        /// <param name="active">Indicates this is an active sub fund</param>
        public void Giving_SubFunds_Create(string parentFund, string subFundName, string generalLedger, string subFundCode, bool webEnabled, bool active)
        {
            // Navigate to giving->sub funds
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Sub_Funds);

            // Create the sub fund
            if (parentFund != null)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlFund_dropDownList")).SelectByText(parentFund);
            }

            if (subFundName != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundName_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundName_textBox").SendKeys(subFundName);
            }
            else
            {
                subFundName = "-";
            }

            if (generalLedger != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtGeneralLedger_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtGeneralLedger_textBox").SendKeys(generalLedger);
            }
            if (subFundCode != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundCode_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundCode_textBox").SendKeys(subFundCode);
            }
            if (webEnabled)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkWebEnabled").Click();
            }
            if (!active)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive").Click();
            }
            this._driver.FindElementById(GeneralButtons.Save).Click();

            if (parentFund != null)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlFundFilter_dropDownList")).SelectByText(parentFund);
            }
            if (!active)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlActive_dropDownList")).SelectByText("Inactive");
            }
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSearch").Click();
            this._generalMethods.WaitForPageIsLoaded(60);

            // Verify the sub fund was created
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_SubFunds, subFundName, "Sub Fund Name", null);
            this._generalMethods.VerifyTableDataWebDriver(TableIds.Portal.Giving_SubFunds, itemRow, new Dictionary<int, string>() { { 1, subFundName }, { 2, parentFund }, { 3, generalLedger }, { 4, subFundCode } });
            IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_SubFunds);
            Assert.AreEqual(webEnabled, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[5].FindElements(By.TagName("img")).Count > 0);
            Assert.AreEqual(active, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[6].FindElements(By.TagName("img")).Count > 0);
        }

        public void Giving_SubFunds_Update(string parentFundOriginal, string subFundNameOriginal, string generalLedgerOriginal, string subFundCodeOriginal, bool webEnabledOriginal, bool activeOriginal, string subFundNameUpdated, string generalLedgerUpdated, string subFundCodeUpdated, bool webEnabledUpdated, bool activeUpdated)
        {
            // Navigate to giving->sub funds
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Sub_Funds);

            // Update the sub fund
            int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_SubFunds, subFundNameOriginal, "Sub Fund Name", null);
            this._driver.FindElementById(TableIds.Portal.Giving_SubFunds).FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();

            Assert.AreEqual(parentFundOriginal, this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblEditFund").Text);
            Assert.AreEqual(subFundNameOriginal, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundName_textBox").GetAttribute("value"));
            Assert.AreEqual(generalLedgerOriginal, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtGeneralLedger_textBox").GetAttribute("value"));
            Assert.AreEqual(subFundCodeOriginal, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundCode_textBox").GetAttribute("value"));

            Assert.AreEqual(webEnabledOriginal, this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkWebEnabled").Selected);
            Assert.AreEqual(activeOriginal, this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive").Selected);

            if (subFundNameUpdated != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundName_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundName_textBox").SendKeys(subFundNameUpdated);
            }

            if (generalLedgerUpdated != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtGeneralLedger_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtGeneralLedger_textBox").SendKeys(generalLedgerUpdated);
            }

            if (subFundCodeUpdated != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundCode_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSubFundCode_textBox").SendKeys(subFundCodeUpdated);
            }

            IWebElement checkBoxWebEnabled = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkWebEnabled");
            if ((webEnabledUpdated && !checkBoxWebEnabled.Selected) || (!webEnabledUpdated && checkBoxWebEnabled.Selected))
            {
                checkBoxWebEnabled.Click();
            }

            IWebElement checkBoxActive = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive");
            if ((activeUpdated && !checkBoxActive.Selected) || (!activeUpdated && checkBoxActive.Selected))
            {
                checkBoxActive.Click();
            }

            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify the sub fund was updated, original does not exist
            int rowUpdated = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_SubFunds, subFundNameUpdated, "Sub Fund Name", null);
            this._generalMethods.VerifyTableDataWebDriver(TableIds.Portal.Giving_SubFunds, rowUpdated, new Dictionary<int, string>() { { 1, subFundNameUpdated }, { 2, parentFundOriginal }, { 3, generalLedgerUpdated }, { 4, subFundCodeUpdated } });
            IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_SubFunds);
            Assert.AreEqual(webEnabledUpdated, table.FindElements(By.TagName("tr"))[rowUpdated].FindElements(By.TagName("td"))[5].FindElements(By.TagName("img")).Count > 0);
            Assert.AreEqual(activeUpdated, table.FindElements(By.TagName("tr"))[rowUpdated].FindElements(By.TagName("td"))[6].FindElements(By.TagName("img")).Count > 0);
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_SubFunds, subFundNameOriginal, "Sub Fund Name", null));
        }

        /// <summary>
        /// Deletes a sub fund.
        /// </summary>
        /// <param name="subFundName">The name of the sub fund to be deleted</param>
        public void Giving_SubFunds_Delete(string subFundName)
        {
            // Navigate to giving->sub funds
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Sub_Funds);

            // Delete the sub fund
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_SubFunds, subFundName, "Sub Fund Name", null);
            this._driver.FindElementById(TableIds.Portal.Giving_SubFunds).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[7].FindElement(By.TagName("a")).Click();

            // Click 'Yes' at the confirmation
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            // Verify sub fund was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_SubFunds, subFundName, "Sub Fund Name", null));
        }
        #endregion Sub Funds

        #region Pledge Drives
        #endregion Pledge Drives

        #region Contribution Attributes
        /// <summary>
        /// Creates a contribution attribute
        /// </summary>
        /// <param name="attributeName">The name of the contribution attribute</param>
        public void Giving_ContributionAttributes_Create(string attributeName)
        {
            // Navigate to giving->contribution attributes
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Contribution_Attributes);

            // Create the contribution attribute
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAttributeName_textBox").SendKeys(attributeName);
            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify no errors ocurred
            Assert.IsFalse(this._driver.FindElementByTagName("html").Text.Contains(TextConstants.ErrorHeadingSingular));
            Assert.IsFalse(this._driver.FindElementByTagName("html").Text.Contains(TextConstants.ErrorHeadingPlural));

            // Verify the contribution attribute was created
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_ContributionAttributes, attributeName, "Contribution Attribute", null);
            Assert.AreEqual(attributeName, this._driver.FindElementById(TableIds.Portal.Giving_ContributionAttributes).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[1].Text);
        }

        /// <summary>
        /// Updates a contribution attribute
        /// </summary>
        /// <param name="attributeName">The original name of the attribute</param>
        /// <param name="attributeNameUpdated">The updated name of the attribute</param>
        public void Giving_ContributionAttributes_Update(string attributeName, string attributeNameUpdated)
        {
            // Navigate to giving->contribution attributes
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Contribution_Attributes);

            // Update the contribution attribute
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_ContributionAttributes, attributeName, "Contribution Attribute", null);
            this._driver.FindElementById(TableIds.Portal.Giving_ContributionAttributes).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAttributeName_textBox").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAttributeName_textBox").SendKeys(attributeNameUpdated);
            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify no errors ocurred
            Assert.IsFalse(this._driver.FindElementByTagName("html").Text.Contains(TextConstants.ErrorHeadingSingular));
            Assert.IsFalse(this._driver.FindElementByTagName("html").Text.Contains(TextConstants.ErrorHeadingPlural));

            // Verify the contribution attribute was updated, original no longer present
            int itemRowModified = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_ContributionAttributes, attributeNameUpdated, "Contribution Attribute", null);
            Assert.AreEqual(attributeNameUpdated, this._driver.FindElementById(TableIds.Portal.Giving_ContributionAttributes).FindElements(By.TagName("tr"))[itemRowModified].FindElements(By.TagName("td"))[1].Text);
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_ContributionAttributes, attributeName, "Contribution Attribute", null));
        }

        /// <summary>
        /// Deletes a contribution attribute.
        /// </summary>
        /// <param name="attributeName">The name of the contribution attribute to be deleted</param>
        public void Giving_ContributionAttributes_Delete(string attributeName)
        {
            // Navigate to giving->contribution attributes
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Contribution_Attributes);

            // Delete the contribution attribute
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_ContributionAttributes, attributeName, "Contribution Attribute", null);
            this._driver.FindElementById(TableIds.Portal.Giving_ContributionAttributes).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[4].FindElement(By.TagName("a")).Click();

            // Verify the contribution attribute was deleted
            if (this._driver.FindElementsById(TableIds.Portal.Giving_ContributionAttributes).Count > 0)
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_ContributionAttributes, attributeName, "Contribution Attribute", null));
            }
            else
            {
                Assert.IsTrue(this._driver.FindElementByTagName("html").Text.Contains("No records found"));
            }
        }
        #endregion Contribution Attributes

        #region Sub Types
        #endregion Sub Types

        #region Account References
        /// <summary>
        /// Creates an account reference.
        /// </summary>
        /// <param name="accountReference">The name of the account reference.</param>
        /// <param name="description">The description of the account reference.</param>
        /// <param name="majorAccountCode">The major account code.</param>
        /// <param name="paymentGatewayID">The payment gateway id.</param>
        /// <param name="active">The active flag.</param>
        public void Giving_AccountReferences_Create(string accountReference, string description, string majorAccountCode, string paymentGatewayID, bool active)
        {
            // Navigate to giving->account references
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Account_References);

            // Create an account reference
            if (!string.IsNullOrEmpty(accountReference))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountCode").SendKeys(accountReference);
            }

            if (!string.IsNullOrEmpty(description))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountDesc").SendKeys(description);
            }

            if (!string.IsNullOrEmpty(majorAccountCode))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtMajorAccountCode").SendKeys(majorAccountCode);
            }
            else
            {
                majorAccountCode = "–";
            }

            if (!string.IsNullOrEmpty(paymentGatewayID))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddMerchantAccount")).SelectByText(paymentGatewayID);
            }

            if (!active)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive").Click();
            }
            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify the account reference was created
            int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_AccountReferences, accountReference, "Account Reference", null);
            this._generalMethods.VerifyTableDataWebDriver(TableIds.Portal.Giving_AccountReferences, row, new Dictionary<int, string>() { { 1, accountReference }, { 2, description }, { 3, majorAccountCode }, { 4, paymentGatewayID } });
            Assert.AreEqual(active, this._driver.FindElementById(TableIds.Portal.Giving_AccountReferences).FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[5].FindElements(By.TagName("img")).Count > 0);
        }

        public void Giving_AccountReferences_Update(string accountReference, string description, string majorAccountCode, string paymentGatewayID, bool active, string modifiedAccountReference, string modifiedDescription, string modifiedMajorAccountCode, string modifiedPaymentGatewayID, bool modifiedActive)
        {
            // Navigate to giving->account references
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Account_References);

            // Select the original account reference
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_AccountReferences, accountReference, "Account Reference", null);
            this._driver.FindElementById(TableIds.Portal.Giving_AccountReferences).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();

            Assert.AreEqual(accountReference, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountCode").GetAttribute("value"));
            Assert.AreEqual(description, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountDesc").GetAttribute("value"));
            if (majorAccountCode == null)
            {
                majorAccountCode = string.Empty;
            }
            Assert.AreEqual(majorAccountCode, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtMajorAccountCode").GetAttribute("value"));
            Assert.AreEqual(paymentGatewayID, new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddMerchantAccount")).SelectedOption.Text);
            Assert.AreEqual(active, this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive").Selected);

            // Modify the values
            if (modifiedAccountReference != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountCode").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountCode").SendKeys(modifiedAccountReference);
            }
            if (modifiedDescription != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountDesc").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAccountDesc").SendKeys(modifiedDescription);
            }
            if (modifiedMajorAccountCode != null)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtMajorAccountCode").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtMajorAccountCode").SendKeys(modifiedMajorAccountCode);
            }
            if (modifiedPaymentGatewayID != null)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddMerchantAccount")).SelectByText(modifiedPaymentGatewayID);
            }

            IWebElement checkBoxActive = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkIsActive");
            if (!modifiedActive && checkBoxActive.Selected || modifiedActive && !checkBoxActive.Selected)
            {
                checkBoxActive.Click();
            }
            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify the account reference was updated, original no longer exists
            int itemRowUpdated = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_AccountReferences, modifiedAccountReference, "Account Reference", null);
            this._generalMethods.VerifyTableDataWebDriver(TableIds.Portal.Giving_AccountReferences, itemRowUpdated, new Dictionary<int, string>() { { 1, modifiedAccountReference }, { 2, modifiedDescription }, { 3, modifiedMajorAccountCode }, { 4, modifiedPaymentGatewayID } });
            IWebElement table = this._driver.FindElementById(TableIds.Portal.Giving_AccountReferences);
            Assert.AreEqual(modifiedActive, table.FindElements(By.TagName("tr"))[itemRowUpdated].FindElements(By.TagName("td"))[5].FindElements(By.TagName("img")).Count > 0);
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_AccountReferences, accountReference, "Account Reference", null));
        }

        /// <summary>
        /// Deletes an account reference
        /// </summary>
        /// <param name="accountReference">The name of the account reference to be deleted</param>
        public void Giving_AccountReferences_Delete(string accountReference)
        {
            // Navigate to giving->account references
            this._generalMethods.Navigate_Portal(Navigation.Portal.Giving.Setup.Account_References);

            // Delete the account reference
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Giving_AccountReferences, accountReference, "Account Reference", null);
            this._driver.FindElementById(TableIds.Portal.Giving_AccountReferences).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[6].FindElement(By.TagName("a")).Click();

            // Click 'Yes' at the confirmation
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            // Verify the account reference was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_AccountReferences, accountReference, "Account Reference", null));
        }
        #endregion Account References

        #region Organizations

        /// <summary>
        /// Makes an Organization inactive
        /// </summary>
        /// <param name="orgName">The name of the organization.</param>
        public void Giving_Organizations_Inactive(string orgName, Boolean all = false)
        {

            // Navigate to the Organizations page
            this._generalMethods.Navigate_Portal(Navigation.Giving.Setup.Organizations);

            // Search for the organization
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFilterName_textBox").SendKeys(orgName);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSearch").Click();


            this._generalMethods.WaitForElement(this._driver, By.LinkText("Edit"));


            if (all)
            {

                int rows = this._generalMethods.GetTableRowCountWebDriver("//table[@id='ctl00_ctl00_MainContent_content_dgOrganizations']");

                for (int x = 0; x < rows - 1; x++)
                //while (!this._generalMethods.IsElementPresentWebDriver(By.Id("grid_no_records")))
                {
                    // Edit the organization
                    this._driver.FindElementByLinkText("Edit").Click();

                    // Make organization inactive
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlManageOrganization_chkActive").Click();

                    // Save changes
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlManageOrganization_btnSave").Click();

                    //Update Rows
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id("grid_no_records")))
                    {
                        rows = this._generalMethods.GetTableRowCountWebDriver("//table[@id='ctl00_ctl00_MainContent_content_dgOrganizations']");
                    }

                }

            }
            else
            {
                // Edit the organization
                this._driver.FindElementByLinkText("Edit").Click();

                // Make organization inactive
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlManageOrganization_chkActive").Click();

                // Save changes
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctlManageOrganization_btnSave").Click();

            }


        }

        #endregion Organizations
        #endregion Setup

        #endregion Giving

        #region Groups
        #region Group Types
        /// <summary>
        /// Creates a group type, including all specific information.
        /// </summary>
        /// <param name="groupTypeName">The name of the group type.</param>
        /// <param name="groupTypeDescription">The description of the group type.</param>
        /// <param name="groupsPublic">Are groups of this type public?</param>
        /// <param name="groupsSearchable">Are groups of this type searchable? Public must be set to true.</param>
        /// <param name="leaderAdminRights">Admin rights leaders have in InFellowship.</param>
        /// <param name="membersEmailGroup">Allows members to email the group if set to true.</param>
        /// <param name="leaderViewRight">View rights leaders have in InFellowship.</param>
        /// <param name="memberViewRight">View rights members have in InFellowship/</param>
        /// <param name="groupAdmins">Portal users to be specified as group admins.  Format is "LastName, FirstName".</param>
        public void Groups_GroupType_Create(string groupTypeName, string groupTypeDescription, bool groupsPublic, bool groupsSearchable, GeneralEnumerations.GroupTypeLeaderAdminRights[] leaderAdminRights, bool membersEmailGroup, GeneralEnumerations.GroupTypeLeaderViewRights leaderViewRight, GeneralEnumerations.GroupTypeMemberViewRights memberViewRight, string[] groupAdmins)
        {
            // Navigate to Groups->Administration->Group Types
            this._selenium.Navigate(Navigation.Groups.Administration.Group_Types);

            // Unless the group type exists, create it
            if (!this._selenium.IsElementPresent(string.Format("link={0}", groupTypeName)))
            {

                // Create a new group type
                this._selenium.ClickAndWaitForPageToLoad("link=New group type");


                #region Step 1
                // Specify the name and description
                this._selenium.Type("group_type_name", groupTypeName);
                this._selenium.Type("group_type_description", groupTypeDescription);

                // Public? If so, Searchable?
                if (groupsPublic == true)
                {
                    this._selenium.Click("group_type_web_enabled");
                    if (groupsSearchable == true)
                        this._selenium.Click("group_type_searchable");
                }
                #endregion Step 1

                // Next to Step 2
                this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

                // If we get validation, click RETURN to exit the wizard. 
                if (!this._selenium.IsTextPresent("Group Type Name must be unique."))
                {


                    #region Step 2
                    // What admin rights do leaders have?
                    if (leaderAdminRights.Contains(GeneralEnumerations.GroupTypeLeaderAdminRights.None) == false)
                    {
                        foreach (GeneralEnumerations.GroupTypeLeaderAdminRights leaderAdminRight in leaderAdminRights)
                        {
                            switch (leaderAdminRight)
                            {
                                case GeneralEnumerations.GroupTypeLeaderAdminRights.EmailGroup:
                                    this._selenium.Click("group_type_leaders_can_email");
                                    break;
                                case GeneralEnumerations.GroupTypeLeaderAdminRights.InviteSomeone:
                                    this._selenium.Click("group_type_leaders_can_invite");
                                    break;
                                case GeneralEnumerations.GroupTypeLeaderAdminRights.AddSomeone:
                                    this._selenium.Click("group_type_leaders_can_add");
                                    break;
                                case GeneralEnumerations.GroupTypeLeaderAdminRights.EditRecords:
                                    this._selenium.Click("group_type_leaders_can_edit");
                                    break;
                                case GeneralEnumerations.GroupTypeLeaderAdminRights.EditDetails:
                                    this._selenium.Click("group_type_leaders_can_updategroup");
                                    break;
                                case GeneralEnumerations.GroupTypeLeaderAdminRights.ChangeScheduleLocation:
                                    this._selenium.Click("group_type_leaders_can_schedule");
                                    break;
                                case GeneralEnumerations.GroupTypeLeaderAdminRights.TakeAttendance:
                                    this._selenium.Click("group_type_leaders_can_take_attendance");
                                    break;
                            }
                        }
                    }

                    // What admin rights to members have?
                    if (membersEmailGroup)
                        this._selenium.Click("group_type_members_can_email");
                    #endregion Step 2

                    // Next to step 3
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);


                    #region Step 3
                    // What view right do leaders have? 
                    switch (leaderViewRight)
                    {
                        case GeneralEnumerations.GroupTypeLeaderViewRights.Limited:
                            this._selenium.Click("group_type_leaders_limited_view");
                            break;
                        case GeneralEnumerations.GroupTypeLeaderViewRights.Basic:
                            this._selenium.Click("group_type_leaders_default_view");
                            break;
                        case GeneralEnumerations.GroupTypeLeaderViewRights.Full:
                            this._selenium.Click("group_type_leaders_full_view");
                            break;
                    }

                    // What view right do members have?
                    switch (memberViewRight)
                    {
                        case GeneralEnumerations.GroupTypeMemberViewRights.Limited:
                            this._selenium.Click("group_type_members_limited_view");
                            break;
                        case GeneralEnumerations.GroupTypeMemberViewRights.Basic:
                            this._selenium.Click("group_type_members_default_view");
                            break;
                    }
                    #endregion Step 3

                    // Next to step 4
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);


                    #region Step 4
                    foreach (string groupAdmin in groupAdmins)
                    {
                        decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupType_Permissions, groupAdmin, "Portal User — must be linked to an individual record", null);
                        //decimal itemRow = this._generalMethods.GetTableRowNumber("//table[@class='grid']", groupAdmin, "Portal User — must be linked to an individual record", null);
                        this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td/input", TableIds.Groups_GroupType_Permissions, itemRow + 1));
                        //this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td/input", "//table[@class='grid']", itemRow + 1));

                    }
                    #endregion Step 4

                    // Next to step 4
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

                    // No custom field logic yet...
                    // Next to step 4
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
                }
                else
                {
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
                }

            }
        }

        /// <summary>
        /// Creates a group type, but does not specify any leader/member permissions.
        /// </summary>
        /// <param name="groupTypeName">The name of the group type.</param>
        /// <param name="groupTypeDescription">The description of the group type.</param>
        /// <param name="groupAdmins">Portal users to be specified as group admins.  Format is "LastName, FirstName".</param>
        public void Groups_GroupType_Create(string groupTypeName, string groupTypeDescription, string[] groupAdmins)
        {
            // Navigate to Groups->Administration->Group Types
            this._selenium.Navigate(Navigation.Groups.Administration.Group_Types);

            // Unless the group type exists, create it
            if (!this._selenium.IsElementPresent(string.Format("link={0}", groupTypeName)))
            {
                // Create a new group type
                this._selenium.ClickAndWaitForPageToLoad("link=New group type");

                #region Step 1
                // Specify the name and description
                this._selenium.Type("group_type_name", groupTypeName);
                this._selenium.Type("group_type_description", groupTypeDescription);
                #endregion Step 1

                // If we get validation, click RETURN to exit the wizard. 
                if (!this._selenium.IsTextPresent("Group Type Name must be unique."))
                {
                    // Next to Step 2
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

                    // Next to step 3
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

                    // Next to step 4
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

                    #region Step 4
                    if (groupAdmins != null)
                    {
                        foreach (string groupAdmin in groupAdmins)
                        {
                            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupType_Permissions, groupAdmin, "Portal User — must be linked to an individual record", null);
                            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td/input", TableIds.Groups_GroupType_Permissions, itemRow + 1));
                        }
                    }
                    #endregion Step 4

                    // Next to step 4
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

                    // No custom field logic yet...
                    // Next to step 4
                    this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
                }

                else
                {
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
                }
            }
        }


        public void Groups_GroupType_Create(string name, string description, bool isPublic, bool searchable, GeneralEnumerations.GroupTypeLeaderAdminRights[] leaderRights, bool emailGroup, GeneralEnumerations.GroupTypeLeaderViewRights leaderViewRight, GeneralEnumerations.GroupTypeMemberViewRights memberViewRight, string[] groupAdmins, string[] customFields)
        {
            // Navigate to groups->administration->group types
            this._selenium.Navigate(Navigation.Groups.Administration.Group_Types);

            // Create a new group type            
            // Unless the group type exists, create it
            if (!this._selenium.IsElementPresent(string.Format("link={0}", name)))
            {
                this._selenium.ClickAndWaitForPageToLoad("link=New group type");

                #region Step 1
                // Specify the name and description
                this._selenium.Type("group_type_name", name);
                this._selenium.Type("group_type_description", description);

                // Specify public, searchable settings
                if (isPublic)
                {
                    this._selenium.Click("group_type_web_enabled");
                    if (searchable)
                    {
                        this._selenium.Click("group_type_searchable");
                    }
                }

                // Continue to step 2
                this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
                #endregion Step 1

                #region Step 2
                // Configure leader rights
                if (!leaderRights.Contains(GeneralEnumerations.GroupTypeLeaderAdminRights.None))
                {
                    foreach (GeneralEnumerations.GroupTypeLeaderAdminRights leaderAdminRight in leaderRights)
                    {
                        switch (leaderAdminRight)
                        {
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.EmailGroup:
                                this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEmailGroup);
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.InviteSomeone:
                                this._selenium.Click("group_type_leaders_can_invite");
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.EditRecords:
                                this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditMemberRecords);
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.EditDetails:
                                this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditGroupDetails);
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.ChangeScheduleLocation:
                                this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersChangeSchedule);
                                break;
                        }
                    }
                }

                // What admin rights to members have?
                if (emailGroup)
                {
                    this._selenium.Click("group_type_members_can_email");
                }

                // Continue to step 3
                this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
                #endregion Step 2

                #region Step 3
                if (leaderViewRight != GeneralEnumerations.GroupTypeLeaderViewRights.NotSpecified)
                {
                    this._selenium.Click(string.Format("//input[@type='radio' and @name='group_type_leaders_view']/ancestor::label/ancestor::th/following-sibling::td/label[contains(text(), '{0}')]", leaderViewRight.ToString()));
                }

                if (memberViewRight != GeneralEnumerations.GroupTypeMemberViewRights.NotSpecified)
                {
                    this._selenium.Click(string.Format("//input[@type='radio' and @name='group_type_members_view']/ancestor::label/ancestor::th/following-sibling::td/label[contains(text(), '{0}')]", memberViewRight.ToString()));
                }

                // Next to step 4
                this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_GroupType.Step3_Button_Next);
                #endregion Step 3

                #region Step 4
                foreach (string groupAdmin in groupAdmins)
                {
                    this._selenium.Click(string.Format("//input[contains(@value, '_{0}')]", groupAdmin));
                }

                // Continue to step 4
                this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_GroupType.Step4_Button_Next);
                #endregion Step 4

                #region Step 5
                // Select the custom field(s)
                foreach (string customField in customFields)
                {
                    this._selenium.Click(string.Format("//input[contains(@id, 'selected_custom_fields_')]/ancestor::td/following-sibling::td/label[text()='{0}']", customField));

                    decimal checkboxCount = this._selenium.GetXpathCount(string.Format("//input[contains(@id, 'selected_custom_fields_')]/ancestor::td/following-sibling::td/label[text()='{0}']/following-sibling::div/p", customField));

                    for (int i = 1; i <= checkboxCount; i++)
                    {
                        this._selenium.Click(string.Format("//input[contains(@id, 'selected_custom_fields_')]/ancestor::td/following-sibling::td/label[text()='{0}']/following-sibling::div/p[{1}]/input", customField, i));
                    }
                }

                // Continue to step 5
                this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_GroupType.Step5_Button_SaveGroupType);
                #endregion Step 5
            }
        }

        public void Groups_GroupType_Create_WebDriver(string name, string description, bool isPublic, bool searchable, GeneralEnumerations.GroupTypeLeaderAdminRights[] leaderRights, bool emailGroup, GeneralEnumerations.GroupTypeLeaderViewRights leaderViewRight, GeneralEnumerations.GroupTypeMemberViewRights memberViewRight, string[] groupAdmins, string[] customFields)
        {
            // Navigate to groups->administration->group types
            this._generalMethods.Navigate_Portal(Navigation.Groups.Administration.Group_Types);

            // Create a new group type            
            // Unless the group type exists, create it
            if (!this._generalMethods.IsElementPresentWebDriver(By.LinkText(string.Format("{0}", name))))
            {
                this._driver.FindElementByLinkText("New group type").Click();

                #region Step 1
                // Specify the name and description
                this._driver.FindElementById("group_type_name").SendKeys(name);
                this._driver.FindElementById("group_type_description").SendKeys(description);

                // Specify public, searchable settings
                if (isPublic)
                {
                    this._driver.FindElementById("group_type_web_enabled").Click();
                    if (searchable)
                    {
                        this._driver.FindElementById("group_type_searchable").Click();
                    }
                }

                // Continue to step 2
                this._driver.FindElementById(GeneralButtons.submitQuery).Click();
                #endregion Step 1

                #region Step 2
                // Configure leader rights
                if (!leaderRights.Contains(GeneralEnumerations.GroupTypeLeaderAdminRights.None))
                {
                    foreach (GeneralEnumerations.GroupTypeLeaderAdminRights leaderAdminRight in leaderRights)
                    {
                        switch (leaderAdminRight)
                        {
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.EmailGroup:
                                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEmailGroup).Click();
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.InviteSomeone:
                                this._driver.FindElementById("group_type_leaders_can_invite").Click();
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.EditRecords:
                                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditMemberRecords).Click();
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.EditDetails:
                                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditGroupDetails).Click();
                                break;
                            case GeneralEnumerations.GroupTypeLeaderAdminRights.ChangeScheduleLocation:
                                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersChangeSchedule).Click();
                                break;
                        }
                    }
                }

                // What admin rights to members have?
                if (emailGroup)
                {
                    this._driver.FindElementById("group_type_members_can_email").Click();
                }

                // Continue to step 3
                this._driver.FindElementById(GeneralButtons.submitQuery).Click();
                #endregion Step 2

                #region Step 3
                if (leaderViewRight != GeneralEnumerations.GroupTypeLeaderViewRights.NotSpecified)
                {
                    this._driver.FindElementByXPath(string.Format("//input[@type='radio' and @name='group_type_leaders_view']/ancestor::label/ancestor::th/following-sibling::td/label[contains(text(), '{0}')]", leaderViewRight.ToString())).Click();
                }

                if (memberViewRight != GeneralEnumerations.GroupTypeMemberViewRights.NotSpecified)
                {
                    this._driver.FindElementByXPath(string.Format("//input[@type='radio' and @name='group_type_members_view']/ancestor::label/ancestor::th/following-sibling::td/label[contains(text(), '{0}')]", memberViewRight.ToString())).Click();
                }

                // Next to step 4
                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_GroupType.Step3_Button_Next).Click();
                #endregion Step 3

                #region Step 4
                foreach (string groupAdmin in groupAdmins)
                {
                    this._driver.FindElementByXPath(string.Format("//input[contains(@value, '_{0}')]", groupAdmin)).Click();
                }

                // Continue to step 4
                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_GroupType.Step4_Button_Next).Click();
                #endregion Step 4

                #region Step 5
                // Select the custom field(s)
                foreach (string customField in customFields)
                {
                    this._driver.FindElementByXPath(string.Format("//input[contains(@id, 'selected_custom_fields_')]/ancestor::td/following-sibling::td/label[text()='{0}']", customField)).Click();

                    decimal checkboxCount = this._driver.FindElementsByXPath(string.Format("//input[contains(@id, 'selected_custom_fields_')]/ancestor::td/following-sibling::td/label[text()='{0}']/following-sibling::div/p", customField)).Count;

                    for (int i = 1; i <= checkboxCount; i++)
                    {
                        this._driver.FindElementByXPath(string.Format("//input[contains(@id, 'selected_custom_fields_')]/ancestor::td/following-sibling::td/label[text()='{0}']/following-sibling::div/p[{1}]/input", customField, i)).Click();
                    }
                }

                // Save Group Type
                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_GroupType.Step5_Button_SaveGroupType).Click();
                #endregion Step 5
            }
        }

        /// <summary>
        /// Views a group type.
        /// </summary>
        /// <param name="groupType">Group type you wish to view.</param>
        public void Groups_GroupType_View(string groupType)
        {
            // Are viewing a group type?
            if (this._selenium.GetLocation().Contains("Groups/GroupTypes/View.aspx"))
            {
                // We are.  Is it our group type?
                if (!(this._selenium.GetText("//div[2]/h2") == groupType))
                {
                    // It isn't our group type.  Tab back and click the link for the group type.
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Back);

                    decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupTypes, groupType, "Group Type", null);
                    this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
                }
            }

            // Is the link for the group type present?
            if (!this._selenium.IsElementPresent(string.Format("link={0}", groupType)))
            {
                // Navigate to groups->group types
                this._selenium.Navigate(Navigation.Groups.Administration.Group_Types);

                // Select the specified group type
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupTypes, groupType, "Group Type", null);
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }
            // It is. Click the link.
            else
            {
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupTypes, groupType, "Group Type", null);
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }
        }

        /// <summary>
        /// Views a group type.
        /// </summary>
        /// <param name="groupType">Group type you wish to view.</param>
        public void Groups_GroupType_View_WebDriver(string groupType)
        {
            // Are viewing a group type?
            if (this._driver.Url.Contains("Groups/GroupTypes/View.aspx"))
            {
                // We are.  Is it our group type?
                if (!(this._driver.FindElementByXPath("//div[2]/h2").Text == groupType))
                {
                    // It isn't our group type.  Tab back and click the link for the group type.
                    this._driver.FindElementByLinkText(GeneralLinks.Back).Click();

                    decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_GroupTypes, groupType, "Group Type", null);
                    this._driver.FindElementByLinkText(groupType).Click();
                }
            }

            // Is the link for the group type present?
            if (!this._generalMethods.IsElementPresentWebDriver(By.LinkText(groupType)))
            {
                // Navigate to groups->group types
                this._generalMethods.Navigate_Portal(Navigation.Groups.Administration.Group_Types);

                // Select the specified group type
                decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_GroupTypes, groupType, "Group Type", null);
                this._driver.FindElementByLinkText(groupType).Click();
            }
            // It is. Click the link.
            else
            {
                decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_GroupTypes, groupType, "Group Type", null);
                this._driver.FindElementByLinkText(groupType).Click();
            }
        }

        /// <summary>
        /// Updates the properties of a group type.
        /// </summary>
        /// <param name="groupType">Group type you wish to edit</param>
        /// <param name="updatedName"></param>.
        /// <param name="updatedDescription"></param>
        /// <param name="groupsPublic"></param>
        /// <param name="groupsSearchable"></param>
        public void Groups_GroupType_Update_Properties(string groupType, string updatedName, string updatedDescription, bool groupsPublic, bool groupsSearchable)
        {
            // View a group type
            this.Groups_GroupType_View(groupType);

            // Edit properties
            this._selenium.ClickAndWaitForPageToLoad("link=Edit properties");

            // Update the data 
            this._selenium.Type("group_type_name", updatedName);
            this._selenium.Type("group_type_description", updatedDescription);

            if (groupsPublic)
            {
                if (!this._selenium.IsChecked("group_type_web_enabled"))
                {
                    this._selenium.Click("group_type_web_enabled");
                }
                if (groupsSearchable)
                {
                    if (!this._selenium.IsChecked("group_type_searchable"))
                    {
                        this._selenium.Click("group_type_searchable");
                    }
                }
            }

            // Save changes
            this._selenium.ClickAndWaitForPageToLoad("update_properties");
        }

        /// <summary>
        /// Updates the admin rights for leaders.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="leaderAdminRight">The admin right you wish to enable or disable.</param>
        /// <param name="enableSecurityRight">Specify if you wish to enable or disable this security right.</param>
        public void Groups_GroupType_Update_AdminRight_Leader(string groupType, GeneralEnumerations.GroupTypeLeaderAdminRights leaderAdminRight, bool enableSecurityRight)
        {
            // View a group type
            this.Groups_GroupType_View(groupType);

            // Edit the admin rights
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Link_EditAdminRights);

            // TODO: Clean this up. Extract to a method.
            // Figure out which admin right to update.  If we wish to enable it, but it is already enabled, just break out of the case statement.  
            switch (leaderAdminRight)
            {
                case GeneralEnumerations.GroupTypeLeaderAdminRights.None:
                    break;
                case GeneralEnumerations.GroupTypeLeaderAdminRights.EmailGroup:
                    if (enableSecurityRight)
                    {  // Enable this right?
                        if (this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEmailGroup))
                            break; // It is already checked, break out.
                        this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEmailGroup);  // Enable the right.  It was not already enabled.
                        break;
                    }
                    else
                        if (!this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEmailGroup))
                            break; // It is already unchecked, break out.
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEmailGroup);  // Disable the right.  It was not already disbabled.
                    break;
                case GeneralEnumerations.GroupTypeLeaderAdminRights.InviteSomeone:
                    if (enableSecurityRight)
                    {  // Enable this right?
                        if (this._selenium.IsChecked("group_type_leaders_can_invite"))
                            break; // It is already checked, break out.
                        this._selenium.Click("group_type_leaders_can_invite");  // Enable the right.  It was not already enabled.
                        break;
                    }
                    else
                        if (!this._selenium.IsChecked("group_type_leaders_can_invite"))
                            break; // It is already unchecked, break out.
                    this._selenium.Click("group_type_leaders_can_invite");  // Disable the right.  It was not already disbabled.
                    break;
                case GeneralEnumerations.GroupTypeLeaderAdminRights.EditRecords:
                    if (enableSecurityRight)
                    {  // Enable this right?
                        if (this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditMemberRecords))
                            break; // It is already checked, break out.
                        this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditMemberRecords);  // Enable the right.  It was not already enabled.
                        break;
                    }
                    else
                        if (!this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditMemberRecords))
                            break; // It is already unchecked, break out.
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditMemberRecords);  // Disable the right.  It was not already disbabled.
                    break;
                case GeneralEnumerations.GroupTypeLeaderAdminRights.EditDetails:
                    if (enableSecurityRight)
                    {  // Enable this right?
                        if (this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditGroupDetails))
                            break; // It is already checked, break out.
                        this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditGroupDetails);  // Enable the right.  It was not already enabled.
                        break;
                    }
                    else
                        if (!this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditGroupDetails))
                            break; // It is already unchecked, break out.
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersEditGroupDetails);  // Disable the right.  It was not already disbabled.
                    break;
                case GeneralEnumerations.GroupTypeLeaderAdminRights.ChangeScheduleLocation:
                    if (enableSecurityRight)
                    {  // Enable this right?
                        if (this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersChangeSchedule))
                            break; // It is already checked, break out.
                        this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersChangeSchedule);  // Enable the right.  It was not already enabled.
                        break;
                    }
                    else
                        if (!this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersChangeSchedule))
                            break; // It is already unchecked, break out.
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersChangeSchedule);  // Disable the right.  It was not already disbabled.
                    break;
                case GeneralEnumerations.GroupTypeLeaderAdminRights.TakeAttendance:
                    if (enableSecurityRight)
                    {  // Enable this right?
                        if (this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersTakeAttendace))
                            break; // It is already checked, break out.
                        this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersTakeAttendace);  // Enable the right.  It was not already enabled.
                        break;
                    }
                    else
                        if (!this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersTakeAttendace))
                            break; // It is already unchecked, break out.
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_LeadersTakeAttendace);  // Disable the right.  It was not already disbabled.
                    break;
                case GeneralEnumerations.GroupTypeLeaderAdminRights.AddSomeone:
                    if (enableSecurityRight)
                    {  // Enable this right?
                        if (this._selenium.IsChecked("group_type_leaders_can_add"))
                            break; // It is already checked, break out.
                        this._selenium.Click("group_type_leaders_can_add");  // Enable the right.  It was not already enabled.
                        break;
                    }
                    else
                        if (!this._selenium.IsChecked("group_type_leaders_can_add"))
                            break; // It is already unchecked, break out.
                    this._selenium.Click("group_type_leaders_can_add");  // Disable the right.  It was not already disbabled.
                    break;
                default:
                    break;
            }
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_EditAdminRights_SaveChanges);
        }


        /// <summary>
        /// Updates the admin rights for members.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="allowMembersToEmailGroup">Turns on and off the ability to allow members the ability to email the group.</param>
        public void Groups_GroupType_Update_AdminRight_Member(string groupType, GeneralEnumerations.GroupTypeMemberAdminRights memberAdminRight, bool enableSecurityRight)
        {
            // View a group type
            this.Groups_GroupType_View(groupType);

            // Edit the admin rights
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Link_EditAdminRights);

            switch (memberAdminRight)
            {
                case GeneralEnumerations.GroupTypeMemberAdminRights.EmailGroup:
                    if (enableSecurityRight)
                    {  // If we want to let members email the group, figure out if the box is checked.  If it is not checked, check it.  Otherwise do nothing.
                        if (!this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_MembersEmailGroup))
                            this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_MembersEmailGroup);
                    }
                    else  // We don't want members to email the group.  Figure out if the box is checked.  If it is checked, uncheck it.  Otherwise, do nothing.
                        if (this._selenium.IsChecked(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_MembersEmailGroup))
                            this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step2_CheckBox_MembersEmailGroup);
                    break;
                case GeneralEnumerations.GroupTypeMemberAdminRights.ViewRoster:
                    if (enableSecurityRight)
                    {  // If we want to let members view the roster of the group, figure out if the box is checked.  If it is not checked, check it.  Otherwise do nothing.
                        if (!this._selenium.IsChecked("group_type_members_can_view_roster"))
                            this._selenium.Click("group_type_members_can_view_roster");
                    }
                    else  // If we want to let members view the roster of the group,  If it is checked, uncheck it.  Otherwise, do nothing.
                        if (this._selenium.IsChecked("group_type_members_can_view_roster"))
                            this._selenium.Click("group_type_members_can_view_roster");
                    break;
                default:
                    break;
            }
            // Enable/Disable the right to allow members to email the group

            // Save changes
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_EditAdminRights_SaveChanges);
        }

        /// <summary>
        /// Updates the viewer rights for a group type for leaders.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="leaderViewRight">The view right for the leader.</param>
        public void Groups_GroupType_Update_ViewRights_Leader(string groupType, GeneralEnumerations.GroupTypeLeaderViewRights desiredViewRight)
        {
            // View a group type
            this.Groups_GroupType_View(groupType);

            // Edit View Rights
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Link_EditViewRights);

            switch (desiredViewRight)
            {
                case GeneralEnumerations.GroupTypeLeaderViewRights.Limited:
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step3_Radio_LeadersLimitedInformation);
                    break;
                case GeneralEnumerations.GroupTypeLeaderViewRights.Basic:
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step3_Radio_LeadersBasicInformation);
                    break;
                case GeneralEnumerations.GroupTypeLeaderViewRights.Full:
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step3_Radio_LeadersFullInformation);
                    break;
            }
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_EditViewRights_SaveChanges);
        }

        /// <summary>
        /// Updates the view rights for members.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="desiredViewRight">The desired view right.</param>
        public void Groups_GroupType_Update_ViewRights_Member(string groupType, GeneralEnumerations.GroupTypeMemberViewRights desiredViewRight)
        {
            // View a group type
            this.Groups_GroupType_View(groupType);

            // Edit View Rights
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Link_EditViewRights);

            // What view right do members have?
            switch (desiredViewRight)
            {
                case GeneralEnumerations.GroupTypeMemberViewRights.Limited:
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step3_Radio_MembersLimitedInformation);
                    break;
                case GeneralEnumerations.GroupTypeMemberViewRights.Basic:
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_GroupType.Step3_Radio_MembersBasicInformation);
                    break;
            }
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_EditViewRights_SaveChanges);
        }

        /// <summary>
        /// Updates the custom fields for a group type.
        /// </summary>
        /// <param name="test">The current test object.</param>
        /// <param name="customField">The name of the custom Field.</param>
        /// <param name="customDefaultFieldValue">The default value for the custom field.</param>
        public void Groups_GroupType_Update_CustomField(string customField, string customDefaultFieldValue)
        {
            // Click the option
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupTypes_CustomFields, customField, "Custom Field", null) + 1;
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Groups_GroupTypes_CustomFields, itemRow));

            // Now we need click a default value
            //int xPathCount = (Int16)this._selenium.GetXpathCount(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p", TableIds.Groups_GroupTypes_CustomFields, actualRow));

            if (customDefaultFieldValue != null)
            {
                for (int counter = 1; counter <= this._selenium.GetXpathCount(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p", TableIds.Groups_GroupTypes_CustomFields, itemRow)); counter++)
                {
                    if (customDefaultFieldValue == this._selenium.GetText(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter)))
                    {
                        this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]/input", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter));
                    }
                }
            }
        }

        /// <summary>
        /// Updates the custom fields for a group type.
        /// </summary>
        /// <param name="test">The current test object.</param>
        /// <param name="customField">The name of the custom Field.</param>
        /// <param name="customDefaultFieldValue">The default value for the custom field.</param>
        public void Groups_GroupType_Update_CustomField_WebDriver(string customField, string customDefaultFieldValue)
        {
            // Click the option
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_GroupTypes_CustomFields, customField, "Custom Field", null) + 1;
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Groups_GroupTypes_CustomFields, itemRow)).Click();

            // Now we need click a default value
            //int xPathCount = (Int16)this._selenium.GetXpathCount(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p", TableIds.Groups_GroupTypes_CustomFields, actualRow));

            if (customDefaultFieldValue != null)
            {
                for (int counter = 1; counter <= this._driver.FindElementsByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p", TableIds.Groups_GroupTypes_CustomFields, itemRow)).Count; counter++)
                {
                    if (customDefaultFieldValue == this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter)).Text)
                    {
                        this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]/input", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter)).Click();
                    }
                }
            }
        }

        /// <summary>
        ///  Moves a group from one group type to another.
        /// </summary>
        /// <param name="sourceGroupType">The source group type.</param>
        /// <param name="destinationGroupType">The destination group type.</param>
        /// <param name="group">The name of the group to be moved.</param>
        public void Groups_GroupType_Update_MoveGroup(string sourceGroupType, string destinationGroupType, string group)
        {
            // View the group type
            this.Groups_GroupType_View(sourceGroupType);

            // Move the groups
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Link_ManageMoveGroups);

            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupTypes_MoveGroup, group, "Group", null);

            this._selenium.Select(string.Format("{0}/tbody/tr[{1}]/td[2]/select", TableIds.Groups_GroupTypes_MoveGroup, row + 1), destinationGroupType);
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_MoveTheseGroups);
        }

        /// <summary>
        /// Deletes a group type.  This will NOT move the groups under it and will delete those groups.
        /// </summary>
        /// <param name="groupTypeName">Group type to be deleted.</param>
        public void Groups_GroupType_Delete(string groupTypeName)
        {
            // View the group type
            this.Groups_GroupType_View(groupTypeName);

            // Delete the group type
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Link_DeleteGroupType);

            // Confirm on the next screen that this group type WILL be deleted.  Do not attempt to move the groups
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_DeleteThisGroupTypeConfirm);
        }

        /// <summary>
        /// Deletes a group type.  This will NOT move the groups under it and will delete those groups.
        /// </summary>
        /// <param name="groupTypeName">Group type to be deleted.</param>
        public void Groups_GroupType_Delete_WebDriver(string groupTypeName)
        {
            // View the group type
            this.Groups_GroupType_View_WebDriver(groupTypeName);

            // Delete the group type
            this._driver.FindElementByXPath(GroupsAdministrationConstants.GroupTypeManagement.Link_DeleteGroupType).Click();

            // Confirm on the next screen that this group type WILL be deleted.  Do not attempt to move the groups
            this._driver.FindElementById(GroupsAdministrationConstants.GroupTypeManagement.Button_DeleteThisGroupTypeConfirm).Click();
            // this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_DeleteThisGroupTypeConfirm);
        }

        /// <summary>
        /// Verifies the default value for a custom field is checked or isn't checked.
        /// </summary>
        /// <param name="isChecked">Should the custom field value be checked?</param>
        /// <param name="customField">The name of the custom field.</param>
        /// <param name="customFieldValue">The value of the custom field we are checking against.</param>
        public void Groups_GroupTypes_Update_CustomFields_Verify_Default_Checked(bool isChecked, string customField, string customFieldValue)
        {
            // Find the custom field
            var checkBoxChecked = false;
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupTypes_CustomFields, customField, "Custom Field", null) + 1;

            for (int counter = 1; counter <= (Int32)this._selenium.GetXpathCount(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p", TableIds.Groups_GroupTypes_CustomFields, itemRow)); counter++)
            {
                if (customFieldValue == this._selenium.GetText(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter)))
                {
                    checkBoxChecked = this._selenium.IsChecked(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]/input", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter));
                }
            }

            Assert.AreEqual(isChecked, checkBoxChecked);
        }

        /// <summary>
        /// Unselects a custom field
        /// </summary>
        /// <param name="customField">The name of the custom field</param>
        /// <param name="customFieldValue">The value of the custom field</param>
        public void Groups_GroupTypes_Update_UnSelectCustomField(string customField, string customFieldValue)
        {
            // Get the row
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_GroupTypes_CustomFields, customField, "Custom Field", null) + 1;

            if (customFieldValue != null)
            {
                for (int counter = 1; counter <= (Int32)this._selenium.GetXpathCount(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p", TableIds.Groups_GroupTypes_CustomFields, itemRow)); counter++)
                {
                    if (customFieldValue == this._selenium.GetText(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter)))
                    {
                        this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[2]/div/p[{2}]/input", TableIds.Groups_GroupTypes_CustomFields, itemRow, counter));
                    }
                }
            }

            // And now we unclick the Custom Field
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Groups_GroupTypes_CustomFields, itemRow));

            // Save Changes
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.GroupTypeManagement.Button_EditCustomFields_SaveChanges);
        }

        #endregion Group Types

        #region Custom Fields
        /// <summary>
        /// Creates a custom field.
        /// </summary>
        /// <param name="fieldName">The name of the custom field.</param>
        /// <param name="fieldDescription">The description of the custom field.</param>
        /// <param name="fieldType">The type of custom field (Single select or Multi-select).</param>
        /// <param name="fieldValues">The values for the custom field.</param>
        public void Groups_CustomField_Create(string fieldName, string fieldDescription, GeneralEnumerations.CustomFieldType fieldType, string[] fieldValues)
        {
            // Navigate to groups->custom fields if not the current page
            if (!this._selenium.GetLocation().Contains("/CustomField/Index.aspx"))
            {
                this._selenium.Navigate(Navigation.Groups.Administration.Custom_Fields);
            }

            // First see if the custom field exists.  If it doesn't, enter the wizard
            if (!this._selenium.IsTextPresent(fieldName))
            {
                // Enter the create custom field workflow
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);

                #region Create Custom Field
                // User input
                if (!string.IsNullOrEmpty(fieldName))
                {
                    this._selenium.Type("custom_field_name", fieldName);
                }
                if (fieldType == GeneralEnumerations.CustomFieldType.MultiSelect)
                {
                    this._selenium.Select("field_type", "Multi-select");
                }
                else
                {
                    this._selenium.Select("field_type", "Single select");
                }

                if (!string.IsNullOrEmpty(fieldDescription))
                {
                    this._selenium.Type("custom_field_description", fieldDescription);
                }

                // Next
                this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Next);
                #endregion Create Custom Field

                #region Arrange User Choices
                // Verify the name and description
                Assert.AreEqual(fieldName, this._selenium.GetText("//h2[@class='minimize']"));

                if (!string.IsNullOrEmpty(fieldDescription))
                {
                    Assert.AreEqual(fieldDescription, this._selenium.GetText("//h2[@class='minimize']/following-sibling::p"));
                }

                // User input
                for (int i = 0; i < fieldValues.Length; i++)
                {
                    // Create additional choices if more than 3 choices are specified
                    if (i > 2)
                    {
                        this._selenium.Click("link=Add another");
                    }
                    this._selenium.Type(string.Format("new_option_field_text_{0}", i), fieldValues[i]);
                }

                // Save
                this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_CustomField.Step2_SubmitButton_CreateCustomField);
                #endregion Arrange User Choices

                // Does the field exist?
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_CustomFields, fieldName, "Custom Field", null);
                if (fieldType == GeneralEnumerations.CustomFieldType.SingleSelect)
                {
                    Assert.AreEqual("Single Select Option", this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Groups_CustomFields, itemRow)));
                }
                else
                {
                    Assert.AreEqual("Multi Select Option", this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Groups_CustomFields, itemRow)));
                }
            }



        }

        /// <summary>
        /// Creates a custom field.
        /// </summary>
        /// <param name="fieldName">The name of the custom field.</param>
        /// <param name="fieldDescription">The description of the custom field.</param>
        /// <param name="fieldType">The type of custom field (Single select or Multi-select).</param>
        /// <param name="fieldValues">The values for the custom field.</param>
        public void Groups_CustomField_Create_WebDriver(string fieldName, string fieldDescription, GeneralEnumerations.CustomFieldType fieldType, string[] fieldValues)
        {
            // Navigate to groups->custom fields if not the current page
            if (!this._driver.Url.Contains("Groups/GroupTypes/View.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.Administration.Custom_Fields);
            }

            // First see if the custom field exists.  If it doesn't, enter the wizard
            if (!this._generalMethods.IsTextPresentWebDriver(fieldName))
            {
                // Enter the create custom field workflow
                this._driver.FindElementByLinkText("Add").Click();

                #region Create Custom Field
                // User input
                if (!string.IsNullOrEmpty(fieldName))
                {
                    this._driver.FindElementById("custom_field_name").SendKeys(fieldName);
                }
                if (fieldType == GeneralEnumerations.CustomFieldType.MultiSelect)
                {
                    new SelectElement(this._driver.FindElementByName("field_type")).SelectByText("Multi-select");
                }
                else
                {
                    new SelectElement(this._driver.FindElementByName("field_type")).SelectByText("Select select");
                }

                if (!string.IsNullOrEmpty(fieldDescription))
                {
                    this._driver.FindElementById("custom_field_description").SendKeys(fieldDescription);
                }

                // Next
                this._driver.FindElementById("submit_custom_field").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add another"));
                #endregion Create Custom Field

                #region Arrange User Choices
                // Verify the name and description
                Assert.AreEqual(fieldName, this._driver.FindElementByClassName("minimize").Text);

                if (!string.IsNullOrEmpty(fieldDescription))
                {
                    Assert.AreEqual(fieldDescription, this._driver.FindElementByXPath("//h2[@class='minimize']/following-sibling::p").Text);
                }

                // User input
                for (int i = 0; i < fieldValues.Length; i++)
                {
                    // Create additional choices if more than 3 choices are specified
                    if (i > 2)
                    {
                        this._driver.FindElementByLinkText("Add another").Click();
                    }
                    this._driver.FindElementById(string.Format("new_option_field_text_{0}", i)).SendKeys(fieldValues[i]);
                }

                // Save
                this._driver.FindElementById(GroupsAdministrationConstants.Wizard_CustomField.Step2_SubmitButton_CreateCustomField).Click();
                #endregion Arrange User Choices

                // Does the field exist?
                decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_CustomFields, fieldName, "Custom Field", null);
                if (fieldType == GeneralEnumerations.CustomFieldType.SingleSelect)
                {
                    Assert.AreEqual("Single Select Option", this._driver.FindElement(By.XPath(string.Format("{0}.{1}.2", TableIds.Groups_CustomFields, itemRow))).Text);
                }
                else
                {
                    Assert.AreEqual("Multi Select Option", this._driver.FindElement(By.XPath(string.Format("{0}/tbody/tr[{1}]/td[3]/span", TableIds.Groups_CustomFields, itemRow))).Text);
                    // //table[@id='_callback_zebra']/tbody/tr{1}/td[3]/span
                }
            }
        }

        /// <summary>
        /// Adds a new choice to a custom field.
        /// </summary>
        /// <param name="customField">The name of the custom field</param>
        /// <param name="choice">The name of the new choice added to the custom field.</param>
        public void Groups_CustomField_Create_Choice(string customField, string choice)
        {
            // View the custom field's choices
            this.Groups_CustomField_View_Choices(customField);

            // Figure out how many options there are.  The new option is always the last one
            decimal options = this._selenium.GetXpathCount("//ul[@id='custom_field_select_list']/li");

            // Add a new choice
            this._selenium.Click("link=Add another");

            // Type the new choice in
            this._selenium.Type(string.Format("//ul[@id='custom_field_select_list']/li[{0}]/input[1]", options + 1), choice);

            // Submit
            this._selenium.ClickAndWaitForPageToLoad("submit_custom_field");
        }

        /// <summary>
        /// Updates the name, type, and description of a custom field.  
        /// </summary>
        /// <param name="currentFieldName">The name of the existing custom field.</param>
        /// <param name="currentFieldDescription">The description of the existing custom field.</param>
        /// <param name="currentFieldType">The type of custom field the existing custom field is.</param>
        /// <param name="fieldLabelUpdated">The updated name for the custom field.</param>
        /// <param name="fieldDescriptionUpdated">The updated description for the custom field.</param>
        /// <param name="fieldTypeUpdated">The updated type for the custom field. The custom field cannot be in use to change the type.</param>
        public void Groups_CustomField_Update_Field_Details(string currentFieldName, string currentFieldDescription, string currentFieldType, string fieldLabelUpdated, string fieldDescriptionUpdated, string fieldTypeUpdated)
        {
            // Navigate to groups->custom fields
            this._selenium.Navigate(Navigation.Groups.Administration.Custom_Fields);

            // Edit a custom field's name, the type, and/or description
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_CustomFields, currentFieldName, "Custom Field", null);
            this._generalMethods.SelectOptionFromGear((Int16)itemRow, "Edit field details", false);

            if (fieldLabelUpdated != null)
            {
                this._selenium.Type("custom_field_name", fieldLabelUpdated);
            }
            if (fieldTypeUpdated != null)
            {
                this._selenium.Select("field_type", fieldTypeUpdated);
            }
            if (fieldDescriptionUpdated != null)
            {
                this._selenium.Type("custom_field_description", fieldDescriptionUpdated);
            }
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_CustomField.Step2_SubmitButton_CreateCustomField);

            // Verify the custom field was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Groups_CustomFields, string.Format("{0} {1}", fieldLabelUpdated, fieldDescriptionUpdated), "Custom Field", null);
            Assert.AreEqual(string.Format("{0} \n {1}", fieldLabelUpdated, fieldDescriptionUpdated), this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Groups_CustomFields, itemRowUpdated)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Groups_CustomFields, currentFieldName, "Custom Field", null));
        }

        /// <summary>
        /// Updates all the choices for a given custom field.
        /// </summary>
        /// <param name="currentCustomFieldName">The name of the custom field.</param>
        /// <param name="fieldValuesUpdated">The updated values for a custom field's choices.</param>
        public void Groups_CustomField_Update_Field_Choices(string currentCustomFieldName, string[] fieldValuesUpdated)
        {
            // Navigate to groups->custom fields
            this._selenium.Navigate(Navigation.Groups.Administration.Custom_Fields);

            // Edit the options 
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_CustomFields, currentCustomFieldName, "Custom Field", null);
            this._generalMethods.SelectOptionFromGear((Int16)itemRow, "Edit user choices", true);

            // Change the values, based on the parameters
            for (int i = 0; i < fieldValuesUpdated.Length; i++)
            {
                this._selenium.Type(string.Format("//ul[@id='custom_field_select_list']/li[{0}]/input[1]", i + 1), fieldValuesUpdated[i]);
            }
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_CustomField.Step2_SubmitButton_CreateCustomField);
        }

        /// <summary>
        /// Updates a custom field's choice.
        /// </summary>
        /// <param name="customField">The name of the custom field.</param>
        /// <param name="fieldChoice">The name of the existing custom field's choice.</param>
        /// <param name="updatedFieldChoice">The updated name for a custom field's choice.</param>
        public void Groups_CustomField_Update_Field_Choice(string customField, string fieldChoice, string updatedFieldChoice)
        {
            // Navigate to groups->custom fields
            this._selenium.Navigate(Navigation.Groups.Administration.Custom_Fields);

            // Edit the options 
            this.Groups_CustomField_View_Choices(customField);

            // Change the values for the specified custom field \
            for (int count = 1; count <= this._selenium.GetXpathCount("//ul[@id='custom_field_select_list']/li"); count++)
            {
                if (this._selenium.GetValue(string.Format("//ul[@id='custom_field_select_list']/li[{0}]/input[1]", count)) == fieldChoice)
                {
                    this._selenium.Type(string.Format("//ul[@id='custom_field_select_list']/li[{0}]/input[1]", count), updatedFieldChoice);
                }
            }
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_CustomField.Step2_SubmitButton_CreateCustomField);
        }

        /// <summary>
        /// Views the choices of a custom field.
        /// </summary>
        /// <param name="customField">The name of the custom field.</param>
        public void Groups_CustomField_View_Choices(string customField)
        {
            // Navigate to groups->custom fields
            this._selenium.Navigate(Navigation.Groups.Administration.Custom_Fields);

            // View the custom field's choices
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_CustomFields, customField, "Custom Field", null);
            this._generalMethods.SelectOptionFromGear((Int16)itemRow, "Edit user choices", true);
        }

        public void Groups_CustomField_View_Edit_Details(string customField)
        {
            // Navigate to groups->custom fields
            this._selenium.Navigate(Navigation.Groups.Administration.Custom_Fields);

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_CustomFields, customField, "Custom Field", null);
            this._generalMethods.SelectOptionFromGear(Convert.ToInt16(itemRow), "Edit field details");
        }

        public void Groups_CustomField_View_Edit_Values(string customField)
        {
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_CustomFields, customField, "Custom Field", null);
            this._generalMethods.SelectOptionFromGear(Convert.ToInt16(itemRow), "Edit user choices");
        }

        public void Groups_CustomField_View_VerifyChoiceExists(string customFieldChoice)
        {
            for (int count = 1; count <= this._selenium.GetXpathCount("//ul[@id='custom_field_select_list']/li"); count++)
            {
                if (this._selenium.GetValue("//ul[@id='custom_field_select_list']/li[" + count + "]/input[1]") == customFieldChoice)
                    Assert.AreEqual(customFieldChoice, this._selenium.GetValue("//ul[@id='custom_field_select_list']/li[" + count + "]/input[1]"));
            }
        }

        /// <summary>
        /// Deletes a choice from a custom field.
        /// </summary>
        /// <param name="customField">The name of the custom field.</param>
        /// <param name="fieldValue">The value of the custom field to be deleted.</param>
        public void Groups_CustomField_Delete_Choice(string customField, string fieldValue)
        {
            // View the custom Field's choices
            this.Groups_CustomField_View_Choices(customField);

            // Delete the custom field value specified
            for (int count = 1; count <= this._selenium.GetXpathCount("//ul[@id='custom_field_select_list']/li"); count++)
            {
                if (this._selenium.GetValue("//ul[@id='custom_field_select_list']/li[" + count + "]/input[1]") == fieldValue)
                {
                    this._selenium.Click("//ul[@id='custom_field_select_list']/li[" + count + "]/a");
                    // Confirmation present if the custom field is in use
                    if (this._selenium.IsConfirmationPresent())
                    {
                        this._selenium.GetConfirmation();
                        this._selenium.ChooseOkOnNextConfirmation();
                        break;
                    }
                    else
                    {
                        break;
                    }
                }
            }
            this._selenium.ClickAndWaitForPageToLoad("submit_custom_field");
        }

        /// <summary>
        /// Deletes a custom field.
        /// </summary>
        /// <param name="customField">The name of the custom field.</param>
        public void Groups_CustomField_Delete(string customField)
        {
            // Navigate to groups->custom fields
            this._selenium.Navigate(Navigation.Groups.Administration.Custom_Fields);

            // Delete the custom field
            this._selenium.Click(string.Format("//table[@class='grid align_middle sortable-onload-0 no-arrow']/tbody/tr[*]/td[4]/ul/li[*]/a[text()='Delete custom field' and normalize-space(ancestor::tr/td[2]/text())='{0}']", customField));
            this._selenium.GetConfirmation();
            this._selenium.ChooseOkOnNextConfirmation();
            this._selenium.Refresh();
            this._selenium.WaitForPageToLoad("30000");

            // Verify the custom field was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Groups_CustomFields, customField, "Custom Field", null));
        }

        /// <summary>
        /// Deletes a custom field.
        /// </summary>
        /// <param name="customField">The name of the custom field.</param>
        public void Groups_CustomField_Delete_WebDriver(string customField)
        {
            // Navigate to groups->custom fields
            this._generalMethods.Navigate_Portal(Navigation.Groups.Administration.Custom_Fields);
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add"));

            // Delete the custom field
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_CustomFields, customField, "Custom Field", null);
            this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Delete custom field");
            //this._driver.FindElementByXPath(string.Format("//table[@class='grid align_middle sortable-onload-0 no-arrow']/tbody/tr[*]/td[4]/ul/li[*]/a[text()='Delete custom field' and normalize-space(ancestor::tr/td[2]/text())='{0}']", customField)).Click();
            this._driver.SwitchTo().Alert().Accept();
            //this._selenium.GetConfirmation();
            //this._selenium.ChooseOkOnNextConfirmation();

            // Verify the custom field was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_CustomFields, customField, "Custom Field", null));
        }

        #endregion Custom Fields

        #region Search Categories
        /// <summary>
        /// Creates a search category.
        /// </summary>
        /// <param name="categoryName">The name of the search category.</param>
        /// <param name="categoryDescription">The description of the search category.</param>
        /// <param name="categoryPublished">Flags the search category as published.  This will make it usable in InFellowship.</param>
        /// <param name="criteria">The criteria for the search category. Only standard fields.</param>
        public void Groups_SearchCategory_Create(string categoryName, string categoryDescription, bool categoryPublished, string[] criteria)
        {

            // Navigate to groups->search categories
            this._selenium.Navigate(Navigation.Groups.Administration.Search_Categories);

            // Unless the search category already exists, create it
            if (!this._selenium.IsElementPresent(string.Format("link={0}", categoryName)))
            {
                // Create a new search category
                this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.SearchCategoryManagement.Link_AddSearchCategory);

                // Specify the name, description, and if the search category is published/not published
                this._selenium.Type(GroupsAdministrationConstants.Wizard_SearchCategories.Step1_TextField_SearchCategoryName, categoryName);
                this._selenium.Type(GroupsAdministrationConstants.Wizard_SearchCategories.Step1_TextField_SearchCategoryDescription, categoryDescription);

                if (categoryPublished)
                {
                    this._selenium.Click(GroupsAdministrationConstants.Wizard_SearchCategories.Step1_Checkbox_Published);
                }

                // Next to step 2
                this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_SearchCategories.Step1_Button_Next);

                // Select the options
                foreach (string criteriaItem in criteria)
                {
                    decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_SearchCategories, criteriaItem, "Choose Criteria", null) + 1;
                    this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/p/input", TableIds.Groups_SearchCategories, itemRow));
                }

                // Submit
                this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.Wizard_SearchCategories.Step2_Button_CreateSearchCategory);

                // Verify the search category exists
                Assert.IsTrue(this._generalMethods.ItemExistsInTable(TableIds.Groups_SearchCategories_Index, categoryName, "Search Category", null));
            }
        }

        /// <summary>
        /// Updates the details of a search category.
        /// </summary>
        /// <param name="categoryName">The name of the category.</param>
        /// <param name="updateName">The updated name for the category.</param>
        /// <param name="updatedDescription">The updated description for the category.</param>
        public void Groups_SearchCategory_Update_Details(string categoryName, string updateName, string updatedDescription)
        {
            // View the search category
            this.Groups_SearchCategory_View(categoryName);

            // Edit the details of the search category
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.SearchCategoryManagement.Link_EditSearchCategoryDetails);

            // Update the information as necessary
            if (updateName != null)
                this._selenium.Type(GroupsAdministrationConstants.Wizard_SearchCategories.Step1_TextField_SearchCategoryName, updateName);
            if (updatedDescription != null)
                this._selenium.Type(GroupsAdministrationConstants.Wizard_SearchCategories.Step1_TextField_SearchCategoryDescription, updatedDescription);

            // Submit
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.SearchCategoryManagement.Button_SaveChanges_EditDetails);
        }

        /// <summary>
        /// Updates the criteria for a search category.
        /// </summary>
        /// <param name="categoryName">The name of the search category.</param>
        /// <param name="critera">The updated criteria for the search category.  Standard fields only.</param>
        public void Groups_SearchCategory_Update_Criteria(string categoryName, GeneralEnumerations.SearchCategoryCriteria[] critera)
        {
            // View the search category
            this.Groups_SearchCategory_View(categoryName);

            // Edit the criteria of the search category
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.SearchCategoryManagement.Link_EditSeachCategoryCriteria);

            // Update the criteria
            foreach (GeneralEnumerations.SearchCategoryCriteria criteriaItem in critera)
            {
                switch (criteriaItem)
                {
                    case GeneralEnumerations.SearchCategoryCriteria.AgeRange:
                        this._selenium.Click(TableIds.Groups_SearchCategories + "/tbody/tr[2]/td[1]/input");
                        break;
                    case GeneralEnumerations.SearchCategoryCriteria.Gender:
                        this._selenium.Click(TableIds.Groups_SearchCategories + "/tbody/tr[3]/td[1]/p/input");
                        break;
                    case GeneralEnumerations.SearchCategoryCriteria.MaritalStatus:
                        this._selenium.Click(TableIds.Groups_SearchCategories + "/tbody/tr[4]/td[1]/p/input");
                        break;
                    case GeneralEnumerations.SearchCategoryCriteria.Childcare:
                        this._selenium.Click(TableIds.Groups_SearchCategories + "/tbody/tr[5]/td[1]/p/input");
                        break;
                    default:
                        throw new Exception("Invalid choice provided");
                }
            }
            // Submit
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.SearchCategoryManagement.Button_SaveChanges_EditCriteria);
        }

        /// <summary>
        /// Deletes a search category.
        /// </summary>
        /// <param name="categoryName">The name of the search category.</param>
        public void Groups_SearchCategory_Delete(string categoryName)
        {

            // View the search category
            this.Groups_SearchCategory_View(categoryName);

            // Delete the search category
            this._selenium.ClickAndWaitForPageToLoad(GroupsAdministrationConstants.SearchCategoryManagement.Link_DeleteSearchCategory);
            Assert.IsTrue(Regex.IsMatch(this._selenium.GetConfirmation(), "^You are about to delete this category\\. You will not be able to undo this\\.\nAre you sure you want to delete it[\\s\\S]$"));

            // Verify the search category doesn't exist
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Groups_SearchCategories_Index, categoryName, "Search Category", null));
        }


        /// <summary>
        /// Views a search category.
        /// </summary>
        /// <param name="categoryName">The name of the search category.</param>
        public void Groups_SearchCategory_View(string categoryName)
        {
            // Is the link present to view the search category?
            if (this._selenium.IsElementPresent(string.Format("link={0}", categoryName)))
            {
                // It is.  Click it

            }

            // Are we viewing a search category?
            if (!this._selenium.GetLocation().Contains("/Groups/GroupCategories/View.aspx"))
            {
                // We aren't.  No idea where we are.  View the search category.
                this._selenium.Navigate(Navigation.Groups.Administration.Search_Categories);

                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", categoryName));
            }
            else
            {
                // We are.  Is it our search category?
                if (!this._selenium.IsTextPresent(categoryName))
                {
                    // It isn't. Tab back and view it
                    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Back);
                    this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", categoryName));
                }

                // It is our search category.  Do nothing.
            }
        }

        #endregion Search Categories

        #region Spans of Care

        /// <summary>
        /// Creates a Span of Care with no campuses or custom fields.
        /// </summary>
        /// <param name="name">Name of the span of care.</param>
        /// <param name="description">Description of the span of care.</param>
        /// <param name="groupTypes">The group types that make up this span of care.</param>
        /// <param name="criteria">The standard fields that make up this span of care. Pass in NotSpecified if no preference.</param>
        /// <param name="lowerAgeRange">The lower age range for this span of care. Can be null.</param>
        /// <param name="upperAgeRange">The upper age range for this span of care. Can be null.</param>
        /// <param name="childCare">Specify if childcare is provided or is not provided.</param>
        /// <param name="customFieldsAndChoices">A list of custom fields and the choices to select for that custom field.</param>
        public void Groups_SpanOfCare_Create_WebDriver(string name, string description, string[] groupTypes, [Optional] GeneralEnumerations.SpanOfCareCriteria[] criteria, [Optional, DefaultParameterValue(null)] string lowerAgeRange, [Optional, DefaultParameterValue(null)] string upperAgeRange, [Optional] bool? childCare, [Optional] List<Dictionary<string, List<string>>> customFieldsAndChoices)
        {
            // Navigate to groups->span of care
            this._generalMethods.Navigate_Portal(Navigation.Groups.Administration.Span_Of_Care);

            // Create a new span of Care
            this._driver.FindElementByLinkText("Add").Click();

            // Set the name and description
            this._driver.FindElementById("soc_name").SendKeys(name);

            if (string.IsNullOrEmpty(description))
            {
                this._driver.FindElementById("soc_desc").SendKeys(description);
            }

            // Next
            this._driver.FindElementByXPath(GeneralButtons.Next).Click();

            // Did we get validation?
            if (!this._generalMethods.IsTextPresentWebDriver("Span of care name should be unique."))
            {
                // Step 2
                if (groupTypes != null)
                {
                    foreach (string groupType in groupTypes)
                    {
                        this._driver.FindElementByXPath(string.Format("//input[@name='group_type' and normalize-space(ancestor::td/following-sibling::td/label/text())='{0}']", groupType)).Click();
                    }
                }

                // Next
                this._driver.FindElementByXPath(GeneralButtons.Next).Click();

                // Based on the passed parameters, check the appropriate items
                if (criteria != null)
                {
                    foreach (GeneralEnumerations.SpanOfCareCriteria criteriaItem in criteria)
                    {
                        switch (criteriaItem)
                        {
                            case GeneralEnumerations.SpanOfCareCriteria.Coed:
                                this._driver.FindElementById("chk_gender_coed").Click();
                                break;
                            case GeneralEnumerations.SpanOfCareCriteria.Male:
                                this._driver.FindElementById("chk_gender_male").Click();
                                break;
                            case GeneralEnumerations.SpanOfCareCriteria.Female:
                                this._driver.FindElementById("chk_gender_female").Click();
                                break;
                            case GeneralEnumerations.SpanOfCareCriteria.MarriedSingle:
                                this._driver.FindElementById("chk_marital_status_both").Click();
                                break;
                            case GeneralEnumerations.SpanOfCareCriteria.Married:
                                this._driver.FindElementById("chk_marital_status_married").Click();
                                break;
                            case GeneralEnumerations.SpanOfCareCriteria.Single:
                                this._driver.FindElementById("chk_marital_status_single").Click();
                                break;
                        }
                    }
                }

                // Age range
                if (!string.IsNullOrEmpty(lowerAgeRange))
                    new SelectElement(this._driver.FindElementById("age_range_min")).SelectByText(lowerAgeRange);

                if (upperAgeRange != null)
                    new SelectElement(this._driver.FindElementById("age_range_max")).SelectByText(upperAgeRange);

                // Child care
                if (childCare == true)
                {
                    this._driver.FindElementById("rb_childcare_yes").Click();
                }
                else if (childCare == false)
                {
                    this._driver.FindElementById("rb_childcare_no").Click();
                }
                else
                {
                    this._driver.FindElementById("rb_childcare_none").Click();
                }

                // Next to Step 4
                this._driver.FindElementByXPath(GeneralButtons.Next).Click();

                // Custom Fields
                if (customFieldsAndChoices != null)
                {
                    foreach (var customFieldAndChoices in customFieldsAndChoices)
                    {
                        foreach (var customField in customFieldAndChoices.Keys)
                        {
                            this._driver.FindElementByXPath(string.Format("//input[contains(@id, 'custom_field_')]/ancestor::div/following-sibling::div/label[text()='{0}']", customField)).Click();
                            decimal checkboxCount = this._driver.FindElementsByXPath(string.Format("//input[contains(@id, 'custom_field_')]/ancestor::div/following-sibling::div/label[text()='{0}']/ancestor::div/following-sibling::div/table/tbody/tr[child::th/input]", customField)).Count();
                            foreach (var customFieldChoice in customFieldAndChoices[customField])
                            {
                                for (int i = 1; i <= checkboxCount; i++)
                                {
                                    if (this._driver.FindElementByXPath(string.Format("//input[contains(@id, 'custom_field_')]/ancestor::div/following-sibling::div/label[normalize-space(text()='{0}')]/ancestor::div/following-sibling::div/table/tbody/tr[{1}]/td/label", customField, i)).Text == customFieldChoice)
                                    {
                                        this._driver.FindElementByXPath(string.Format("//input[contains(@id, 'custom_field_')]/ancestor::div/following-sibling::div/label[normalize-space(text()='{0}')]/ancestor::div/following-sibling::div/table/tbody/tr[{1}]/th/input", customFieldChoice, i)).Click();
                                    }
                                }
                            }
                        }
                    }
                }

                // Next to Step 5
                this._driver.FindElementByXPath(GeneralButtons.Next).Click();

                // Save this Span of Care
                this._driver.FindElementById(GeneralButtons.submitQuery).Click();

                // Back
                this._driver.FindElementByLinkText("Back").Click();

                // Verify
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_All, name, "Name"), "Newely created Span of Care was not present!");
                // this._driver.FindElementByLinkText(string.Format("link={0}", name)).Click();
                this._generalMethods.VerifyTextPresentWebDriver(name);
            }
            else
            {
                // We did.  Return out of the wizard.
                this._driver.FindElementByLinkText(GeneralLinks.RETURN).Click();
            }
        }

        /// <summary>
        /// Updates the name and description for a Span of Care.
        /// </summary>
        /// <param name="socName">Span of Care to be updated.</param>
        /// <param name="socUpdatedName">The updated name.</param>
        /// <param name="socUpdatedDescription">The updated description.</param>
        public void Groups_SpanOfCare_Update_Name_Description_WebDriver(string socName, string socUpdatedName, string socUpdatedDescription)
        {
            // Variables
            var currentDescription = string.Empty;

            // View a Span of Care
            this.Groups_SpanOfCare_View_WebDriver(socName);

            // Edit Step 1
            this._driver.FindElementByXPath(GroupsAdministrationConstants.SpanOfCareManagement.Link_EditStep1).Click();

            // Set the name
            this._driver.FindElementById("soc_name").SendKeys(socUpdatedName);

            // Update the description, if provided
            if (string.IsNullOrEmpty(socUpdatedDescription))
            {
                // Store the current description
                currentDescription = this._driver.FindElementById("soc_desc").Text;
                this._driver.FindElementById("soc_desc").SendKeys(socUpdatedDescription);
            }

            // Next to Step 2
            this._driver.FindElementByXPath(GeneralButtons.Next).Click();

            // Next to Step 3
            this._driver.FindElementByXPath(GeneralButtons.Next).Click();

            // Next to Step 4
            this._driver.FindElementByXPath(GeneralButtons.Next).Click();

            // Next to Step 5
            this._driver.FindElementByXPath(GeneralButtons.Next).Click();

            // Save this span of care
            this._driver.FindElementById(GeneralButtons.submitQuery).Click();

            // Back
            this._driver.FindElementByLinkText("Back").Click();

            if (!string.IsNullOrEmpty(socUpdatedDescription))
            {
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_All, string.Format("{0} {1}", socUpdatedName, socUpdatedDescription), "Name"), "Span of Care name and description was not updated correctly!");
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_All, string.Format("{0} {1}", socName, currentDescription), "Name"), "Span of Care name and description was not updated correctly!");
            }
            else
            {
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_All, string.Format("{0}", socUpdatedName), "Name"), "Span of Care name and description was not updated correctly!");
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_All, string.Format("{0}", socName), "Name"), "Span of Care name and description was not updated correctly!");
            }
        }

        /// <summary>
        /// Updates the marital status and gender criteria for a Span of Care. 
        /// </summary>
        /// <param name="socName">The name of the Span of Care.</param>
        /// <param name="updatedCriteria">The updated values for marital status and gender.</param>
        public void Groups_SpanOfCare_Update_Criteria(string socName, GeneralEnumerations.SpanOfCareCriteria[] updatedCriteria)
        {
            // View a Span of Care
            this.Groups_SpanOfCare_View_WebDriver(socName);

            // Update the criteria
            foreach (GeneralEnumerations.SpanOfCareCriteria updatedCriteriaItem in updatedCriteria)
            {
                switch (updatedCriteriaItem)
                {
                    case GeneralEnumerations.SpanOfCareCriteria.Coed:
                        this._selenium.Click("chk_gender_coed");
                        break;
                    case GeneralEnumerations.SpanOfCareCriteria.Male:
                        this._selenium.Click("chk_gender_male");
                        break;
                    case GeneralEnumerations.SpanOfCareCriteria.Female:
                        this._selenium.Click("chk_gender_female");
                        break;
                    case GeneralEnumerations.SpanOfCareCriteria.MarriedSingle:
                        this._selenium.Click("chk_marital_status_both");
                        break;
                    case GeneralEnumerations.SpanOfCareCriteria.Married:
                        this._selenium.Click("chk_marital_status_married");
                        break;
                    case GeneralEnumerations.SpanOfCareCriteria.Single:
                        this._selenium.Click("chk_marital_status_single");
                        break;
                }
            }

            // Next to Step 4
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Next);

            // Next to Step 5
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Next);

            // Save this span of care
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);

        }

        /// <summary>
        /// Adds an owner to a Span of Care.
        /// </summary>
        /// <param name="spanOfCare">The name of the span of care.</param>
        /// <param name="owner">The owner to be added to a Span of Care.</param>
        public void Groups_SpanOfCare_Update_AddOwner_WebDriver(string spanOfCare, string owner)
        {
            this.Groups_SpanOfCare_View_WebDriver(spanOfCare);


            // Unless the owner's table exists or the individual is already an owner, add them as an owner to the SOC
            if (!this._generalMethods.IsElementPresentWebDriver(By.XPath(TableIds.Groups_SpanOfCare_Owners)))
            {
                // Owner table isn't present.  No Owners exist
                this._driver.FindElementByXPath(GroupsAdministrationConstants.SpanOfCareManagement.Link_Owners_Add).Click();
                this._driver.FindElementById(GroupsAdministrationConstants.SpanOfCareManagement.TextField_Owners_Name_Search).SendKeys(owner);
                this._driver.FindElementById(GroupsAdministrationConstants.SpanOfCareManagement.Button_Owners_Search).Click();
                this._driver.FindElementById(GroupsAdministrationConstants.SpanOfCareManagement.Button_Owners_AddNew).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText(owner));

                //Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Giving_Batches, batchName, "Name", null));
                // this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_SpanOfCare_Owners, owner, "Name");

            }
            else
            {
                // Owner table is present.  Is the individual an owner?
                if (!this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_Owners, owner, "Name", null))
                {
                    // No they arent
                    this._driver.FindElementByXPath(GroupsAdministrationConstants.SpanOfCareManagement.Link_Owners_Add).Click();
                    this._driver.FindElementById(GroupsAdministrationConstants.SpanOfCareManagement.TextField_Owners_Name_Search).SendKeys(owner);
                    this._driver.FindElementById(GroupsAdministrationConstants.SpanOfCareManagement.Button_Owners_Search).Click();
                    this._driver.FindElementById(GroupsAdministrationConstants.SpanOfCareManagement.Button_Owners_AddNew).Click();

                    //Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_Owners, owner, "Name", "contains"));
                    this._generalMethods.VerifyTextPresentWebDriver(owner);
                }
            }
        }

        /// <summary>
        /// Removes an owner from a Span of Care.
        /// </summary>
        /// <param name="socName">The name of the span of care.</param>
        /// <param name="owner">The owner to be removed from the Span of Care.</param>
        public void Groups_SpanOfCare_Update_RemoveOwner_WebDriver(string socName, string owner)
        {
            // View the Span of Care
            this.Groups_SpanOfCare_View_WebDriver(socName);

            //var itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_SpanOfCare_Owners, owner, "Name", "contains") + 1;
            var itemRow = 0;
            var itemRows = this._generalMethods.GetTableRowCountWebDriver(TableIds.Groups_SpanOfCare_Owners);
            IWebElement table = this._driver.FindElementByXPath(TableIds.Groups_SpanOfCare_Owners);
            TestLog.WriteLine(string.Format("Item Rows: {0}", itemRows));

            for (int i = 1; i < itemRows; i++)
            {
                // /html/body/div/div[5]/div/div/div/div[2]/table/tbody/tr
                // /html/body/div/div[5]/div/div/div/div[2]/table/tbody/tr[2]/td
                // /html/body/div/div[5]/div/div/div/div[2]/table/tbody/tr[2]/td[3]
                // /html/body/div/div[5]/div/div/div/div[2]/table/tbody/tr[2]/td[3]
                //if (this._driver.FindElementByXPath(string.Format("//table/tbody/tr[{0}]/td[3]/", i)).Text.Contains(owner)) {
                try
                {

                    // /html/body/div/div[5]/div/div/div/div[2]/table/tbody/tr[2]/td[3]
                    TestLog.WriteLine(string.Format("Text[{1}]: {0}", table.FindElements(By.TagName("tr"))[i].FindElements(By.TagName("td"))[2].Text, i));
                    TestLog.WriteLine(string.Format("Owner: {0} ", owner));
                    if (table.FindElements(By.TagName("tr"))[i].FindElements(By.TagName("td"))[2].Text.Contains(owner))
                    {
                        TestLog.WriteLine("Chicken Dinner");
                        itemRow = i;
                        break;
                    }
                }
                catch (Exception e)
                {
                    TestLog.WriteLine("No Chicken Dinner");
                    log.Error(e.StackTrace.ToString());
                }

            }

            TestLog.WriteLine(string.Format("Row Found: {0}", itemRow + 1));

            if (itemRow == 0)
            {
                throw new WebDriverException(string.Format("Owner {0} was not found in table", owner));
            }
            else
            {
                this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[6]/form/input[4]", TableIds.Groups_SpanOfCare_Owners, itemRow + 1)).Click();
            }

            this._driver.SwitchTo().Alert().Accept();


            // Verify the owner was removed
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath(TableIds.Groups_SpanOfCare_Owners)))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare_Owners, owner, "Name", null));
            }
            else
            {
                Assert.IsTrue(this._driver.FindElementByTagName("html").Text.Contains("Currently, this span of care doesn't have any owners. Would you like to add one now ?"));
            }
        }

        /// <summary>
        /// Views a Span of Care.
        /// </summary>
        /// <param name="selenium"></param>
        /// <param name="socName">The name of the Span of care.</param>
        public void Groups_SpanOfCare_View_WebDriver(string socName)
        {

            // Are we already on the Index page?
            if (this._driver.Url.Contains("Groups/GroupSoc/Index.aspx"))
            {
                // We are.  View your Span of Care.
                this._driver.FindElementByLinkText(string.Format("{0}", socName)).Click();
            }

            // We were not.  Are we viewing a Span of Care?
            if (!this._driver.Url.Contains("Groups/GroupSoc/Show.aspx"))
            {
                // We aren't.  No idea where we are.  Navigate to Groups -> Administration -> Span of Care and click the link.
                this._generalMethods.Navigate_Portal(Navigation.Groups.Administration.Span_Of_Care);
                this._driver.FindElementByLinkText(string.Format("{0}", socName)).Click();
            }
            else
            {
                // We are.  Is this our Span of Care?
                if (!this._generalMethods.IsTextPresentWebDriver(socName))
                {
                    // It isn't. Tab back and view the span of care
                    this._driver.FindElementByLinkText("Back").Click();
                    this._driver.FindElementByLinkText(string.Format("{0}", socName)).Click();
                }

                // It is our Span of Care. Do nothing.
            }
        }

        /// <summary>
        /// Deletes a Span of Care.
        /// </summary>
        /// <param name="socName">The name of the Span of care.</param>
        public void Groups_SpanOfCare_Delete(string socName)
        {
            // Navigate to groups->span of care
            this._selenium.Navigate(Navigation.Groups.Administration.Span_Of_Care);

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_SpanOfCare, socName, "Name", null) + 1;

            // Delete button
            this._selenium.Click(string.Format("//table[@id='']/tbody/tr[{0}]/td[4]/form/input[3]", itemRow));

            this._selenium.GetConfirmation();
            this._selenium.ChooseOkOnNextConfirmation();

            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Groups_SpanOfCare, socName, "Name", null), "Deleted Span of Care was still present!");
        }

        /// <summary>
        /// Deletes a Span of Care.
        /// </summary>
        /// <param name="socName">The name of the Span of care.</param>
        public void Groups_SpanOfCare_Delete_WebDriver(string socName)
        {
            // Navigate to groups->span of care
            this._generalMethods.Navigate_Portal(Navigation.Groups.Administration.Span_Of_Care);

            var itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_SpanOfCare, socName, "Name", null) + 1;

            // Delete button
            this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[4]/form/input[3]", itemRow)).Click();

            this._driver.SwitchTo().Alert().Accept();

            //If there are none, then all is deleted. If there are some check if not there.
            if (!this._generalMethods.IsTextPresentWebDriver("There are no Spans of Care defined"))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Groups_SpanOfCare, socName, "Name", null), "Deleted Span of Care was still present!");
            }
        }


        #endregion Span of Care

        #region Groups
        /// <summary>
        /// Creates a group. Skips the location and schedule creation.
        /// </summary>
        /// <param name="groupType">The group type the group belongs to.</param>
        /// <param name="groupName">The name for the group.</param>
        /// <param name="groupDescription">The description for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="searchable">Determines if the group is searchable or not.  This will make it visible InFellowship and turn on Tell a Friend.</param>
        [Obsolete]
        public void Groups_Group_Create(string groupType, string groupName, string groupDescription, string startDate, bool searchable)
        {
            // Is the new group link already present? 
            if (this._selenium.IsElementPresent("//a[contains(@href, '/Groups/Group/Step1.aspx')]"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._selenium.IsElementPresent(string.Format("link=Add another {0} group", groupType)))
            {
                // We are. Click the link.
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link=Add another {0} group", groupType));
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._selenium.IsElementPresent("link=Add another group"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("link=Add another group");
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");

                // Step 1
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // Step 2
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName, groupName);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription, groupDescription);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate, startDate);

            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable))
                if (searchable == false)
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable);

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next);

            // Does the group already exist?
            if (!this._selenium.IsTextPresent("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Skip Step 3
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Link_SkipThisStep);

                // Step 4
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Link_SkipThisStep);

                // Step 5
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next);
            }
            else
            {
                // It does. Leave the wizard.
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }

        }

        /// <summary>
        /// Creates a group with a physical location.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="startDate">The start date of the group.</param>
        /// <param name="searchable">Specifies if the group is searchable/unsearchable.</param>
        /// <param name="locationName">The name of the location.</param>
        /// <param name="locationDescription">The description of the location.</param>
        /// <param name="privateLocation">Specifies if the location is private or not.</param>
        /// <param name="streetOne">Street one of the location.</param>
        /// <param name="streetTwo">Street two of the location.</param>
        /// <param name="city">The city the location is in.</param>
        /// <param name="state">The state the location is in.</param>
        /// <param name="zipCode">The zipcode for the location.</param>
        [Obsolete]
        public void Groups_Group_Create(string groupType, string groupName, string groupDescription, string startDate, bool searchable, string locationName, string locationDescription, bool privateLocation, string streetOne, string streetTwo, string city, string state, string zipCode)
        {
            // Is the new group link already present? 
            if (this._selenium.IsElementPresent("//a[contains(@href, '/Groups/Group/Step1.aspx')]"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._selenium.IsElementPresent(string.Format("link=Add another {0} group", groupType)))
            {
                // We are. Click the link.
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link=Add another {0} group", groupType));
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._selenium.IsElementPresent("link=Add another group"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("link=Add another group");
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");

                // Step 1
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // Step 2
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName, groupName);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription, groupDescription);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate, startDate);

            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable) == true)
                if (searchable == false)
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable);

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next);

            // Does the group already exist?
            if (!this._selenium.IsTextPresent("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Skip Step 3
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Link_SkipThisStep);

                // Step 4
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationName, locationName);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationDescription, locationDescription);

                if (privateLocation)
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Checkbox_Private_Location);

                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address1, streetOne);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address2, streetTwo);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_City, city);
                this._selenium.Select(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Dropdown_State, string.Format("label={0}", state));
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Zipcode, zipCode);

                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Button_Next);

                // Step 5
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next);
            }

            else
            {
                // It does. Leave the wizard.
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }
        }

        /// <summary>
        /// Creates a group with a physical location and a campus.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date of the group.</param>
        /// <param name="groupDescription">Specifies if childcare is provided.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="searchable">Specifies if the group is searchable/unsearchable.</param>
        /// <param name="locationName">The name of the location.</param>
        /// <param name="locationDescription">The description of the location.</param>
        /// <param name="privateLocation">Specifies if the location is private or not.</param>
        /// <param name="streetOne">Street one of the location.</param>
        /// <param name="streetTwo">Street two of the location.</param>
        /// <param name="city">The city the location is in.</param>
        /// <param name="state">The state the location is in.</param>
        /// <param name="zipCode">The zipcode for the location.</param>
        [Obsolete]
        public void Groups_Group_Create(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string locationName, string locationDescription, bool privateLocation, string streetOne, string streetTwo, string city, string state, string zipCode)
        {
            // Is the new group link already present? 
            if (this._selenium.IsElementPresent("//a[contains(@href, '/Groups/Group/Step1.aspx')]"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._selenium.IsElementPresent(string.Format("link=Add another {0} group", groupType)))
            {
                // We are. Click the link.
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link=Add another {0} group", groupType));
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._selenium.IsElementPresent("link=Add another group"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("link=Add another group");
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");

                // Step 1
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // Step 2
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName, groupName);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription, groupDescription);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate, startDate);

            // Specify the campus
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    this._selenium.Select(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus, campus);
                }
            }

            // Is childcare provided?
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare))
            {
                if (childcareProvided)
                {
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare);
                }
            }

            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable) == true)
                if (searchable == false)
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable);

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next);

            // Does the group already exist?
            if (!this._selenium.IsTextPresent("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Skip Step 3
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Link_SkipThisStep);

                // Step 4
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationName, locationName);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationDescription, locationDescription);

                if (privateLocation)
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Checkbox_Private_Location);

                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address1, streetOne);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address2, streetTwo);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_City, city);
                this._selenium.Select(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Dropdown_State, string.Format("label={0}", state));
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Zipcode, zipCode);

                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Button_Next);

                // Step 5
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next);
            }

            else
            {
                // It does. Leave the wizard.
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }
        }

        /// <summary>
        /// Creates a group with a one time event schedule.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="childcareProvided">Is childcare provided?</param>
        /// <param name="searchable">Is the group searchable?</param>
        /// <param name="scheduleStartDate">The start date for the schedule.</param>
        /// <param name="scheduleStartTime">The start time for the schedule.</param>
        /// <param name="endTime">The end time for the schedule.</param>
        [Obsolete]
        public void Groups_Group_Create(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string scheduleStartDate, string scheduleStartTime, string endTime)
        {
            // Is the new group link already present? 
            if (this._selenium.IsElementPresent("//a[contains(@href, '/Groups/Group/Step1.aspx')]"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._selenium.IsElementPresent(string.Format("link=Add another {0} group", groupType)))
            {
                // We are. Click the link.
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link=Add another {0} group", groupType));
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._selenium.IsElementPresent("link=Add another group"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("link=Add another group");
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");

                // Step 1
                this._selenium.ClickAndWaitForPageToLoad("link=" + groupType);
            }

            // Step 2
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName, groupName);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription, groupDescription);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate, startDate);

            // Specify the campus
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    this._selenium.Select(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus, campus);
                }
            }

            // Is childcare provided?
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare))
            {
                if (childcareProvided)
                {
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare);
                }
            }

            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable) == true)
                if (searchable == false)
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable);

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next);

            // Does the group already exist?
            if (!this._selenium.IsTextPresent("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Step 3
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_DateControl_ScheduleStartDate, scheduleStartDate);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleStartTime, scheduleStartTime);
                if (!string.IsNullOrEmpty(endTime))
                {
                    this._selenium.ClickAndWaitForCondition(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Checkbox_ScheduleEndTime, this._javascript.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime), "5000");
                    this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime, endTime);
                }

                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Button_Next);

                // Skip Step 4
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Link_SkipThisStep);

                // Step 5
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next);
            }

            else
            {
                // It does. Leave the wizard.
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }
        }

        /// <summary>
        /// Creates a group with a weekly schedule.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="childcareProvided">Is childcare provided?</param>
        /// <param name="searchable">Is the group searchable?</param>
        /// <param name="scheduleStartDate">The start date for the schedule.</param>
        /// <param name="scheduleStartTime">The start time for the schedule.</param>
        /// <param name="endTime">The end time for the schedule.</param>
        /// <param name="daysOfWeek">The days the group meets.</param>
        /// <param name="reoccurance">The reoccurance of the schedule</param>
        /// <param name="endDate">The end date for the schedule.</param>
        [Obsolete]
        public void Groups_Group_Create(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string scheduleStartDate, string scheduleStartTime, string endTime, GeneralEnumerations.WeeklyScheduleDays[] daysOfWeek, string reoccurance, string endDate)
        {
            // Is the new group link already present? 
            if (this._selenium.IsElementPresent("//a[contains(@href, '/Groups/Group/Step1.aspx')]"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._selenium.IsElementPresent(string.Format("link=Add another {0} group", groupType)))
            {
                // We are. Click the link.
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link=Add another {0} group", groupType));
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._selenium.IsElementPresent("link=Add another group"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("link=Add another group");
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");

                // Step 1
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // Step 2
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName, groupName);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription, groupDescription);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate, startDate);

            // Specify the campus
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    this._selenium.Select(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus, campus);
                }
            }

            // Is childcare provided?
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare))
            {
                if (childcareProvided)
                {
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare);
                }
            }

            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable) == true)
            {
                if (searchable == false)
                {
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable);
                }
            }

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next);

            // Does the group already exist?
            if (!this._selenium.IsTextPresent("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Step 3
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_DateControl_ScheduleStartDate, scheduleStartDate);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleStartTime, scheduleStartTime);
                if (!string.IsNullOrEmpty(endTime))
                {
                    this._selenium.ClickAndWaitForCondition(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Checkbox_ScheduleEndTime, this._javascript.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime), "5000");
                    this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime, endTime);
                }

                // Specify the weekly schedule
                this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_RadioButton_WeeklyEvent);
                foreach (GeneralEnumerations.WeeklyScheduleDays weekday in daysOfWeek)
                {
                    this._selenium.Click(string.Format("//span[@title='{0}']/input", weekday.ToString()));
                }

                // Specify the occurance
                this._selenium.Select(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_DropDown_Reoccurance_Weekly, reoccurance);

                // Specify an end date
                if (!string.IsNullOrEmpty(endDate))
                {
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Checkbox_ScheduleEndTime);
                    this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndDate, endDate);
                }

                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Button_Next);

                // Skip Step 4
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Link_SkipThisStep);

                // Step 5
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next);
            }

            else
            {
                // It does. Leave the wizard.
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }
        }

        /// <summary>
        /// Creates a group with an online location.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="childcareProvided">Is childcare provided?</param>
        /// <param name="searchable">Is the group searchable?</param>
        /// <param name="groupURL">The URL for the group</param>
        [Obsolete]
        public void Groups_Group_Create(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string locationName, string groupURL)
        {
            // Is the new group link already present? 
            if (this._selenium.IsElementPresent("//a[contains(@href, '/Groups/Group/Step1.aspx')]"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._selenium.IsElementPresent(string.Format("link=Add another {0} group", groupType)))
            {
                // We are. Click the link.
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link=Add another {0} group", groupType));
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._selenium.IsElementPresent("link=Add another group"))
            {
                // It is. Click the link. Specify the group type.
                this._selenium.ClickAndWaitForPageToLoad("link=Add another group");
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/Step1.aspx')]");

                // Step 1
                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupType));
            }

            // Step 2
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName, groupName);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription, groupDescription);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate, startDate);

            // Specify the campus
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    this._selenium.Select(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus, campus);
                }
            }

            // Is childcare provided?
            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare))
            {
                if (childcareProvided)
                {
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare);
                }
            }

            if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable) == true)
            {
                if (!searchable)
                {
                    this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable);
                }
            }

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next);

            // Does the group already exist?
            if (!this._selenium.IsTextPresent("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                //  Skip Step 3
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Link_SkipThisStep);

                // Specify an online location
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationName, locationName);
                this._selenium.Click(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_RadioButton_MeetsOnline);
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_URL, groupURL);
                this._selenium.Click(GeneralButtons.submitQuery);

                // Save the group
                this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
            }

            else
            {
                // It does. Leave the wizard.
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }
        }

        /// <summary>
        /// Creates a group. Skips the location and schedule creation.
        /// </summary>
        /// <param name="groupType">The group type the group belongs to.</param>
        /// <param name="groupName">The name for the group.</param>
        /// <param name="groupDescription">The description for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="searchable">Determines if the group is searchable or not.  This will make it visible InFellowship and turn on Tell a Friend.</param>
        public void Groups_Group_Create_WebDriver(string groupType, string groupName, string groupDescription, string startDate, bool searchable)
        {
            // Is the new group link already present? 
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(string.Format("Add another {0} group", groupType))))
            {
                // We are. Click the link.
                this._driver.FindElementByLinkText(string.Format("Add another {0} group", groupType)).Click();
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Add another group")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByLinkText("Add another group").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();

                // Step 1
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Step 2
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName).SendKeys(groupName);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription).SendKeys(groupDescription);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate).Clear();
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate).SendKeys(startDate);

            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable)))
                if (searchable == false)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable).Click();

            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next).Click();

            // Does the group already exist?
            if (!this._generalMethods.IsTextPresentWebDriver("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Skip Step 3
                this._driver.FindElementByLinkText("Skip this step →").Click();

                // Step 4
                this._driver.FindElementByLinkText("Skip this step →").Click();

                // Step 5
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next).Click();
            }
            else
            {
                // It does. Leave the wizard.
                this._driver.FindElementByLinkText("RETURN").Click();
            }

        }

        /// <summary>
        /// Creates a group with a physical location.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="startDate">The start date of the group.</param>
        /// <param name="searchable">Specifies if the group is searchable/unsearchable.</param>
        /// <param name="locationName">The name of the location.</param>
        /// <param name="locationDescription">The description of the location.</param>
        /// <param name="privateLocation">Specifies if the location is private or not.</param>
        /// <param name="streetOne">Street one of the location.</param>
        /// <param name="streetTwo">Street two of the location.</param>
        /// <param name="city">The city the location is in.</param>
        /// <param name="state">The state the location is in.</param>
        /// <param name="zipCode">The zipcode for the location.</param>
        public void Groups_Group_Create_WebDriver(string groupType, string groupName, string groupDescription, string startDate, bool searchable, string locationName, string locationDescription, bool privateLocation, string streetOne, string streetTwo, string city, string state, string zipCode)
        {
            // Is the new group link already present? 
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(string.Format("Add another {0} group", groupType))))
            {
                // We are. Click the link.
                this._driver.FindElementByLinkText(string.Format("Add another {0} group", groupType)).Click();
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Add another group")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByLinkText("Add another group").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();

                // Step 1
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Step 2
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName).SendKeys(groupName);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription).SendKeys(groupDescription);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate).SendKeys(startDate);

            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable)))
                if (searchable == false)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable).Click();

            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next).Click();

            // Does the group already exist?
            if (!this._generalMethods.IsTextPresentWebDriver("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Skip Step 3
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Link_SkipThisStep).Click();

                // Step 4
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationName).SendKeys(locationName);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationDescription).SendKeys(locationDescription);

                if (privateLocation)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Checkbox_Private_Location).Click();

                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address1).SendKeys(streetOne);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address2).SendKeys(streetTwo);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_City).SendKeys(city);
                new SelectElement(this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Dropdown_State)).SelectByText(state);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Zipcode).SendKeys(zipCode);

                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Button_Next).Click();

                // Step 5
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next).Click();
            }
            else
            {
                // It does. Leave the wizard.
                this._driver.FindElementByLinkText("RETURN").Click();
            }
        }

        /// <summary>
        /// Creates a group with a physical location and a campus.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date of the group.</param>
        /// <param name="groupDescription">Specifies if childcare is provided.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="searchable">Specifies if the group is searchable/unsearchable.</param>
        /// <param name="locationName">The name of the location.</param>
        /// <param name="locationDescription">The description of the location.</param>
        /// <param name="privateLocation">Specifies if the location is private or not.</param>
        /// <param name="streetOne">Street one of the location.</param>
        /// <param name="streetTwo">Street two of the location.</param>
        /// <param name="city">The city the location is in.</param>
        /// <param name="state">The state the location is in.</param>
        /// <param name="zipCode">The zipcode for the location.</param>
        public void Groups_Group_Create_WebDriver(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string locationName, string locationDescription, bool privateLocation, string streetOne, string streetTwo, string city, string state, string zipCode)
        {
            // Is the new group link already present? 
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(string.Format("Add another {0} group", groupType))))
            {
                // We are. Click the link.
                this._driver.FindElementByLinkText(string.Format("Add another {0} group", groupType)).Click();
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Add another group")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByLinkText("Add another group").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();

                // Step 1
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Step 2
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName).SendKeys(groupName);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription).SendKeys(groupDescription);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate).SendKeys(startDate);

            // Specify the campus
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    new SelectElement(this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)).SelectByText(campus);
                }
            }

            // Is childcare provided?
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare)))
            {
                if (childcareProvided)
                {
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare).Click();
                }
            }

            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable)))
                if (searchable == false)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable).Click();

            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next).Click();

            // Does the group already exist?
            if (!this._generalMethods.IsTextPresentWebDriver("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Skip Step 3
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Link_SkipThisStep).Click();

                // Step 4
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationName).SendKeys(locationName);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationDescription).SendKeys(locationDescription);

                if (privateLocation)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Checkbox_Private_Location).Click();

                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address1).SendKeys(streetOne);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Address2).SendKeys(streetTwo);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_City).SendKeys(city);
                new SelectElement(this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Dropdown_State)).SelectByText(state);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_Zipcode).SendKeys(zipCode);

                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Button_Next).Click();

                // Step 5
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next).Click();
            }
            else
            {
                // It does. Leave the wizard.
                this._driver.FindElementByLinkText("RETURN").Click();
            }

        }

        /// <summary>
        /// Creates a group with a one time event schedule.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="childcareProvided">Is childcare provided?</param>
        /// <param name="searchable">Is the group searchable?</param>
        /// <param name="scheduleStartDate">The start date for the schedule.</param>
        /// <param name="scheduleStartTime">The start time for the schedule.</param>
        /// <param name="endTime">The end time for the schedule.</param>
        public void Groups_Group_Create_WebDriver(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string scheduleStartDate, string scheduleStartTime, string endTime)
        {
            // Is the new group link already present? 
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(string.Format("Add another {0} group", groupType))))
            {
                // We are. Click the link.
                this._driver.FindElementByLinkText(string.Format("Add another {0} group", groupType)).Click();
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Add another group")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByLinkText("Add another group").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();

                // Step 1
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Step 2
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName).SendKeys(groupName);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription).SendKeys(groupDescription);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate).SendKeys(startDate);

            // Specify the campus
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    new SelectElement(this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)).SelectByText(campus);
                }
            }

            // Is childcare provided?
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare)))
            {
                if (childcareProvided)
                {
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare).Click();
                }
            }

            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable)))
                if (searchable == false)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable).Click();

            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next).Click();

            // Does the group already exist?
            if (!this._generalMethods.IsTextPresentWebDriver("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Step 3
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_DateControl_ScheduleStartDate).SendKeys(scheduleStartDate);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleStartTime).SendKeys(scheduleStartTime);
                if (!string.IsNullOrEmpty(endTime))
                {
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Checkbox_ScheduleEndTime).Click();
                    new WebDriverWait(this._driver, TimeSpan.FromSeconds(5000)).Until(ExpectedConditions.ElementIsVisible(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime)));
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime).SendKeys(endTime);
                }

                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Button_Next);

                // Step 4
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Link_SkipThisStep).Click();

                // Step 5
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next).Click();
            }
            else
            {
                // It does. Leave the wizard.
                this._driver.FindElementByLinkText("RETURN").Click();
            }

        }

        /// <summary>
        /// Creates a group with a weekly schedule.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="childcareProvided">Is childcare provided?</param>
        /// <param name="searchable">Is the group searchable?</param>
        /// <param name="scheduleStartDate">The start date for the schedule.</param>
        /// <param name="scheduleStartTime">The start time for the schedule.</param>
        /// <param name="endTime">The end time for the schedule.</param>
        /// <param name="daysOfWeek">The days the group meets.</param>
        /// <param name="reoccurance">The reoccurance of the schedule</param>
        /// <param name="endDate">The end date for the schedule.</param>
        public void Groups_Group_Create_WebDriver(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string scheduleStartDate, string scheduleStartTime, string endTime, GeneralEnumerations.WeeklyScheduleDays[] daysOfWeek, string reoccurance, string endDate)
        {
            // Is the new group link already present? 
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(string.Format("Add another {0} group", groupType))))
            {
                // We are. Click the link.
                this._driver.FindElementByLinkText(string.Format("Add another {0} group", groupType)).Click();
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Add another group")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByLinkText("Add another group").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();

                // Step 1
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Step 2
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName).SendKeys(groupName);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription).SendKeys(groupDescription);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate).SendKeys(startDate);

            // Specify the campus
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    new SelectElement(this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)).SelectByText(campus);
                }
            }

            // Is childcare provided?
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare)))
            {
                if (childcareProvided)
                {
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare).Click();
                }
            }

            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable)))
                if (searchable == false)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable).Click();

            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next).Click();

            // Does the group already exist?
            if (!this._generalMethods.IsTextPresentWebDriver("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Step 3
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_DateControl_ScheduleStartDate).SendKeys(scheduleStartDate);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleStartTime).SendKeys(scheduleStartTime);
                if (!string.IsNullOrEmpty(endTime))
                {
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Checkbox_ScheduleEndTime).Click();
                    new WebDriverWait(this._driver, TimeSpan.FromSeconds(5000)).Until(ExpectedConditions.ElementIsVisible(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime)));
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndTime).SendKeys(endTime);
                }

                // Specify the weekly schedule
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_RadioButton_WeeklyEvent).Click();
                foreach (GeneralEnumerations.WeeklyScheduleDays weekday in daysOfWeek)
                {
                    this._driver.FindElementByXPath(string.Format("//span[@title='{0}']/input", weekday.ToString())).Click();
                }

                // Specify the occurance
                new SelectElement(this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_DropDown_Reoccurance_Weekly)).SelectByText(reoccurance);

                // Specify an end date
                if (!string.IsNullOrEmpty(endDate))
                {
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Checkbox_ScheduleEndTime).Click();
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_TextField_ScheduleEndDate).SendKeys(endDate);
                }

                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Button_Next).Click();

                // Step 4
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_Link_SkipThisStep).Click();

                // Step 5
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step5_Button_Next).Click();
            }
            else
            {
                // It does. Leave the wizard.
                this._driver.FindElementByLinkText("RETURN").Click();
            }

        }

        /// <summary>
        /// Creates a group with an online location.
        /// </summary>
        /// <param name="groupType">The name of the group type.</param>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="groupDescription">The description of the group.</param>
        /// <param name="campus">The campus for the group.</param>
        /// <param name="startDate">The start date for the group.</param>
        /// <param name="childcareProvided">Is childcare provided?</param>
        /// <param name="searchable">Is the group searchable?</param>
        /// <param name="groupURL">The URL for the group</param>
        public void Groups_Group_Create_WebDriver(string groupType, string groupName, string groupDescription, string campus, string startDate, bool childcareProvided, bool searchable, string locationName, string groupURL)
        {
            // Is the new group link already present? 
            if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Did we just create a group and are we adding another group of the same group type?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(string.Format("Add another {0} group", groupType))))
            {
                // We are. Click the link.
                this._driver.FindElementByLinkText(string.Format("Add another {0} group", groupType)).Click();
            }

            // Did we just create a group and is the "Add another group link present?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText("Add another group")))
            {
                // It is. Click the link. Specify the group type.
                this._driver.FindElementByLinkText("Add another group").Click();
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // We cannot figure out where we are.  Groups -> View All and add a group.
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                this._driver.FindElementByXPath("//a[contains(@href, '/Groups/Group/Step1.aspx')]").Click();

                // Step 1
                this._driver.FindElementByLinkText(string.Format("{0}", groupType)).Click();
            }

            // Step 2
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupName).SendKeys(groupName);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_TextField_GroupDescription).SendKeys(groupDescription);
            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DateControl_StartDate).SendKeys(startDate);

            // Specify the campus
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)))
            {
                if (!string.IsNullOrEmpty(campus))
                {
                    new SelectElement(this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_DropDown_Campus)).SelectByText(campus);
                }
            }

            // Is childcare provided?
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare)))
            {
                if (childcareProvided)
                {
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Childcare).Click();
                }
            }

            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable)))
                if (searchable == false)
                    this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Checkbox_Searchable).Click();

            this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step2_Button_Next).Click();

            // Does the group already exist?
            if (!this._generalMethods.IsTextPresentWebDriver("A group with this name already exists. Please create a unique group name."))
            {
                // It does not.

                // Skip Step 3
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step3_Link_SkipThisStep).Click();

                // Specify an online location
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_LocationName).SendKeys(locationName);
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_RadioButton_MeetsOnline).Click();
                this._driver.FindElementById(GroupsByGroupTypeConstants.Wizard_GroupCreation.Step4_TextField_URL).SendKeys(groupURL);
                this._driver.FindElementById(GeneralButtons.submitQuery).Click();

                // Save the group
                this._driver.FindElementById(GeneralButtons.submitQuery).Click();
            }
            else
            {
                // It does. Leave the wizard.
                this._driver.FindElementByLinkText("RETURN").Click();
            }

        }

        /// <summary>
        /// Views a 
        /// </summary>
        /// <param name="groupName"></param>
        /// <param name="groupClassification"></param>
        public void Groups_Groups_View(string groupName, string groupClassification)
        {
            // Navigate to groups->view all if we are not currently on the page
            if (!this._selenium.GetLocation().Contains("/Groups/Group/View.aspx"))
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
            }

            // If a classification is specified, select it, if not, select the 'All' tab
            string command = !string.IsNullOrEmpty(groupClassification) ? string.Format("//ul[@id='criteria_options']/li/a[text()='{0}']", groupClassification) : "link=All";
            this._selenium.ClickAndWaitForPageToLoad(command);

            // View the group
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_ViewAll_GroupList_AllTab, groupName, "Group", "contains");
            string xPath = string.IsNullOrEmpty(groupClassification) ? string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Groups_ViewAll_GroupList_AllTab, itemRow + 1) : string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Groups_ViewAll_GroupList_AllTab, itemRow + 1);
            this._selenium.ClickAndWaitForPageToLoad(xPath);
        }

        /// <summary>
        /// Views a 
        /// </summary>
        /// <param name="groupName"></param>
        /// <param name="groupClassification"></param>
        public void Groups_Groups_View_WebDriver(string groupName, string groupClassification)
        {
            // Navigate to groups->view all if we are not currently on the page
            if (!this._driver.Url.Contains("/Groups/Group/View.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
            }

            // If a classification is specified, select it, if not, select the 'All' tab
            //string command = !string.IsNullOrEmpty(groupClassification) ? string.Format("//ul[@id='criteria_options']/li/a[text()='{0}']", groupClassification) : "link=All";
            if (!string.IsNullOrEmpty(groupClassification))
            {
                string command = string.Format("//ul[@id='criteria_options']/li/a[text()='{0}']", groupClassification);
                this._driver.FindElementByXPath(command).Click();
            }
            else
            {
                this._driver.FindElementByPartialLinkText("All").Click();

            }

            // View the group
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_ViewAll_GroupList_AllTab, groupName, "Group", "contains");
            string xPath = string.IsNullOrEmpty(groupClassification) ? string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Groups_ViewAll_GroupList_AllTab, itemRow + 1) : string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Groups_ViewAll_GroupList_AllTab, itemRow + 1);
            TestLog.WriteLine("XPath: {0}", xPath);
            this._driver.FindElementByXPath(xPath).Click();
        }

        /// <summary>
        /// Views a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_View(string groupName)
        {
            // Are we viewing the index page for a group?
            if (this._selenium.GetLocation().Contains("/Groups/Group/View.aspx"))
            {
                // We are. Is this our group?
                if (!(this._selenium.GetText("//div[@id='main_content']/div[1]/div[2]/p[@class='text_big_serif']") == groupName))
                {
                    // It isn't.  Groups -> View All and find it.
                    this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                    // How many pages are there?
                    int numofPages = (Int16)this._selenium.GetXpathCount("//div[@class='grid_controls']/ul/li");
                    if (numofPages > 0)
                    {
                        // Cycle through each page, starting on page 1
                        for (int pageIndex = 2; pageIndex <= numofPages; pageIndex++)
                        {
                            if (this._selenium.IsElementPresent(string.Format("link={0}", groupName)))
                            {
                                this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupName));
                                break;
                            }
                            else
                            {
                                this._selenium.ClickAndWaitForPageToLoad(string.Format("//div[@class='grid_controls']/ul/li[*]/a[text()='{0}']", pageIndex));
                            }
                        }
                    }
                    else
                    {
                        this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupName));
                    }
                }
            }

            // Are we viewing the settings of a group?
            else if (this._selenium.IsElementPresent(GroupsByGroupTypeConstants.GroupManagement.Link_EditGroupDetails) && this._selenium.IsTextPresent(groupName) && this._selenium.GetLocation().Contains("Groups/Group/Edit.aspx"))
            {
                // We are. Tab Back
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Back);
            }

            // We cannot figure out where we are. Groups -> View All and find the group
            else
            {
                this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
                // How many pages are there?
                int numofPages = (Int16)this._selenium.GetXpathCount("//div[@class='grid_controls']/ul/li");
                if (numofPages > 0)
                {
                    // Cycle through each page, starting on page 1
                    for (int pageIndex = 1; pageIndex <= numofPages; pageIndex++)
                    {
                        if (this._selenium.IsElementPresent(string.Format("link={0}", groupName)))
                        {
                            this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupName));
                            break;
                        }
                        else
                        {
                            this._selenium.ClickAndWaitForPageToLoad(string.Format("//div[@class='grid_controls']/ul/li[*]/a[text()='{0}']", pageIndex));
                        }
                    }
                }
                else
                {
                    this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", groupName));
                }
            }
        }

        /// <summary>
        /// Views a group using WebDriver
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_View_WebDriver(string groupName)
        {

            this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);

            // How many pages are there?
            int numofPages = this._driver.FindElementsByXPath("//div[@class='grid_controls']/ul/li").Count;
            if (numofPages > 0)
            {
                // Cycle through each page, starting on page 1
                for (int pageIndex = 1; pageIndex <= numofPages; pageIndex++)
                {
                    if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(groupName)))
                    {
                        this._driver.FindElementByLinkText(groupName).Click();
                        break;
                    }
                    else
                    {
                        this._driver.FindElementByXPath(string.Format("//div[@class='grid_controls']/ul/li[*]/a[text()='{0}']", pageIndex)).Click();
                    }
                }
            }
            //Only one page so assuming there is a group there to click on
            else
            {
                this._driver.FindElementByLinkText(groupName).Click();
            }

            /* BEGIN SO CONFUSING LOGIC - JUST DO IT APPROACH - FGJ
             
            // Are we viewing the index page for a group?
            if (this._driver.Url.Contains("/Groups/Group/View.aspx"))
            {
                // We are. Is this our group?
                if (!(this._driver.FindElementByXPath("//div[@id='main_content']/div[1]/div[2]/p[@class='text_big_serif']").Text == groupName))
                {
                    // It isn't.  Groups -> View All and find it.
                    this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                    // How many pages are there?
                    int numofPages = this._driver.FindElementsByXPath("//div[@class='grid_controls']/ul/li").Count;
                    log.Debug(string.Format("Num of Pages Count: {0}", numofPages));

                    if (numofPages > 0)
                    {
                        // Cycle through each page, starting on page 1
                        for (int pageIndex = 2; pageIndex <= numofPages; pageIndex++)
                        {
                            if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(groupName)))
                            {
                                this._driver.FindElementByLinkText(groupName).Click();
                                break;
                            }
                            else
                            {
                                this._driver.FindElementByXPath(string.Format("//div[@class='grid_controls']/ul/li[*]/a[text()='{0}']", pageIndex)).Click();
                            }
                        }
                    }
                    else
                    {
                        this._driver.FindElementByLinkText(groupName).Click();
                    }
                }
            }

            // Are we viewing the settings of a group?
            else if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(GroupsByGroupTypeConstants.GroupManagement.Link_EditGroupDetails_Link)) 
                && this._generalMethods.IsTextPresentWebDriver(groupName) 
                && this._driver.Url.Contains("Groups/Group/Edit.aspx"))
            {
                // We are. Tab Back
                this._driver.FindElementByLinkText(GeneralLinksWebDriver.Back).Click();
            }

            // We cannot figure out where we are. Groups -> View All and find the group
            else
            {
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                // How many pages are there?
                int numofPages = this._driver.FindElementsByXPath("//div[@class='grid_controls']/ul/li").Count;
                if (numofPages > 0)
                {
                    // Cycle through each page, starting on page 1
                    for (int pageIndex = 1; pageIndex <= numofPages; pageIndex++)
                    {
                        if (this._generalMethods.IsElementPresentWebDriver(By.LinkText(groupName)))
                        {
                            this._driver.FindElementByLinkText(groupName).Click();
                            break;
                        }
                        else
                        {
                            this._driver.FindElementByXPath(string.Format("//div[@class='grid_controls']/ul/li[*]/a[text()='{0}']", pageIndex)).Click();
                        }
                    }
                }
                else
                {
                    this._driver.FindElementByLinkText(groupName).Click();
                }
            }

            */
        }

        /// <summary>
        /// Views the settings of a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_View_Settings(string groupName)
        {
            // Select the specified group
            this.Groups_Group_View(groupName);

            // View the settings of the group
            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_ViewGroupSettings);
        }

        /// <summary>
        /// Views the settings of a group using WebDriver.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_View_Settings_WebDriver(string groupName)
        {
            // Select the specified group
            this.Groups_Group_View_WebDriver(groupName);

            // View the settings of the group
            this._driver.FindElementByLinkText(GroupsByGroupTypeConstants.GroupManagement.Link_ViewGroupSettings_Link).Click();

        }

        /// <summary>
        /// Views the leaders and members of a set of groups.
        /// </summary>
        /// <param name="groupsNames">The names of groups to view the leaders and members of.</param>
        public void Groups_Group_View_Leaders_Members(string[] groupsNames)
        {

            // Select the groups
            this.SelectGroupsOnGroupsTabOnGroupsViewAll(groupsNames);

            // View the leaders and members
            this._selenium.Click(GroupsByGroupTypeConstants.ViewAll.Gear_GroupsTab);
            this._selenium.ClickAndWaitForPageToLoad("link=Show Leaders and Members");

            // Verify the counts
            int rowCount = this._generalMethods.GetTableRowCount(TableIds.Groups_ViewAll_ShowLeadersAndMembers_List);
            rowCount = rowCount - 1; // Remove the header row.
            string allCount = this._selenium.GetText("//div[@id='main_content']/div[2]/div/form/ul/li[1]/span/span");

            Assert.AreEqual(rowCount.ToString(), allCount);
        }

        /// <summary>
        /// Views the attendance dashboard for a set of groups
        /// </summary>
        /// <param name="groups">A set of groups you wish to view attendance for.</param>
        public void Groups_Group_View_Attendance(List<string> groups)
        {
            // Select the groups
            this.SelectGroupsOnGroupsTabOnGroupsViewAll(groups.ToArray());

            // View the attendance dashboard
            this._selenium.Click(GroupsByGroupTypeConstants.ViewAll.Gear_GroupsTab);
            this._selenium.ClickAndWaitForPageToLoad("link=Show Attendance");

            // Verify the groups are there
            foreach (var group in groups)
            {
                Assert.IsTrue(this._selenium.IsElementPresent(string.Format("link={0}", group)));
            }
        }

        /// <summary>
        /// Views the prospects of a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_View_Prospects(string groupName)
        {
            // Are we viewing the prospects of a group?
            if (this._selenium.GetLocation().Contains("/Groups/Prospects/Index.aspx"))
            {
                // We are viewing the prospects of a group.  Is it our group?
                if (!(this._selenium.GetText("//div[@id='main_content']/div[1]/div[2]/h2") == groupName))
                {
                    // It is not our group.
                    // View the group
                    this.Groups_Group_View(groupName);

                    // View the Prospects
                    this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_ViewProspects);
                }
            }
            else
            {
                // We are not viewing the prospects of a group.
                this.Groups_Group_View(groupName);

                // View the Prospects
                this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_ViewProspects);
            }
        }

        /// <summary>
        /// Views the prospects of a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_View_Prospects_WebDriver(string groupName)
        {
            // Are we viewing the prospects of a group?
            if (this._driver.PageSource.Contains("/Groups/Prospects/Index.aspx"))
            {
                // We are viewing the prospects of a group.  Is it our group?
                if (!(this._driver.FindElementByXPath("//div[@id='main_content']/div[1]/div[2]/h2").ToString() == groupName))
                {
                    // It is not our group.
                    // View the group
                    this.Groups_Group_View_WebDriver(groupName);

                    // View the Prospects
                    this._driver.FindElementByLinkText("Prospects").Click();
                    this._generalMethods.WaitForElement(By.Id("open_count"));
                }
            }
            else
            {
                // We are not viewing the prospects of a group.
                this.Groups_Group_View_WebDriver(groupName);

                // View the Prospects
                this._driver.FindElementByLinkText("Prospects").Click();
                this._generalMethods.WaitForElement(By.Id("open_count"));
            }
        }

        /// <summary>
        /// Updates the details of a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="updateGroupName">The updated name for the group.</param>
        /// <param name="updatedDescription">The updated description for the group.</param>
        /// <param name="updatedStartDate">The updated start date for the group.</param>
        public void Groups_Group_Update_Details(string groupName, string updateGroupName, string updatedDescription, string updatedStartDate)
        {
            // View Group Settings
            this.Groups_Group_View_Settings(groupName);

            // Edit details
            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_EditGroupDetails);

            // Update the info
            this._selenium.Type(GroupsByGroupTypeConstants.GroupManagement.TextField_GroupName, updateGroupName);
            this._selenium.Type(GroupsByGroupTypeConstants.GroupManagement.TextField_GroupDescription, updatedDescription);
            this._selenium.Type(GroupsByGroupTypeConstants.GroupManagement.DateControl_GroupStartDate, updatedStartDate);

            // Save changes
            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Button_EditDetailsSaveChanges);

            // Edit details
            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_EditGroupDetails);

            // Verify updates occured
            Assert.AreEqual(this._selenium.GetValue(GroupsByGroupTypeConstants.GroupManagement.TextField_GroupName), updateGroupName);
            Assert.AreEqual(this._selenium.GetValue(GroupsByGroupTypeConstants.GroupManagement.TextField_GroupDescription), updatedDescription);
            Assert.AreEqual(this._selenium.GetValue(GroupsByGroupTypeConstants.GroupManagement.DateControl_GroupStartDate), updatedStartDate);

            // Return
            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
        }

        /// <summary>
        /// Updates the custom field selection of a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="expectedFieldOption">The option name for the group wants to select in custom field</param>
        public void Groups_Group_Update_CustomFieldOption(string groupName, int expectedFieldOption)
        {
            // View Group Settings
            this.Groups_Group_View_Settings_WebDriver(groupName);

            // Edit custom field
            this._driver.FindElementByLinkText(GroupsByGroupTypeConstants.GroupManagement.Link_EditGroupCustomFields).Click();
            this._generalMethods.WaitForElementDisplayed(By.Id(expectedFieldOption.ToString()));
            Assert.IsTrue(this._generalMethods.IsElementPresentWebDriver(By.Id(expectedFieldOption.ToString())), "Fail to find given field option");

            IWebElement option = this._driver.FindElementById(expectedFieldOption.ToString());
            if (!option.Selected)
            {
                option.Click();
            }

            this._driver.FindElementByXPath(GroupsByGroupTypeConstants.GroupManagement.Button_CustomFieldSaveChanges).Click();
            this._generalMethods.WaitForElement(By.XPath("//div[@id='success_middle']"));
            try
            {
                this._driver.FindElementById("success_close").Click();
            } catch (ElementNotVisibleException e) { }
        }

        /// <summary>
        /// Adds an individual to a group.
        /// </summary>
        /// <param name="groupName">The name of group.</param>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="groupRole">The role you wish to give them.</param>
        public void Groups_Group_Update_AddToRoster(string groupName, string individualName, GeneralEnumerations.IndividualGroupRole groupRole)
        {
            // View the group
            this.Groups_Group_View(groupName);

            // Add to roster
            this._selenium.ClickAndWaitForPageToLoad("link=Add a person");

            // Search for the individual
            this._selenium.Type("txtSearch", individualName);
            this._selenium.ClickAndWaitForCondition("btnAdvSearch", "selenium.isElementPresent(\"xpath=//table[@class='grid']\");", "30000");

            // Add them to roster based on a role specified
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Groups_Group_AddIndividualToGroup, individualName, "Name", "contains");
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[*]/input[contains(@id, '{2}')]", TableIds.Groups_Group_AddIndividualToGroup, row + 1, groupRole));
            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Button_Add_Member_Save);
        }

        /// <summary>
        /// Updates a location to be private or unprivate.
        /// </summary>       
        /// <param name="groupName">The name of group.</param>
        /// <param name="privateLocation">Specifies if the location is private or not</param>
        public void Groups_Group_Update_Location_Set_Private(string groupName, bool privateLocation)
        {
            this.Groups_Group_View_Settings(groupName);

            // Click on Edit Location
            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_EditLocation);

            // Specify if the location is private or not
            if (privateLocation)
            {
                if (!this._selenium.IsChecked(GroupsByGroupTypeConstants.GroupManagement.Checkbox_PrivateLocation))  // It is a private location.  Is it checked?
                    this._selenium.Click(GroupsByGroupTypeConstants.GroupManagement.Checkbox_PrivateLocation); // It wasn't. Check it.
            }
            else
            {
                if (this._selenium.IsChecked(GroupsByGroupTypeConstants.GroupManagement.Checkbox_PrivateLocation))  // It isn't private location.  Is it checked?
                    this._selenium.Click(GroupsByGroupTypeConstants.GroupManagement.Checkbox_PrivateLocation); // It was. Uncheck it.
            }

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Button_NewScheduleSaveChanges);
        }

        /// <summary>
        /// Deletes a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_Delete(string groupName)
        {
            // Select the specified group
            this.Groups_Group_View_Settings(groupName);

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_DeleteGroup);
            this._selenium.GetConfirmation();
            this._selenium.ChooseOkOnNextConfirmation();
        }

        /// <summary>
        /// Deletes a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        public void Groups_Group_Delete_WebDriver(string groupName)
        {
            // Select the specified group
            this.Groups_Group_View_Settings_WebDriver(groupName);

            this._driver.FindElementByLinkText(GroupsByGroupTypeConstants.GroupManagement.Link_DeleteGroup_Link).Click();
            TestLog.WriteLine(string.Format("Confirmation Message: {0}", this._driver.SwitchTo().Alert().Text));
            this._driver.SwitchTo().Alert().Accept();
        }

        /// <summary>
        /// Deletes a prospect within a group.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="prospectName">The name of the prospect.</param>
        public void Groups_Group_Delete_Prospect(string groupName, string prospectName)
        {
            this.Groups_Group_View_Prospects(groupName);

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_Group_ActiveProspects, prospectName, "Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td/form/input[3]", TableIds.Groups_Group_ActiveProspects, itemRow + 1));
            Assert.IsTrue(Regex.IsMatch(this._selenium.GetConfirmation(), "^You are about to delete this prospect\\. You will not be able to undo this\\.\nAre you sure you want to delete it[\\s\\S]$"));
        }

        /// <summary>
        /// Deletes a prospect within a group.
        /// </summary>
        /// <param name="groupName"></param>
        /// <param name="prospectName"></param>
        public void Groups_Group_Delete_Prospect_WebDriver(string groupName, string prospectName)
        {
            this.Groups_Group_View_Prospects_WebDriver(groupName);

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_Group_ActiveProspects, prospectName, "Name", null);
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td/form/input[3]", TableIds.Groups_Group_ActiveProspects, itemRow + 1)).Click();
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

        }

        /// <summary>
        /// Determines the member or leader status of an individual that is part of a group.  This method needs to be phased out and rewritten!
        /// </summary>
        /// <returns>The actual value for the group role.</returns>
        public GeneralEnumerations.GroupRolesIndividualHas Groups_Group_ShowLeadersAndMembers_Get_Role_Icon(string individualName)
        {
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_ViewAll_ShowLeadersAndMembers_List, individualName, "Name", null) + 1;

            if (this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/div[@class='float_left role_designation leader_designation']", TableIds.Groups_ViewAll_ShowLeadersAndMembers_List, itemRow)) && this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/div[@class='float_left role_designation member_designation muted']", TableIds.Groups_ViewAll_ShowLeadersAndMembers_List, itemRow)))
            {
                return GeneralEnumerations.GroupRolesIndividualHas.Leader;
            }
            else if (this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/div[@class='float_left role_designation member_designation']", TableIds.Groups_ViewAll_ShowLeadersAndMembers_List, itemRow)) && this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/div[@class='float_left role_designation leader_designation muted']", TableIds.Groups_ViewAll_ShowLeadersAndMembers_List, itemRow)))
            {
                return GeneralEnumerations.GroupRolesIndividualHas.Member;
            }
            else if (this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/div[@class='float_left role_designation leader_designation']", TableIds.Groups_ViewAll_ShowLeadersAndMembers_List, itemRow)) && this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[5]/div[@class='float_left role_designation member_designation']", TableIds.Groups_ViewAll_ShowLeadersAndMembers_List, itemRow)))
            {
                return GeneralEnumerations.GroupRolesIndividualHas.Both;
            }
            else
            {
                throw new Exception("Could not determine the roles the indiviudal has.");
            }
        }

        /// <summary>
        /// Verifies a saved search exists.
        /// </summary>
        /// <param name="savedSearchName">The name of the saved search.</param>
        public void Groups_Group_ViewAll_VerifySavedSearchExists(string savedSearchName)
        {
            this._selenium.VerifyElementPresent(string.Format("//td/a[contains(text(), '{0}')]/parent::td/following::td/form", savedSearchName));
        }

        /// <summary>
        /// Verifies a saved search does not exists.
        /// </summary>
        /// <param name="savedSearchName">The name of the saved search.</param>
        public void Groups_Group_ViewAll_VerifySavedSearchDoesNotExists(string savedSearchName)
        {
            this._selenium.VerifyElementNotPresent(string.Format("//td/a[contains(text(), '{0}')]/parent::td/following::td/form", savedSearchName));
        }


        /// <summary>
        /// Deletes a saved search.
        /// </summary>
        /// <param name="savedSearchName">The name of the saved search.</param>
        public void Groups_ViewAll_DeleteSavedSearch(string savedSearchName)
        {
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//td/a[contains(text(), '{0}')]/parent::td/following::td/form/input[3]", savedSearchName));
            Assert.IsTrue(Regex.IsMatch(this._selenium.GetConfirmation(), "^Are you sure you want to delete this search[\\s\\S]$"), "Delete confirmation was not present.");
            this._selenium.ChooseOkOnNextConfirmation();
        }

        /// <summary>
        /// Updates a group to grant a portal user manager or viewer rights.
        /// </summary>
        /// <param name="groupName">The name of the group.</param>
        /// <param name="userName">The name of the portal user to gain the manager or viewer right.  The format of the name needs to be Last Name, First Name.</param>
        /// <param name="role">The role to give the individual.</param>
        public void Groups_Group_Update_AddManagerOrView(string groupName, string userName, GeneralEnumerations.GroupRolesPortalUser role)
        {
            // View the settings of a group
            this.Groups_Group_View_Settings(groupName);

            // Edit permissions
            this._selenium.ClickAndWaitForPageToLoad("link=Change permissions");

            // Check the permission
            switch (role)
            {
                case GeneralEnumerations.GroupRolesPortalUser.Manager:
                    this._selenium.Click(string.Format("//span[text()='{0}']/ancestor::td/following-sibling::td/input[@value='manager' and @type='radio']", userName));
                    break;
                case GeneralEnumerations.GroupRolesPortalUser.Viewer:
                    this._selenium.Click(string.Format("//span[text()='{0}']/ancestor::td/following-sibling::td/input[@value='viewer' and @type='radio']", userName));
                    break;
                default:
                    throw new SeleniumException("Invalid permisson specified!");
            }

            // Save
            this._selenium.ClickAndWaitForPageToLoad("//input[@value='Save permissions']");

        }

        public void Groups_Search_NameAndStartDate(string groupName, string individualName, string startDateFrom, string startDateTo)
        {

            if (!this._selenium.IsVisible("group_name"))
            {
                this._selenium.Click("link=Name and start date");
            }

            // Enter the search criteria where provided
            if (!string.IsNullOrEmpty(groupName))
            {
                this._selenium.Type("group_name", groupName);
            }
            if (!string.IsNullOrEmpty("individual_name"))
            {
                this._selenium.Type("individual_name", individualName);
            }
            if (!string.IsNullOrEmpty("start_date_from"))
            {
                this._selenium.Type("start_date_from", startDateFrom);
            }
            if (!string.IsNullOrEmpty("start_date_to"))
            {
                this._selenium.Type("start_date_to", startDateTo);
            }

            // Perform the search
            this._selenium.ClickAndWaitForPageToLoad("commit");
        }


        public void Groups_Search_NameAndStartDate_WebDriver(string groupName, string individualName, string startDateFrom, string startDateTo)
        {

            if (!this._driver.FindElementById("group_name").Displayed)
            {
                this._driver.FindElementByLinkText("Name and start date").Click();
            }

            this._generalMethods.WaitForElementDisplayed(By.Id("group_name"));
            this._generalMethods.WaitForElementDisplayed(By.Id("start_date_from"));

            // Enter the search criteria where provided
            if (!string.IsNullOrEmpty(groupName))
            {
                this._driver.FindElementById("group_name").SendKeys(groupName);
            }

            if (!string.IsNullOrEmpty(individualName))
            {
                this._driver.FindElementById("individual_name").SendKeys(individualName);
            }

            if (!string.IsNullOrEmpty(startDateFrom))
            {
                this._driver.FindElementById("start_date_from").Clear();
                this._driver.FindElementById("start_date_from").SendKeys(startDateFrom);
            }
            else
            {
                this._driver.FindElementById("start_date_from").Clear();

            }

            if (!string.IsNullOrEmpty(startDateTo))
            {
                this._driver.FindElementById("start_date_to").Clear();
                this._driver.FindElementById("start_date_to").SendKeys(startDateTo);
            }
            else
            {
                this._driver.FindElementById("start_date_to").Clear();
            }

            this._driver.FindElementById("commit").Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel and view all"));

        }

        /// <summary>
        /// Search for expected group name with custom option in group type
        /// </summary>
        /// <param name="groupTypeEleId">The name of group type for search.</param>
        /// <param name="customFieldEleId">The name of group type for search.</param>        
        /// <param name="optionId">The name of group type for search.</param>
        /// <param name="groupNameExpected">The name of group looking forward.</param>
        public void Groups_Search_CustomFieldOption_WebDriver(string groupTypeEleId, string customFieldEleId, string optionId, string groupNameExpected)
        {
            this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);

            this._driver.FindElementByLinkText(GroupsByGroupTypeConstants.ViewAll.HeaderLink_GroupTypesAndCustomFields).Click();
            this._generalMethods.WaitForElementDisplayed(By.Id(groupTypeEleId));
            this._driver.FindElementById(groupTypeEleId).Click();

            this._generalMethods.WaitForElementDisplayed(By.Id(customFieldEleId));
            this._driver.FindElementById(customFieldEleId).Click();
            this._generalMethods.WaitForElementDisplayed(By.XPath("//input[@value='" + optionId + "']"));
            this._driver.FindElementByXPath("//input[@value='" + optionId + "']").Click();

            this._driver.FindElementById("commit").Click();

            this._generalMethods.WaitForElement(By.LinkText(groupNameExpected));
            this._driver.FindElementByLinkText(groupNameExpected).Click();
        }

        /// <summary>
        /// Views a span of care from groups view all.
        /// </summary>
        /// <param name="spanOfCareName">The name of the span of care.</param>
        public void Groups_SpanOfCare_View_ViewAll(string spanOfCareName)
        {
            // Groups -> View All
            this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);

            // Span of Care
            this._selenium.ClickAndWaitForPageToLoad("link=Spans of Care");

            // View the Span of Care
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//a[text()='{0}']/parent::div/following-sibling::div/a[text()='View']", spanOfCareName));
        }

        /// <summary>
        /// This method removes an idividual from a group
        /// </summary>
        /// <param name="groupName"></param>
        /// <param name="individualName"></param>
        /// <param name="function">function (i.e. contains)</param>
        public void Groups_Group_Remove_Member(string groupName, string individualName)
        {
            //View Group
            this.Groups_Group_View_WebDriver(groupName);

            //Find individual
            this._generalMethods.WaitForElement(By.Id(TableIds.Groups_Group_Members));
            int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_Group_Members, individualName, "Name", "contains") + 1;

            //Click Delete
            IWebElement groupTable = this._driver.FindElementById(TableIds.Groups_Group_Members);
            groupTable.FindElement(By.XPath(string.Format("//tbody/tr[{0}]/td[8]/a/img", row))).Click();

            this._generalMethods.WaitForElementDisplayed(By.XPath("//div[@id='success_middle']/p"), 30, "Did not detect the invitation sent flyout in the specified time.");
            //Assert.AreEqual(string.Format("{0} has been removed from the group.", individualName), this._driver.FindElementByXPath("//div[@id='success_middle']/p").Text.Trim());
            Assert.Contains(this._driver.FindElementByXPath("//div[@id='success_middle']/p").Text.Trim(), string.Format("{0} has been removed from the group.", individualName));
            //this._generalMethods.WaitForElementDisplayed(By.Id("success_close"));

            Assert.IsFalse(this._generalMethods.IsElementPresentWebDriver(By.LinkText(individualName)), "Individual still in group");

        }
        #endregion Groups

        #region People Lists
        public void Groups_PeopleList_Create(string peopleListName, string peopleListDescription, string peopleListStartDate)
        {
            this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);
            this._selenium.ClickAndWaitForPageToLoad("link=Add a people list");

            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_PeopleListCreation.TextField_PeopleListName, peopleListName);
            this._selenium.Type(GroupsByGroupTypeConstants.Wizard_PeopleListCreation.TextField_PeopleListDescription, peopleListDescription);

            // If you want a specific start date for the people list. Otherwise it will default to today's date
            if (peopleListStartDate != null)
                this._selenium.Type(GroupsByGroupTypeConstants.Wizard_PeopleListCreation.DateControl_StartDate, peopleListStartDate);

            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.Wizard_PeopleListCreation.Button_CreatePeopleList);
            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);

            // If we get an error saying it already exists, just hit return.
            if (this._selenium.IsTextPresent("A group with this name already exists.  Please create a unique group name."))
            {
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.RETURN);
            }
        }

        public void Groups_PeopleList_View(string peopleListName)
        {
            this.Groups_Group_View(peopleListName);
        }

        public void Groups_PeopleLists_ViewSettings(string peopleListName)
        {
            this.Groups_Group_View(peopleListName);
            this._selenium.ClickAndWaitForPageToLoad(GroupsByGroupTypeConstants.GroupManagement.Link_ViewGroupSettings);
        }

        public void Groups_PeopleList_Delete(string peopleListName)
        {
            this.Groups_Group_Delete(peopleListName);
        }

        public void Groups_PeopleList_Delete_WebDriver(string peopleListName)
        {
            this.Groups_Group_Delete_WebDriver(peopleListName);
        }

        #endregion People Lists

        #endregion Groups

        #region Ministry

        #region Ministry Old
        #region Activity Schedules
        public void Ministry_ActivitySchedules_Create_WebDriver(string activityScheduleName, string startTime, string endTime, GeneralEnumerations.TimeSetting? format)
        {
            // Navigate to ministry->activity schedules
            this._generalMethods.Navigate_Portal(Navigation.Ministry.ActivityRoom_Setup.Activity_Schedules);

            // Change the activity
            this.ChangeActivityWebDriver(DataConstants.Activity);

            // Create an activity schedule
            this._driver.FindElementByName("txtActivityTimeName").SendKeys(activityScheduleName);

            // Enter the raw string representing the time, get the expected format based on display setting
            string expectedStartTime = string.Empty;
            string expectedEndTime = string.Empty;
            if (!string.IsNullOrEmpty(startTime))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartTime").SendKeys(startTime);
                expectedStartTime = formatTime(startTime, format);
            }
            if (!string.IsNullOrEmpty(endTime))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_AddEditTime1_txtEndTime").SendKeys(endTime);
                expectedEndTime = formatTime(endTime, format);
            }


            DateTime currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

            this._driver.FindElementByName("btnSave").Click();
            this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.Ministry_ActivitySchedules), 20);


            // Verify the schedule was created            
            Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, activityScheduleName, "Schedule"), string.Format("{0} was not created", activityScheduleName));
            Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, DataConstants.Activity, "Activity"), string.Format("{0} of {1} was not created", activityScheduleName, DataConstants.Activity));


            if (!string.IsNullOrEmpty(startTime) && !string.IsNullOrEmpty(endTime))
            {
                TestLog.WriteLine("Verify Activity Schedule was Created");
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, expectedStartTime, "Start Time"), string.Format("{0} of {1} was not created", expectedStartTime, activityScheduleName));
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, expectedEndTime, "End Time"), string.Format("{0} of {1} was not created", expectedEndTime, activityScheduleName));
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, string.Format("Occurs from {0} to {1}", expectedStartTime, expectedEndTime), "Recurrence"), string.Format("Occurs from {0} to {1} was not created", expectedStartTime, expectedEndTime));
            }
            else
            {

                int itemRowCompleted = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_ActivitySchedules, activityScheduleName, "Schedule", null);
                TestLog.WriteLine("Item Row Completed: " + itemRowCompleted);
                IWebElement table = this._driver.FindElementByXPath(TableIds.Ministry_ActivitySchedules);
                IWebElement row = table.FindElements(By.TagName("tr"))[itemRowCompleted];
                Assert.Between(row.FindElements(By.TagName("td"))[3].Text, string.Format("{0:t}", currentTime.AddMinutes(-1)), string.Format("{0:t}", currentTime.AddMinutes(1)));
                Assert.Between(row.FindElements(By.TagName("td"))[4].Text, string.Format("{0:t}", currentTime.AddMinutes(-1)), string.Format("{0:t}", currentTime.AddMinutes(1)));
                Assert.Between(row.FindElements(By.TagName("td"))[5].Text, string.Format("Occurs from {0:t} to {0:t}", currentTime.AddMinutes(-1)), string.Format("Occurs from {0:t} to {0:t}", currentTime.AddMinutes(1)));

                //Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Ministry_ActivitySchedules, row)), string.Format("{0:t}", currentTime.AddMinutes(-1)), string.Format("{0:t}", currentTime.AddMinutes(1)));
                //Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_ActivitySchedules, row)), string.Format("{0:t}", currentTime.AddMinutes(-1)), string.Format("{0:t}", currentTime.AddMinutes(1)));
                //Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.5", TableIds.Ministry_ActivitySchedules, row)), string.Format("Occurs from {0:t} to {0:t}", currentTime.AddMinutes(-1)), string.Format("Occurs from {0:t} to {0:t}", currentTime.AddMinutes(1)));
            }
        }



        public void Ministry_ActivitySchedules_Create_FutureDate_Webdriver(string activity, string[] activityScheduleName, string start_Date, string end_Date)
        {
            this._generalMethods.Navigate_Portal(Navigation.Ministry.ActivityRoom_Setup.Activity_Schedules);

            for (int i = 0; i < activityScheduleName.Length; i++)
            {
                // Select Test Activity               
                new SelectElement(this._driver.FindElementByXPath("//select[contains(@name, 'ddActivityId')]")).SelectByText(activity);

                // Create an activity schedule
                this._driver.FindElementByName("txtActivityTimeName").SendKeys(activityScheduleName[i]);
                /*
                //Select start Date 
                this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartDate_PU_TG")).Click();
                this._generalMethods.WaitAndGetElement(By.Id(string.Format("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartDate_PU_PN_{0}", start_Date))).Click();
                //this._driver.FindElement(By.Id(string.Format("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartDate_PU_PN_{0}", start_Date))).Click();
                //Select End Date
                this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_AddEditTime1_txtEndDate_PU_TG")).Click();
                this._generalMethods.WaitAndGetElement(By.Id(string.Format("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartDate_PU_PN_{0}", end_Date))).Click();
                //this._driver.FindElementById(string.Format("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartDate_PU_PN_{0}", end_Date)).Click();
                */

                IWebElement startDate = this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartDate"));
                startDate.Click();
                startDate.Clear();
                startDate.SendKeys(start_Date);

                IWebElement endDate = this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_AddEditTime1_txtEndDate"));
                endDate.Click();
                endDate.Clear();
                endDate.SendKeys(end_Date);

                //Save Test Activity schedule
                this._driver.FindElementByName("btnSave").Click();

                this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.Ministry_ActivitySchedules), 20);


                // Verify the schedule was created            
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, activityScheduleName[i], "Schedule"), string.Format("{0} was not created", activityScheduleName));
                Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, DataConstants.Activity, "Activity"), string.Format("{0} of {1} was not created", activityScheduleName, DataConstants.Activity));
            }
        }



        public void Ministry_ActivitySchedules_Create(string activityScheduleName, string startTime, string endTime, GeneralEnumerations.TimeSetting? format)
        {
            // Navigate to ministry->activity schedules
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Activity_Schedules);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Create an activity schedule
            this._selenium.Type("//input[@name='txtActivityTimeName']", activityScheduleName);

            // Enter the raw string representing the time, get the expected format based on display setting
            string expectedStartTime = string.Empty;
            string expectedEndTime = string.Empty;
            if (!string.IsNullOrEmpty(startTime))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_AddEditTime1_txtStartTime", startTime);
                expectedStartTime = formatTime(startTime, format);
            }
            if (!string.IsNullOrEmpty(endTime))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_AddEditTime1_txtEndTime", endTime);
                expectedEndTime = formatTime(endTime, format);
            }

            DateTime currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            this._selenium.ClickAndWaitForPageToLoad("//input[@name='btnSave']");

            // Verify the schedule was created
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivitySchedules, activityScheduleName, "Schedule", null);
            Assert.AreEqual(activityScheduleName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_ActivitySchedules, row)));
            Assert.AreEqual(DataConstants.Activity, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Ministry_ActivitySchedules, row)));


            if (!string.IsNullOrEmpty(startTime) && !string.IsNullOrEmpty(endTime))
            {
                Assert.AreEqual(expectedStartTime, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Ministry_ActivitySchedules, row)));
                Assert.AreEqual(expectedEndTime, this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_ActivitySchedules, row)));
                Assert.AreEqual(string.Format("Occurs from {0} to {1}", expectedStartTime, expectedEndTime), this._selenium.GetTable(string.Format("{0}.{1}.5", TableIds.Ministry_ActivitySchedules, row)));
            }
            else
            {
                Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Ministry_ActivitySchedules, row)), string.Format("{0:t}", currentTime.AddMinutes(-1)), string.Format("{0:t}", currentTime.AddMinutes(1)));
                Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_ActivitySchedules, row)), string.Format("{0:t}", currentTime.AddMinutes(-1)), string.Format("{0:t}", currentTime.AddMinutes(1)));
                Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.5", TableIds.Ministry_ActivitySchedules, row)), string.Format("Occurs from {0:t} to {0:t}", currentTime.AddMinutes(-1)), string.Format("Occurs from {0:t} to {0:t}", currentTime.AddMinutes(1)));
            }
        }

        public void Ministry_ActivitySchedules_Update(string activityName, string activityScheduleNameUpdated)
        {
            // Navigate to ministry->activity schedules
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Activity_Schedules);

            // Update an activity schedule
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivitySchedules, activityName, "Schedule", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/span/a", TableIds.Ministry_ActivitySchedules, itemRow + 1));
            Assert.AreEqual(activityName, this._selenium.GetValue("//input[@class='large initial_focus']"));

            if (!string.IsNullOrEmpty(activityScheduleNameUpdated))
            {
                this._selenium.Type("//input[@class='large initial_focus']", activityScheduleNameUpdated);
            }
            string currentTimeFormatted = string.Format("{0:t}", this._selenium.ClickAndWaitForPageToLoad("//input[@name='btnMod']"));

            // Verify the schedule was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivitySchedules, activityScheduleNameUpdated, "Schedule", null);
            Assert.AreEqual(activityScheduleNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_ActivitySchedules, itemRowUpdated)));
            Assert.AreEqual(currentTimeFormatted, this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Ministry_ActivitySchedules, itemRowUpdated)));
            Assert.AreEqual(currentTimeFormatted, this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_ActivitySchedules, itemRowUpdated)));
            Assert.AreEqual(string.Format("Occurs from {0} to {0}", currentTimeFormatted), this._selenium.GetTable(string.Format("{0}.{1}.5", TableIds.Ministry_ActivitySchedules, itemRowUpdated)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_ActivitySchedules, activityName, "Schedule", null));
        }


        public void Ministry_ActivitySchedules_Delete(string activityScheduleName)
        {
            // Navigate to ministry->activity schedules
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Activity_Schedules);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Delete an activity schedule
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivitySchedules, activityScheduleName, "Schedule", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[7]/span/a", TableIds.Ministry_ActivitySchedules, row + 1));

            // Click yes at the confirmation dialog
            //this._generalMethods.Popups_Confirmation(this._selenium, "Yes");
            // Click 'Yes' at the confirmation
            System.Threading.Thread.Sleep(2500);
            this._selenium.SelectPopUp("");
            //this._selenium.OpenWindow("", "psuedoModal");
            this._selenium.SelectWindow("name=psuedoModal");
            this._selenium.SelectPopUp("title=Fellowship One");
            this._selenium.SelectPopUp("name=psuedoModal");
            //            this._selenium.SelectWindow("title=Fellowship One");
            this._selenium.WindowFocus();
            this._selenium.KeyPress("btnYes", "\\9");
            this._selenium.KeyPress("btnYes", "\\13");
            this._selenium.SelectWindow("");
            this._selenium.WaitForPageToLoad("30000");

            // Verify activity schedule was deleted
            if (this._selenium.IsElementPresent(TableIds.Ministry_ActivitySchedules))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_ActivitySchedules, activityScheduleName, "Schedule", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("No records found");
            }
        }



        public void Ministry_ActivitySchedules_Delete_WebDriver(string[] activityScheduleName)
        {
            // Navigate to ministry->activity schedules
            this._generalMethods.Navigate_Portal(Navigation.Ministry.ActivityRoom_Setup.Activity_Schedules);
            // Change the activity
            this.ChangeActivityWebDriver(DataConstants.Activity);

            for (int i = 0; i < activityScheduleName.Length; i++)
            {
                // Delete an activity schedule
                decimal row;
                try {
                    row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_ActivitySchedules, activityScheduleName[i], "Schedule", null);
                } catch (OpenQA.Selenium.WebDriverException e) {
                    continue;
                }
                
                TestLog.WriteLine(string.Format("{0} was found in row {1}", activityScheduleName, row + 1));
                this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[7]/span/a", TableIds.Ministry_ActivitySchedules, row + 1)).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText(DataConstants.Activity));

                this._generalMethods.Popups_ConfirmationWebDriver("Yes");
                this._generalMethods.WaitForElement(this._driver, By.LinkText(DataConstants.Activity), 30);

                if (this._generalMethods.IsElementPresentWebDriver(By.XPath(TableIds.Ministry_ActivitySchedules)))
                {
                    Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_ActivitySchedules, activityScheduleName[i], "Schedule", null));
                }
                else
                {
                    this._generalMethods.VerifyTextPresentWebDriver("No records found");
                }

            }

            /* BEGIN

                        // Click yes at the confirmation dialog
                        //this._generalMethods.Popups_Confirmation(this._selenium, "Yes");
                        // Click 'Yes' at the confirmation
                        System.Threading.Thread.Sleep(2500);
                        this._selenium.SelectPopUp("");
                        //this._selenium.OpenWindow("", "psuedoModal");
                        this._selenium.SelectWindow("name=psuedoModal");
                        this._selenium.SelectPopUp("title=Fellowship One");
                        this._selenium.SelectPopUp("name=psuedoModal");
                        //            this._selenium.SelectWindow("title=Fellowship One");
                        this._selenium.WindowFocus();
                        this._selenium.KeyPress("btnYes", "\\9");
                        this._selenium.KeyPress("btnYes", "\\13");
                        this._selenium.SelectWindow("");
                        this._selenium.WaitForPageToLoad("30000");

                        // Verify activity schedule was deleted
                        if (this._selenium.IsElementPresent(TableIds.Ministry_ActivitySchedules))
                        {
                            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_ActivitySchedules, activityScheduleName, "Schedule", null));
                        }
                        else
                        {
                            this._selenium.VerifyTextPresent("No records found");
                        }
            END */

        }

        #endregion Activity Schedules

        #region Activity RLC Groups
        /// <summary>
        /// Creates an activity rlc group.
        /// </summary>
        /// <param name="activityGroupingName">The name of the activity grouping</param>
        /// <param name="balanceType">The balance type</param>
        /// <param name="superGroup">Designates if the group is a super group</param>
        public void Ministry_ActivityRLCGroups_Create(string activityGroupingName, string balanceType, string superGroup,
            [Optional, DefaultParameterValue("A Test Activity")] string activityName,
            [Optional, DefaultParameterValue("A Test Ministry")] string ministryName)
        {
            // Navigate to ministry->activity rlc groups
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Activity_RLC_Groups);

            //This allows for correct test activity to be chosen.
            //It was assuming it was automatically selected
            string ministryID = this._sql.Ministry_Ministries_FetchID(15, ministryName).ToString();
            TestLog.WriteLine("Ministry ID: " + ministryID);

            this._selenium.SelectAndWaitForPageToLoad("//select[@name='ddActivityId" + ministryID + "']", activityName);
            //this._selenium.WaitForPageToLoad("30000");

            // Create an activity rlc group
            if (!string.IsNullOrEmpty(activityGroupingName))
            {
                this._selenium.Type("//input[@name='txtActivityGroupName']", activityGroupingName);
            }
            if (!string.IsNullOrEmpty(balanceType))
            {
                this._selenium.Select("//select[@name='ddCheckinBalanceType']", balanceType);
            }
            if (!string.IsNullOrEmpty(superGroup))
            {
                this._selenium.Select("//select[@name='ddSuperGroupId']", superGroup);
            }
            this._selenium.ClickAndWaitForPageToLoad("//input[@value='Save']");

            // Verify the activity rlc group was created
            decimal? itemRow = null;
            if (string.IsNullOrEmpty(superGroup))
            {
                itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivityRLCGroups, activityGroupingName, "Activity Grouping Name", null);
                Assert.AreEqual(activityGroupingName, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Ministry_ActivityRLCGroups, itemRow)));
                Assert.AreEqual(balanceType, this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_ActivityRLCGroups, itemRow)));
            }
            else
            {
                itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivityRLCGroups, string.Format(" {0}   - {1} ", superGroup, activityGroupingName), "Activity Grouping Name", null);
                Assert.AreEqual(string.Format("{0} \n  - {1}", superGroup, activityGroupingName), this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Ministry_ActivityRLCGroups, itemRow)));
                Assert.AreEqual(string.Format("{0} \n {0}", balanceType), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_ActivityRLCGroups, itemRow)));
            }
        }

        /// <summary>
        /// Deletes an activity rlc group.
        /// </summary>
        /// <param name="activityGroupingName">The name of the group to be deleted</param>
        public void Ministry_ActivityRLCGroups_Delete(string activityGroupingName,
            [Optional, DefaultParameterValue("A Test Activity")] string activityName,
            [Optional, DefaultParameterValue("A Test Ministry")] string ministryName)
        {
            // Navigate to ministry->activity rlc groups
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Activity_RLC_Groups);

            //This allows for correct test activity to be chosen.
            //It was assuming it was automatically selected

            string ministryID = this._sql.Ministry_Ministries_FetchID(15, ministryName).ToString();
            TestLog.WriteLine("Ministry ID: " + ministryID);

            this._selenium.SelectAndWaitForPageToLoad("//select[@name='ddActivityId" + ministryID + "']", activityName);
            //this._selenium.WaitForPageToLoad("30000");


            // Delete an activity rlc group
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivityRLCGroups, activityGroupingName, "Activity Grouping Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[6]/a", TableIds.Ministry_ActivityRLCGroups, itemRow + 1));

            // Verify the activity rlc group was deleted
            if (this._selenium.IsElementPresent(TableIds.Ministry_ActivityRLCGroups))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_ActivityRLCGroups, activityGroupingName, "Activity Grouping Name", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("No records found");
            }
        }
        #endregion Activity RLC Groups

        #region Group Finder Properties
        public void Ministry_GroupFinderProperties_Create(string propertyName, bool includeAsFilterChoice, bool showInResults)
        {
            // Navigate to ministry->group finder properties
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Group_Finder_Properties);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Create a new property
            if (!string.IsNullOrEmpty(propertyName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtPropertyName", propertyName);
            }
            if (includeAsFilterChoice)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkIsFilterChoice");
            }
            if (showInResults)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkShowResults");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnCreateNewProperty");

            // Verify the property was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties, propertyName, "Name", null);
            Assert.AreEqual(propertyName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_GroupFinderProperties, itemRow)));
            Assert.AreEqual(includeAsFilterChoice, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Ministry_GroupFinderProperties, itemRow + 1)));
            Assert.AreEqual(showInResults, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img", TableIds.Ministry_GroupFinderProperties, itemRow + 1)));
        }

        public void Ministry_GroupFinderProperties_Update(string propertyName, bool includeAsFilterChoice, bool showInResults, string propertyNameUpdated, bool includeAsFilterChoiceUpdated, bool showInResultsUpdated)
        {
            // Navigate to ministry->group finder properties
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Group_Finder_Properties);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Update a property
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties, propertyName, "Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_GroupFinderProperties, itemRow + 1));

            Assert.AreEqual(propertyName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtPropertyName"));
            Assert.AreEqual(includeAsFilterChoice, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkIsFilterChoice"));
            Assert.AreEqual(showInResults, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkShowResults"));

            // Prepare checkboxes
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkIsFilterChoice");
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkShowResults");

            if (!string.IsNullOrEmpty(propertyNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtPropertyName", propertyNameUpdated);
            }
            if (includeAsFilterChoiceUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkIsFilterChoice");
            }
            if (showInResultsUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_chkShowResults");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnUpdateProperty");

            // Verify the property was updated, original removed
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties, propertyNameUpdated, "Name", null);
            Assert.AreEqual(propertyNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_GroupFinderProperties, itemRowUpdated)));
            Assert.AreEqual(includeAsFilterChoiceUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[3]/img", TableIds.Ministry_GroupFinderProperties, itemRowUpdated + 1)));
            Assert.AreEqual(showInResultsUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img", TableIds.Ministry_GroupFinderProperties, itemRowUpdated + 1)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_GroupFinderProperties, propertyName, "Name", null));
        }

        /// <summary>
        /// Deletes a group finder property.
        /// </summary>
        /// <param name="propertyName">The name of the property to be deleted</param>
        public void Ministry_GroupFinderProperties_Delete(string propertyName)
        {
            // Navigate to ministry->group finder properties
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Group_Finder_Properties);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Delete a property
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties, propertyName, "Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[5]/a", TableIds.Ministry_GroupFinderProperties, itemRow + 1));

            // Verify the property was deleted
            if (this._selenium.IsElementPresent(TableIds.Ministry_GroupFinderProperties))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_GroupFinderProperties, propertyName, "Name", null));
            }
        }

        #region Choices
        public void Ministry_GroupFinderProperties_Choices_Create(string propertyName, string propertyChoice)
        {
            // Navigate to ministry->group finder properties
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Group_Finder_Properties);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Select choices
            this._selenium.ClickAndWaitForPageToLoad("link=Choices");

            // Create a property choice
            if (propertyName != this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlActivityPropertyChoice"))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlActivityPropertyChoice", propertyName);
            }
            if (!string.IsNullOrEmpty(propertyChoice))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtPropertyChoice", propertyChoice);
                this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnCreateNewPropertyChoice");
            }

            // Verify the property choice was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties_Choices, propertyChoice, "Property Choice", null);
            Assert.AreEqual(propertyChoice, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_GroupFinderProperties_Choices, itemRow)));
        }

        public void Ministry_GroupFinderProperties_Choices_Update(string propertyName, string propertyChoice, string propertyChoiceUpdated)
        {
            // Navigate to ministry->group finder properties
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Group_Finder_Properties);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Select choices
            this._selenium.ClickAndWaitForPageToLoad("link=Choices");

            // Update the property choice
            if (propertyName != this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlActivityPropertyChoice"))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlActivityPropertyChoice", propertyName);
            }

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties_Choices, propertyChoice, "Property Choice", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_GroupFinderProperties_Choices, itemRow + 1));
            Assert.AreEqual(propertyChoice, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtPropertyChoice"));

            if (!string.IsNullOrEmpty(propertyChoiceUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtPropertyChoice", propertyChoiceUpdated);
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnUpdatePropertyChoice");

            // Verify the property choice was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties_Choices, propertyChoiceUpdated, "Property Choice", null);
            Assert.AreEqual(propertyChoiceUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_GroupFinderProperties_Choices, itemRow)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_GroupFinderProperties_Choices, propertyChoice, "Property Choice", null));
        }

        public void Ministry_GroupFinderProperties_Choices_Delete(string propertyName, string propertyChoice)
        {
            // Navigate to ministry->group finder properties
            this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Group_Finder_Properties);

            // Change the activity
            this.ChangeActivity(DataConstants.Activity);

            // Select choices
            this._selenium.ClickAndWaitForPageToLoad("link=Choices");

            // Delete a property choice
            if (propertyName != this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_content_ddlActivityPropertyChoice"))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlActivityPropertyChoice", propertyName);
            }

            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_GroupFinderProperties_Choices, propertyChoice, "Property Choice", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[3]/a", TableIds.Ministry_GroupFinderProperties_Choices, itemRow + 1));

            // Verify the property was deleted
            if (this._selenium.IsElementPresent(TableIds.Ministry_GroupFinderProperties_Choices))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_GroupFinderProperties_Choices, propertyChoice, "Property Choice", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("There are no activity choices for this activity property.");
            }
        }
        #endregion Choices
        #endregion Group Finder Properties

        #region Post Attendance
        /// <summary>
        /// Posts attendance for all assigned to a Roster using Webdriver
        /// </summary>
        /// <param name="ministry"></param>
        /// <param name="activity"></param>
        /// <param name="group"></param>
        /// <param name="schedule"></param>
        /// <param name="dateRange"></param>
        /// <param name="time"></param>
        /// <param name="roster"></param>
        /// <param name="isParticipant"></param>
        public void Ministry_PostAttendance_RLC_Add_Attendance_All_Assigned_WebDriver(string ministry, string activity, string group, string schedule, string dateRange, string time, string roster, bool isParticipant = true)
        {
            //Select Ministry to post attendance for
            string selectMinistry = this._driver.FindElementById(GeneralMinistry.PostAttendance.MinistryName).Text;
            if (selectMinistry != ministry)
            {
                this._driver.FindElementByLinkText("Change").Click();
                new SelectElement(this._driver.FindElementById(GeneralMinistry.PostAttendance.Ministry_DropDown)).SelectByText(ministry);
                this._generalMethods.WaitForElementEnabled(By.Id(GeneralMinistry.PostAttendance.Activity_DropDown));
            }
            //Select Activity 
            new SelectElement(this._driver.FindElementById(GeneralMinistry.PostAttendance.Activity_DropDown)).SelectByText(activity);
            this._generalMethods.WaitForElementEnabled(By.Id(GeneralMinistry.PostAttendance.Schedule_DropDown));
            //Select Group if present
            if (!string.IsNullOrEmpty(group))
            {
                new SelectElement(this._driver.FindElementById(GeneralMinistry.PostAttendance.Group_DropDown)).SelectByText(group);
            }
            //Select Schedule
            new SelectElement(this._driver.FindElementById(GeneralMinistry.PostAttendance.Schedule_DropDown)).SelectByText(schedule);
            this._generalMethods.WaitForElementEnabled(By.Id(GeneralMinistry.PostAttendance.Time_DropDown));
            //Enter Date Range if present
            if (!string.IsNullOrEmpty(dateRange))
            {
                this._driver.FindElementById(GeneralMinistry.PostAttendance.DateRange).SendKeys(dateRange);
                this._driver.FindElementByLinkText("Find time").Click();
                this._generalMethods.WaitForElementEnabled(By.Id(GeneralMinistry.PostAttendance.Time_DropDown));
            }
            //Select Time
            new SelectElement(this._driver.FindElementById(GeneralMinistry.PostAttendance.Time_DropDown)).SelectByText(time);
            //Search
            this._driver.FindElementById(GeneralMinistry.PostAttendance.Search_Button).Click();
            this._generalMethods.WaitForElement(By.LinkText("Post attendance"));
            // Find and select Roster to post attendance
            //int findRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_PostAttendance_RLCListing, roster, "RLC"); //Modified by Clark.Peng -because change column name from RLC to Roster on page
            int findRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_PostAttendance_RLCListing, roster, "Roster");
            string row = (findRow + 1).ToString();
            TestLog.WriteLine(string.Format("This is the name {0}, this is the row {1}", roster, row));
            Assert.IsFalse(this._generalMethods.IsElementPresentWebDriver(By.Id(string.Format("ctl00_ctl00_MainContent_content_grdAttendanceHistory_ctl0{0}_lnkStaffCount", row))), "This Roster already has attendance");
            this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdAttendanceHistory']/tbody/tr[{0}]/td[1]/a", row)).Click();
            this._generalMethods.WaitForElement(By.Id(GeneralMinistry.PostAttendance.SearchAll_Radio));
            //Select Assignment type
            if (!isParticipant)
            {
                this._driver.FindElementById(GeneralMinistry.PostAttendance.StaffAssignment_Radio).Click();
            }
            else
            {
                this._driver.FindElementById(GeneralMinistry.PostAttendance.ParticipantAssignment_Radio).Click();
            }
            //Click Search
            this._driver.FindElementById(GeneralMinistry.PostAttendance.Search_Button).Click();
            this._generalMethods.WaitForElement(By.Id("search_results_shell"));
            //Click Select All
            this._driver.FindElementByXPath("//table[@id='search_results_table']/tbody/tr[1]/th[1]/input").Click();
            //Click Post Attendance
            this._driver.FindElementById(GeneralMinistry.PostAttendance.PostAttendance_Button).Click();
            this._generalMethods.WaitForElement(By.Id("post_results_message"));

        }


        /// <summary>
        /// Posts attendance for a given individual for a RLC instance.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param> 
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activitySchedule">The name of the activity schedule.</param>
        /// <param name="activityScheduleTime">The instance of the activity schedule. Format is MM/DD/YYYY HH:MM AM/PM</param>
        /// <param name="rlcName">The name of the RLC.</param>
        /// <param name="individualName">The name of the individual.</param>
        public void Ministry_PostAttendance_Update_RLC_Add_Attendee(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName, string individualName)
        {
            // View an RLC instance.
            this.Ministry_PostAttendance_View_RLC_Post_Attendace_Page(ministryName, activityName, activitySchedule, activityScheduleTime, rlcName);

            // Seasrch for an individual and post attendance.
            this._selenium.Type("ctl00_ctl00_MainContent_content_basicsearch", individualName);
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);

            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Ministry_PostAttendance_SearchResults, string.Format("{0}{0} Household", individualName), "Person", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Ministry_PostAttendance_SearchResults, row + 1));
            this._selenium.ClickAndWaitForCondition("post_attendance", "selenium.browserbot.getCurrentWindow().document.getElementById('results_number').innerHTML.match('1 person')", "10000");
        }

        /// <summary>
        /// Posts attendance for a given individual for a RLC instance, using the advanced search to find an indiviudal.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param> 
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activitySchedule">The name of the activity schedule.</param>
        /// <param name="activityScheduleTime">The instance of the activity schedule. Format is MM/DD/YYYY HH:MM AM/PM</param>
        /// <param name="rlcName">The name of the RLC.</param>
        /// <param name="individualName">The name of the individual.</param>
        public void Ministry_PostAttendance_Update_RLC_Add_Attendee(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName, string individualName, string address, string emailPhoneWeb, string attributesGroup, string attribute, string memberEnvNumber)
        {
            // View an RLC instance
            this.Ministry_PostAttendance_View_RLC_Post_Attendace_Page(ministryName, activityName, activitySchedule, activityScheduleTime, rlcName);

            // Seasrch for an individual using advanced search.
            this._selenium.Click("link=Advanced search");
            this._selenium.Type("search", individualName);
            this._selenium.Type("address", address);
            this._selenium.Type("email", emailPhoneWeb);

            if (attributesGroup != null)
            {
                this._selenium.Select("attribute_group", attributesGroup);
            }
            if (attribute != null)
            {
                this._selenium.Select("attribute", attribute);
            }
            this._selenium.Type("member", memberEnvNumber);

            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);

            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Ministry_PostAttendance_SearchResults, string.Format("{0}{0} Household", individualName), "Person", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Ministry_PostAttendance_SearchResults, row + 1));
            this._selenium.ClickAndWaitForCondition("post_attendance", "selenium.browserbot.getCurrentWindow().document.getElementById('results_number').innerHTML.match('1 person')", "10000");
        }

        /// <summary>
        /// Posts attendance for a given individual with a staff assignment to a RLC instance.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param> 
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activitySchedule">The name of the activity schedule.</param>
        /// <param name="activityScheduleTime">The instance of the activity schedule. Format is MM/DD/YYYY HH:MM AM/PM</param>
        /// <param name="rlcName">The name of the RLC.</param>
        /// <param name="individualName">The name of the individual.</param>
        public void Ministry_PostAttendance_Update_RLC_Add_Staff(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName, string individualName)
        {
            // View an RLC instance
            this.Ministry_PostAttendance_View_RLC_Post_Attendace_Page(ministryName, activityName, activitySchedule, activityScheduleTime, rlcName);

            // Search for an individual with a staffing assignment to the RLC
            this._selenium.Click("search_staff");
            this._selenium.Type("ctl00_ctl00_MainContent_content_basicsearch", individualName);
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);

            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Ministry_PostAttendance_SearchResults, string.Format("{0}{0} Household", individualName), "Person", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Ministry_PostAttendance_SearchResults, row + 1));
            this._selenium.ClickAndWaitForCondition("post_attendance", "selenium.browserbot.getCurrentWindow().document.getElementById('results_number').innerHTML.match('1 person')", "10000");
        }

        /// <summary>
        /// Updates the attendance details for an individual.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param> 
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activitySchedule">The name of the activity schedule.</param>
        /// <param name="activityScheduleTime">The instance of the activity schedule. Format is MM/DD/YYYY HH:MM AM/PM</param>
        /// <param name="rlcName">The name of the RLC.</param>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="updatedRole">The role for the individual to be updated to.</param>
        public void Ministry_PostAttendance_Update_Attendance_Details(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName, string individualName, GeneralEnumerations.AssignmentRole updatedRole)
        {
            // View the attendees of a RLC instance.
            this.Ministry_PostAttendance_View_RLC_Attendees(ministryName, activityName, activitySchedule, activityScheduleTime, rlcName);

            // Select an attendee
            this.Ministry_PostAttendance_Select_Attendee(individualName);

            // Update their attendance details based on the value provided
            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlAction_dropDownList", "Change attendance details", this._javascript.IsElementPresent("ctl00_ctl00_MainContent_content_ddlDetailType_dropDownList"), "5000");

            string waitElement = updatedRole == GeneralEnumerations.AssignmentRole.Participant ? "ctl00_ctl00_MainContent_content_btnChangeDetails" : "ctl00_ctl00_MainContent_content_ddlDetailStaffType_dropDownList";
            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlDetailType_dropDownList", updatedRole.ToString(), this._javascript.IsElementPresent(waitElement), "5000");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnChangeDetails");
        }

        /// <summary>
        /// Updates the attendance details for an individual.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param> 
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activitySchedule">The name of the activity schedule.</param>
        /// <param name="activityScheduleTime">The instance of the activity schedule. Format is MM/DD/YYYY HH:MM AM/PM</param>
        /// <param name="rlcName">The name of the RLC.</param>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="updatedRole">The role for the individual to be updated to.</param>
        /// <param name="jobName">The job for the individual.</param>        /// 
        /// <param name="staffTimeServed">The time served as staff.</param>
        public void Ministry_PostAttendance_Update_Attendance_Details(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName, string individualName, GeneralEnumerations.AssignmentRole updatedRole, string jobName, string staffTimeServed)
        {
            // View the attendees of an RLC instance
            this.Ministry_PostAttendance_View_RLC_Attendees(ministryName, activityName, activitySchedule, activityScheduleTime, rlcName);

            // Select an attendee
            this.Ministry_PostAttendance_Select_Attendee(individualName);

            // Update their attendance details based on the value provided
            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlAction_dropDownList", "Change attendance details", this._javascript.IsElementPresent("ctl00_ctl00_MainContent_content_ddlDetailType_dropDownList"), "5000");

            string waitElement = updatedRole == GeneralEnumerations.AssignmentRole.Participant ? "ctl00_ctl00_MainContent_content_btnChangeDetails" : "ctl00_ctl00_MainContent_content_ddlDetailJob_dropDownList";
            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlDetailType_dropDownList", updatedRole.ToString(), this._javascript.IsElementPresent(waitElement), "5000");

            if (updatedRole == GeneralEnumerations.AssignmentRole.Staff)
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlDetailJob_dropDownList", jobName);
                this._selenium.Focus("ctl00_ctl00_MainContent_content_txtDetailsTimeServed_textBox");
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtDetailsTimeServed_textBox", staffTimeServed);
            }

            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnChangeDetails");
        }

        /// <summary>
        /// Views the Post Attendance Page for an RLC instance
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param> 
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activitySchedule">The name of the activity schedule.</param>
        /// <param name="activityScheduleTime">The instance of the activity schedule. Format is MM/DD/YYYY HH:MM AM/PM</param>
        /// <param name="rlcName">The name of the RLC.</param>
        public void Ministry_PostAttendance_View_RLC_Post_Attendace_Page(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName)
        {
            // View the Post Attendance Page
            this._selenium.Navigate(Navigation.Ministry.Attendance.Post_Attendance);

            // Select the ministry if it isn't the current one.
            this.Ministry_View(ministryName);

            // Select the activity 
            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlActivity_dropDownList", activityName, this._javascript.OptionExistsInSelect("ctl00_ctl00_MainContent_content_ddlSchedule_dropDownList", activitySchedule), "10000");

            // Select the schedule
            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlSchedule_dropDownList", activitySchedule, this._javascript.OptionExistsInSelect("ctl00_ctl00_MainContent_content_ddlActivityTime_dropDownList", activityScheduleTime), "10000");

            // Select the time
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlActivityTime_dropDownList", activityScheduleTime);

            // Search
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);

            // Click Post Attendance for the given RLC
            //Updated by Demi Zhang: update a parameter value from "RLC" to "Roster" based on the related UI updates.
            decimal rowNumber = this._generalMethods.GetTableRowNumber(TableIds.Ministry_PostAttendance_RLCListing, rlcName, "Roster", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdAttendanceHistory']/tbody/tr[{0}]/td[1]/a", rowNumber + 1));
        }

        /// <summary>
        /// Views all attendees for a given activity schedule instance for a RLC.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param> 
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activitySchedule">The name of the activity schedule.</param>
        /// <param name="activityScheduleTime">The instance of the activity schedule. Format is MM/DD/YYYY HH:MM AM/PM</param>
        /// <param name="rlcName">The name of the RLC.</param>
        public void Ministry_PostAttendance_View_RLC_Attendees(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName)
        {
            // View the RLC's Post Attendance Page
            this.Ministry_PostAttendance_View_RLC_Post_Attendace_Page(ministryName, activityName, activitySchedule, activityScheduleTime, rlcName);

            // View all attendees
            this._selenium.ClickAndWaitForPageToLoad("link=View all attendees");
        }

        /// <summary>
        /// Removes all the attendees for the activity schedule of an RLC that you are currently viewing.
        /// </summary>
        public void Ministry_PostAttendance_Remove_RLC_Attendees(string ministryName, string activityName, string activitySchedule, string activityScheduleTime, string rlcName)
        {
            // View the attendees for the given RLC instance
            this.Ministry_PostAttendance_View_RLC_Attendees(ministryName, activityName, activitySchedule, activityScheduleTime, rlcName);

            // Remove all attendees
            this._selenium.Click("link=All");
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlAction_dropDownList", "Remove selected attendees");
            this._selenium.Click("ctl00_ctl00_MainContent_content_btnDeleteSelected");
            this._selenium.GetConfirmation();
            this._selenium.ChooseOkOnNextConfirmation();
        }
        /// <summary>
        /// Deletes all attendance for a roster while on the Ministry › Attendance › Post Attendance ›View Attendance page
        /// </summary>
        public void Ministry_PostAttendance_Remove_All_Attendees_WebDriver()
        {
            this._driver.FindElementByLinkText("All").Click();
            new SelectElement(this._driver.FindElementById(GeneralMinistry.PostAttendance.Action_DropDown)).SelectByText("Remove selected attendees");
            this._generalMethods.WaitForElementDisplayed(By.Id("ctl00_ctl00_MainContent_content_btnDeleteSelected"));
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnDeleteSelected").Click();
            this._driver.SwitchTo().Alert().Accept();
            this._generalMethods.WaitForElementDisplayed(By.XPath("//p[@class='grid_no_records']"));
            Assert.AreEqual("No records found", this._driver.FindElementByXPath("//p[@class='grid_no_records']").Text);

        }

        /// <summary>
        /// Selects an attendee on the attendees page for an instance of a RLC.
        /// </summary>
        /// <param name="individualName">The name of the individual</param>
        public void Ministry_PostAttendance_Select_Attendee(string individualName)
        {
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_PostAttendance_Attendees, individualName, "Attendees", "contains");
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Ministry_PostAttendance_Attendees, itemRow + 1));
        }
        #endregion Post Attendance

        #region Automated Attendance Rules
        /// <summary>
        /// Creates an automated attendance rule
        /// </summary>
        /// <param name="ministry">The ministry the rule is tied to</param>
        /// <param name="activity">The activity the rule is tied to</param>
        /// <param name="rlc">The rlc the rule is tied to</param>
        /// <param name="generateAttendanceFor">The types of people to generate attendance for</param>
        public void Ministry_AutomatedAttendanceRules_Create(string ministry, string activity, string rlc, string[] generateAttendanceFor)
        {

            // Navigate to ministry->automated attendance rules
            this._selenium.Navigate(Navigation.Ministry.Attendance.Automated_Attendance_Rules);

            // Create a new rule
            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);

            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlMinistry_dropDownList", ministry, this._javascript.OptionExistsInSelect("ctl00_ctl00_MainContent_content_ddlActivity_dropDownList", activity), "15000");
            this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlActivity_dropDownList", activity, this._javascript.OptionExistsInSelect("ctl00_ctl00_MainContent_content_ddlRoomLocation_dropDownList", "All Rosters > " + rlc), "15000");
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlRoomLocation_dropDownList", "All Rosters > " + rlc);

            // Prepare checkboxes
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxHouseholdHead");
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxHouseholdSpouse");
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxHouseholdChild");
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxContributorSpouse");
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxContributorChildren");
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxChildParents");
            this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxSiblings");

            // Make selection(s)
            if (generateAttendanceFor != null)
            {
                foreach (string option in generateAttendanceFor)
                {
                    this._selenium.Check(option);
                }
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnAddNew");

            // Verify rule was created
            string combined = string.Format("{0} > {1} > {2}", ministry, activity, rlc);
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_AutomatedAttendanceRules, combined, "Attendance automatically generated for", null);
            Assert.AreEqual(combined, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_AutomatedAttendanceRules, itemRow)));
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_AutomatedAttendanceRules, itemRow + 1));

            if (generateAttendanceFor != null)
            {
                foreach (string option in generateAttendanceFor)
                {
                    Assert.IsTrue(this._selenium.IsChecked(option));
                }
            }
            else
            {
                Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxHouseholdHead"));
                Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxHouseholdSpouse"));
                Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxHouseholdChild"));
                Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxContributorSpouse"));
                Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxContributorChildren"));
                Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxChildParents"));
                Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxSiblings"));
            }
        }

        /// <summary>
        /// Creates an automated attendance rule
        /// </summary>
        /// <param name="ministry">The ministry the rule is tied to</param>
        /// <param name="activity">The activity the rule is tied to</param>
        /// <param name="rlc">The rlc the rule is tied to</param>
        /// <param name="generateAttendanceFor">The types of people to generate attendance for</param>
        //public void Ministry_AutomatedAttendanceRules_Create(string ministry, string activity, string rlc, string[] generateAttendanceFor)
        //{

        //    // Navigate to ministry->automated attendance rules
        //    this._selenium.Navigate(Navigation.Ministry.Attendance.Automated_Attendance_Rules);

        //    // Create a new rule
        //    this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);

        //    this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlMinistry_dropDownList", ministry, this._javascript.OptionExistsInSelect("ctl00_ctl00_MainContent_content_ddlActivity_dropDownList", activity), "15000");
        //    this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlActivity_dropDownList", activity, this._javascript.OptionExistsInSelect("ctl00_ctl00_MainContent_content_ddlRoomLocation_dropDownList", "All Rosters > " + rlc), "15000");
        //    this._selenium.Select("ctl00_ctl00_MainContent_content_ddlRoomLocation_dropDownList", "All Rosters > " + rlc);

        //    // Prepare checkboxes
        //    this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxHouseholdHead");
        //    this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxHouseholdSpouse");
        //    this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxHouseholdChild");
        //    this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxContributorSpouse");
        //    this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxContributorChildren");
        //    this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxChildParents");
        //    this._selenium.Uncheck("ctl00_ctl00_MainContent_content_chkBoxSiblings");

        //    // Make selection(s)
        //    if (generateAttendanceFor != null)
        //    {
        //        foreach (string option in generateAttendanceFor)
        //        {
        //            this._selenium.Check(option);
        //        }
        //    }
        //    this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnAddNew");

        //    // Verify rule was created
        //    string combined = string.Format("{0} > {1} > {2}", ministry, activity, rlc);
        //    decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_AutomatedAttendanceRules, combined, "Attendance automatically generated for", null);
        //    Assert.AreEqual(combined, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_AutomatedAttendanceRules, itemRow)));
        //    this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_AutomatedAttendanceRules, itemRow + 1));

        //    if (generateAttendanceFor != null)
        //    {
        //        foreach (string option in generateAttendanceFor)
        //        {
        //            Assert.IsTrue(this._selenium.IsChecked(option));
        //        }
        //    }
        //    else
        //    {
        //        Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxHouseholdHead"));
        //        Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxHouseholdSpouse"));
        //        Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxHouseholdChild"));
        //        Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxContributorSpouse"));
        //        Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxContributorChildren"));
        //        Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxChildParents"));
        //        Assert.IsFalse(this._selenium.IsChecked("ctl00_ctl00_MainContent_content_chkBoxSiblings"));
        //    }
        //}

        /// <summary>
        /// Creates an automated attendance rule
        /// </summary>
        /// <param name="ministry">The ministry the rule is tied to</param>
        /// <param name="activity">The activity the rule is tied to</param>
        /// <param name="rlc">The rlc the rule is tied to</param>
        /// <param name="generateAttendanceFor">The types of people to generate attendance for</param>
        public void Ministry_AutomatedAttendanceRules_Create_WebDriver(string ministry, string activity, string rlc, string[] generateAttendanceFor)
        {

            // Navigate to ministry->automated attendance rules
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Attendance.Automated_Attendance_Rules);

            // Create a new rule
            this._driver.FindElementByLinkText(GeneralLinks.Add_WebDriver).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlMinistry_dropDownList")).SelectByText(ministry);
            this._generalMethods.WaitForElementEnabled(By.Id("ctl00_ctl00_MainContent_content_ddlActivity_dropDownList"));
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlActivity_dropDownList")).SelectByText(activity);
            this._generalMethods.WaitForElementEnabled(By.Id("ctl00_ctl00_MainContent_content_ddlRoomLocation_dropDownList"));
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlRoomLocation_dropDownList")).SelectByText("All Rosters > " + rlc);

            // Make selection(s)
            if (generateAttendanceFor != null)
            {
                foreach (string option in generateAttendanceFor)
                {
                    switch (option)
                    {
                        case GeneralMinistry.AutoAttendanceRules.HH_Head:
                            this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Head).Click();
                            break;
                        case GeneralMinistry.AutoAttendanceRules.HH_Spouse:
                            this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Spouse).Click();
                            break;
                        case GeneralMinistry.AutoAttendanceRules.HH_Child:
                            this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Child).Click();
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Contributor_Spouse:
                            this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Contributor_Spouse).Click();
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Contributor_Children:
                            this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Contributor_Children).Click();
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Child_Parents:
                            this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Child_Parents).Click();
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Child_Siblings:
                            this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Child_Siblings).Click();
                            break;
                    }
                }
            }
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnAddNew").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Edit"));

            // Verify rule was created
            string combined = string.Format("{0} > {1} > {2}", ministry, activity, rlc);
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_AutomatedAttendanceRules, combined, "Attendance automatically generated for", null);
            Assert.AreEqual(combined, this._generalMethods.GetDataFromTable(By.XPath(TableIds.Ministry_AutomatedAttendanceRules), itemRow, 1));
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_AutomatedAttendanceRules, itemRow + 1)).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            if (generateAttendanceFor != null)
            {
                foreach (string option in generateAttendanceFor)
                    switch (option)
                    {
                        case GeneralMinistry.AutoAttendanceRules.HH_Head:
                            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Head).Selected);
                            break;
                        case GeneralMinistry.AutoAttendanceRules.HH_Spouse:
                            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Spouse).Selected);
                            break;
                        case GeneralMinistry.AutoAttendanceRules.HH_Child:
                            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Child).Selected);
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Contributor_Spouse:
                            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Contributor_Spouse).Selected);
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Contributor_Children:
                            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Contributor_Children).Selected);
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Child_Parents:
                            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Child_Parents).Selected);
                            break;
                        case GeneralMinistry.AutoAttendanceRules.Child_Siblings:
                            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Child_Siblings).Selected);
                            break;
                    }
            }
            else
            {
                Assert.IsFalse(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Head).Selected);
                Assert.IsFalse(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Spouse).Selected);
                Assert.IsFalse(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.HH_Child).Selected);
                Assert.IsFalse(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Contributor_Spouse).Selected);
                Assert.IsFalse(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Contributor_Children).Selected);
                Assert.IsFalse(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Child_Parents).Selected);
                Assert.IsFalse(this._driver.FindElementById(GeneralMinistry.AutoAttendanceRules.Child_Siblings).Selected);
            }
        }

        /// <summary>
        /// Deletes an automated attendance rule
        /// </summary>
        /// <param name="rule"></param>
        public void Ministry_AutomatedAttendanceRules_Delete(string rule)
        {
            // Navigate to ministry->automated attendance rules
            this._selenium.Navigate(Navigation.Ministry.Attendance.Automated_Attendance_Rules);

            // Delete the rule
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_AutomatedAttendanceRules, rule, "Attendance automatically generated for", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[3]/a", TableIds.Ministry_AutomatedAttendanceRules, itemRow + 1));

            // Click yes at the confirmation dialog
            this._generalMethods.Popups_Confirmation("Yes");

            Thread.Sleep(2000);

            // Verify the rule was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_AutomatedAttendanceRules, rule, "Attendance automatically generated for", null));
        }

        /// <summary>
        /// Deletes an automated attendance rule
        /// </summary>
        /// <param name="rule"></param>
        public void Ministry_AutomatedAttendanceRules_Delete_WebDriver(string rule)
        {
            // Navigate to ministry->automated attendance rules
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Attendance.Automated_Attendance_Rules);
            //this._selenium.Navigate(Navigation.Ministry.Attendance.Automated_Attendance_Rules);

            // Delete the rule
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_AutomatedAttendanceRules, rule, "Attendance automatically generated for", null);
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[3]/a", TableIds.Ministry_AutomatedAttendanceRules, itemRow + 1)).Click();

            // Click yes at the confirmation dialog
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            Thread.Sleep(2000);

            // Verify the rule was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_AutomatedAttendanceRules, rule, "Attendance automatically generated for", null));
        }

        #endregion Automated Attendance Rules

        #region Super Check-ins
        public void Ministry_SuperCheckins_Create_WebDriver(string superCheckinName, string ministry, string activity, string[] activitySchedules)
        {
            // Navigate to ministry->super checkins
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Checkin.Super_Checkins);

            // Create a super check-in
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add"));
            this._driver.FindElementByLinkText("Add").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_txtCheckIn"));

            if (!string.IsNullOrEmpty(superCheckinName))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_txtCheckIn").SendKeys(superCheckinName);
            }

            if (!string.IsNullOrEmpty(ministry))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_ddMinistry")).SelectByText(ministry);

            }

            if (!string.IsNullOrEmpty(activity))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_ddActivity")).SelectByText(activity);
            }

            foreach (string schedule in activitySchedules)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_listActivityTimeId")).SelectByText(schedule);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_btnAdd").Click();

            }

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_btnSave").Click();

            // Verify the super check-in was created
            this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.Ministry_SuperCheckins));
            Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null), string.Format("{0} was not created", superCheckinName));
            Assert.IsTrue(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_SuperCheckins, string.Format("{0} - {1}", activity, activitySchedules[0]), "Activities", null), string.Format("{0} - {1} activity for {2} was not created", activity, activitySchedules[0], superCheckinName));

            //decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null);
            //Assert.AreEqual(superCheckinName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_SuperCheckins, itemRow)));
            //Assert.AreEqual(string.Format("{0} - {1}", activity, activitySchedules[0]), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_SuperCheckins, itemRow)));
        }

        public void Ministry_SuperCheckins_Create(string superCheckinName, string ministry, string activity, string[] activitySchedules)
        {
            // Navigate to ministry->super checkins
            this._selenium.Navigate(Navigation.Ministry.Checkin.Super_Checkins);

            // Create a super check-in
            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);

            if (!string.IsNullOrEmpty(superCheckinName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_txtCheckIn", superCheckinName);
            }
            if (!string.IsNullOrEmpty(ministry))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_ddMinistry", ministry);
            }
            if (!string.IsNullOrEmpty(activity))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_ddActivity", activity);
            }

            foreach (string schedule in activitySchedules)
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_listActivityTimeId", schedule);
                this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_btnAdd");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_btnSave");

            // Verify the super check-in was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null);
            Assert.AreEqual(superCheckinName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_SuperCheckins, itemRow)));
            Assert.AreEqual(string.Format("{0} - {1}", activity, activitySchedules[0]), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_SuperCheckins, itemRow)));
        }

        public void Ministry_SuperCheckins_Update(string superCheckinName, string ministry, string activity, string[] activitySchedules, string superCheckinNameUpdated)
        {
            // Navigate to ministry->super checkins
            this._selenium.Navigate(Navigation.Ministry.Checkin.Super_Checkins);

            // Update a super check-in
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_SuperCheckins, itemRow + 1));

            Assert.AreEqual(superCheckinName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_txtCheckIn"));

            if (!string.IsNullOrEmpty(superCheckinNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_txtCheckIn", superCheckinNameUpdated);
            }
            if (!string.IsNullOrEmpty(ministry))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_ddMinistry", ministry);
            }
            if (!string.IsNullOrEmpty(activity))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_ddActivity", activity);
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_MakeGlobalAssociations1_btnSave");

            // Verify the super check-in was updated, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Ministry_SuperCheckins, superCheckinNameUpdated, "Super Check-in Name", null);
            Assert.AreEqual(superCheckinNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_SuperCheckins, itemRowUpdated)));
            Assert.AreEqual(string.Format("{0} - {1}", activity, activitySchedules[0]), this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.Ministry_SuperCheckins, itemRowUpdated)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null));
        }


        public void Ministry_SuperCheckins_Delete_WebDriver(string superCheckinName)
        {
            // Navigate to ministry->super checkins
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Checkin.Super_Checkins);

            // Delete a super check-in
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null);
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[6]/a", TableIds.Ministry_SuperCheckins, itemRow + 1)).Click();

            this._generalMethods.Popups_ConfirmationWebDriver("Yes");
            this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.Ministry_SuperCheckins), 30);

            // Verify the super check-in was deleted
            //Don't try this at home if you don't know the power of try/catch/finally
            try
            {
                // Navigate to ministry->super checkins
                this._generalMethods.Navigate_Portal(Navigation.Ministry.Checkin.Super_Checkins);
                this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null);
                //OpenQA.Selenium.WebDriverException: Did not find the unique identifier: Test Super Check-in - Delete

            }
            catch (WebDriverException e)
            {
                Assert.AreEqual(string.Format("Did not find the unique identifier: {0}", superCheckinName), e.Message, string.Format("{0} did not get deleted", superCheckinName));
            }

            //Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null));
            //Assert.AreNotEqual(0, this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null), string.Format("{0} was found", superCheckinName));

        }

        /// <summary>
        /// Deletes a super check-in.
        /// </summary>
        /// <param name="superCheckinName">The name of the super check-in to be deleted.</param>
        public void Ministry_SuperCheckins_Delete(string superCheckinName)
        {
            // Navigate to ministry->super checkins
            this._selenium.Navigate(Navigation.Ministry.Checkin.Super_Checkins);

            // Delete a super check-in
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[6]/a", TableIds.Ministry_SuperCheckins, itemRow + 1));

            // Click 'Yes' at the confirmation
            System.Threading.Thread.Sleep(5000);
            this._selenium.OpenWindow("", "psuedoModal");
            this._selenium.SelectWindow("name=psuedoModal");
            this._selenium.WindowFocus();
            this._selenium.KeyPress("btnYes", "\\9");
            this._selenium.KeyPress("btnYes", "\\13");
            this._selenium.SelectWindow("");
            this._selenium.WaitForPageToLoad("30000");

            // Verify the super check-in was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_SuperCheckins, superCheckinName, "Super Check-in Name", null));
        }

        #region Theme Manager
        public void Ministry_ThemeManager_Create(string themeName, string[] backgroundImages, string colorTheme)
        {
            // Navigate to ministry->theme manager
            this._selenium.Navigate(Navigation.Ministry.Checkin.Theme_Manager);

            // Create a theme
            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);

            if (!string.IsNullOrEmpty(themeName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtThemeName_textBox", themeName);
            }
            if (backgroundImages != null)
            {
                foreach (string path in backgroundImages)
                {
                    // add content
                }
            }
            if (!string.IsNullOrEmpty(colorTheme))
            {
                // add content
            }
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify theme was created
            decimal row = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Themes, "Test Theme", "Theme Name", null);
            Assert.AreEqual(themeName, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.Ministry_Themes, row)));
            Assert.AreEqual(0, Convert.ToInt16(this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.Ministry_Themes, row))));
            Assert.AreEqual(0, Convert.ToInt16(this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.Ministry_Themes, row))));
        }

        public void Ministry_ThemeManager_Update(string themeName, string[] backgroundImages, string colorTheme, string themeNameUpdated)
        {
            // Navigate to ministry->theme manager
            this._selenium.Navigate(Navigation.Ministry.Checkin.Theme_Manager);

            // Update a theme
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Themes, themeName, "Theme Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_Themes, itemRow + 1));
            this._selenium.ClickAndWaitForPageToLoad("link=Edit theme");

            Assert.AreEqual(themeName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_txtThemeName_textBox"));

            this._selenium.Type("ctl00_ctl00_MainContent_content_txtThemeName_textBox", themeNameUpdated);
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify theme was updated, original no longer exists
            Assert.AreEqual(themeNameUpdated, this._selenium.GetText("ctl00_ctl00_MainContent_content_themeName"));

            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Back);

            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Themes, themeNameUpdated, "Theme Name", null);
            Assert.AreEqual(themeNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.Ministry_Themes, itemRowUpdated)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_Themes, themeName, "Theme Name", null));
        }

        /// <summary>
        /// Deletes a theme.
        /// </summary>
        /// <param name="themeName">The name of the theme to be deleted.</param>
        public void Ministry_ThemeManager_Delete(string themeName)
        {
            // Navigate to ministry->theme manager
            this._selenium.Navigate(Navigation.Ministry.Checkin.Theme_Manager);

            // Delete a theme
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Themes, themeName, "Theme Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_Themes, itemRow + 1));

            this._selenium.Click("ctl00_ctl00_MainContent_aside_lnkDelete");
            Assert.IsTrue(Regex.IsMatch(this._selenium.GetConfirmation(), "^Are you sure you want to delete this theme[\\s\\S] Delete is a permenent action\\.$"));
            this._selenium.WaitForPageToLoad("30000");

            // Verify theme was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_Themes, themeName, "Theme Name", null));
        }
        /// <summary>
        /// Manages a theme.
        /// </summary>
        /// <param name="themeName">The name of a theme.</param>
        public void Ministry_ThemeNamager_ManageTheme(string themeName)
        {
            // Navigate to ministry->theme manager
            this._selenium.Navigate(Navigation.Ministry.Checkin.Theme_Manager);

            // Manage an existing theme
            this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", themeName));
        }
        #endregion Theme Manager
        #endregion Super Check-ins

        #region Staffing Assignment
        /// <summary>
        /// Creates a staffing assignment for an individual.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="volunteerType">The volunteer type for the individual.</param>
        /// <param name="isAssignmentActive">Specifies the staffing assignment as active or inactive.</param>
        /// <param name="activityGrouping">The name of the activity grouping. This is optional and does not need to be specified.  You cannot have both an activity grouping and a RLC for a staffing assignment.</param>
        /// <param name="rlcName">The name of the Room, Location, Class. This is optional and does not need to be specified.  You cannot have both an activity grouping and a RLC for a staffing assignment.</param>
        /// <param name="breakoutGroup">The name of the breakout group.. This is optional and does not need to be specified.</param>
        /// <param name="activitySchedule">The name of the activity schedule. This is optional and does not need to be specified. Activity Schedules are not present if the Activity Attribute for assignments does not specify Activity Schedules.</param>
        /// <param name="staffSchedule">The name of the staff schedule.  This is optional and does not need to be specicied. </param>
        /// <param name="job">The name of the job.  This is optional and does not need to be specified.</param>
        public void Ministry_StaffingAssignment_Create(string ministryName, string individualName, string activityName, string volunteerType, bool isAssignmentActive, string activityGrouping, string rlcName, string breakoutGroup, string activitySchedule, string staffSchedule, string job)
        {
            // View staffing asignments for the individual
            this.Ministry_StaffingAssignment_View(ministryName, individualName, activityName);

            // Add a new one, specifying the activity
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDropDown")).SelectByText(activityName);

            // Specify the volunteer type
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_indTypeDropDown")).SelectByText(volunteerType);

            // Specify the status
            if (isAssignmentActive == false)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_statusDropDown")).SelectByText("Inactive");
            }

            // Specify the Activity Grouping or the RLC, only if one of the parameters is null.  If both are defined, skip this entire section since it is invalid.
            if (string.IsNullOrEmpty(activityGrouping) || string.IsNullOrEmpty(rlcName))
            {
                if (this._driver.FindElementsById("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea").Count > 0 && !string.IsNullOrEmpty(activityGrouping))
                {
                    new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea")).SelectByText(activityGrouping);
                }
                else if (this._driver.FindElementsById("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown").Count > 0 && !string.IsNullOrEmpty(rlcName))
                {
                    new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown")).SelectByText(rlcName);
                }
            }

            // Specify the breakout group
            if (this._driver.FindElementsById("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown").Count > 0 && !string.IsNullOrEmpty(breakoutGroup))
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown")).SelectByText(breakoutGroup);

            // Specify the activity schedule
            if (this._driver.FindElementsById("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown").Count > 0 && !string.IsNullOrEmpty(activitySchedule))
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown")).SelectByText(activitySchedule);

            // Specify the staff schedule
            if (this._driver.FindElementsById("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown").Count > 0 && !string.IsNullOrEmpty(staffSchedule))
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown")).SelectByText(staffSchedule);

            // Specify the job
            if (this._driver.FindElementsById("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown").Count > 0 && !string.IsNullOrEmpty(job))
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown")).SelectByText(job);

            // Submit
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_btnSubmit").Click();

            // Verify the staffing assignment was created
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Ministry_Volunteers_StaffingAssignments, staffSchedule, "Staff Schedule", null);
            Assert.AreEqual(isAssignmentActive, this._driver.FindElementByXPath(TableIds.Portal.Ministry_Volunteers_StaffingAssignments).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[1].FindElements(By.TagName("img")).Count > 0);

            Dictionary<int, string> parameters = new Dictionary<int, string> { { 2, activityName }, { 3, volunteerType }, { 4, !string.IsNullOrEmpty(activitySchedule) ? activitySchedule : "n/a" }, { 5, !string.IsNullOrEmpty(staffSchedule) ? staffSchedule : "Base Schedule" }, { 6, !string.IsNullOrEmpty(activityGrouping) ? activityGrouping : "n/a" }, { 7, !string.IsNullOrEmpty(rlcName) ? rlcName : "n/a" }, { 8, !string.IsNullOrEmpty(breakoutGroup) ? breakoutGroup : "n/a" }, { 9, !string.IsNullOrEmpty(job) ? job : "n/a" } };
            this._generalMethods.VerifyTableDataWebDriver(TableIds.Portal.Ministry_Volunteers_StaffingAssignments, itemRow, parameters);
        }

        ///// <summary>
        ///// Creates a staffing assignment for an individual, based on an Activity Grouping.
        ///// </summary>
        ///// <param name="ministryName">The name of the ministry.</param>
        ///// <param name="individualName">The name of the individual.</param>
        ///// <param name="activityName">The name of the activity.</param>
        ///// <param name="volunteerType">The volunteer type for the individual.</param>
        ///// <param name="isAssignmentActive">Specifies the staffing assignment as active or inactive.</param>
        ///// <param name="activityGrouping">The name of the activity grouping. This is optional and does not need to be specified.  You cannot have both an activity grouping and a RLC for a staffing assignment.</param>
        ///// <param name="breakoutGroup">The name of the breakout group.. This is optional and does not need to be specified.</param>
        ///// <param name="activitySchedule">The name of the activity schedule. This is optional and does not need to be specified. Activity Schedules are not present if the Activity Attribute for assignments does not specify Activity Schedules.</param>
        ///// <param name="staffSchedule">The name of the staff schedule.  This is optional and does not need to be specicied. </param>
        ///// <param name="job">The name of the job.  This is optional and does not need to be specified.</param>
        //public void Ministry_StaffingAssignment_Create_ActivityGrouping_Based(string ministryName, string individualName, string activityName, string volunteerType, bool isAssignmentActive, string activityGrouping, string breakoutGroup, string activitySchedule, string staffSchedule, string job) {
        //    // View staffing asignments for the individual
        //    this.Ministry_StaffingAssignment_View(ministryName, individualName, activityName);

        //    // Add a new one, specifying the activity
        //    this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDropDown", activityName);

        //    // Specify the volunteer type
        //    this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_indTypeDropDown", volunteerType);

        //    // Specify the status
        //    if (isAssignmentActive == false)
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_statusDropDown", "Inactive");

        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea") && !string.IsNullOrEmpty(activityGrouping))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea", activityGrouping);


        //    // Specify the breakout group
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown") && !string.IsNullOrEmpty(breakoutGroup))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown", breakoutGroup);

        //    // Specify the activity schedule
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown") && !string.IsNullOrEmpty(activitySchedule))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown", activitySchedule);

        //    // Specify the staff schedule
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown") && !string.IsNullOrEmpty(staffSchedule))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown", staffSchedule);

        //    // Specify the job
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown") && !string.IsNullOrEmpty(job))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown", job);

        //    // Submit
        //    this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_Addeditstaff1_btnSubmit");
        //}

        ///// <summary>
        ///// Creates a staffing assignment for an individual, based on an RLC
        ///// </summary>
        ///// <param name="ministryName">The name of the ministry.</param>
        ///// <param name="individualName">The name of the individual.</param>
        ///// <param name="activityName">The name of the activity.</param>
        ///// <param name="volunteerType">The volunteer type for the individual.</param>
        ///// <param name="isAssignmentActive">Specifies the staffing assignment as active or inactive.</param>
        ///// <param name="rlcName">The name of the Room, Location, Class. This is optional and does not need to be specified.  You cannot have both an activity grouping and a RLC for a staffing assignment.</param>
        ///// <param name="breakoutGroup">The name of the breakout group.. This is optional and does not need to be specified.</param>
        ///// <param name="activitySchedule">The name of the activity schedule. This is optional and does not need to be specified. Activity Schedules are not present if the Activity Attribute for assignments does not specify Activity Schedules.</param>
        ///// <param name="staffSchedule">The name of the staff schedule.  This is optional and does not need to be specicied. </param>
        ///// <param name="job">The name of the job.  This is optional and does not need to be specified.</param>
        //public void Ministry_StaffingAssignment_Create_RLC_Based(string ministryName, string individualName, string activityName, string volunteerType, bool isAssignmentActive, string rlcName, string breakoutGroup, string activitySchedule, string staffSchedule, string job) {
        //    // View staffing asignments for the individual
        //    this.Ministry_StaffingAssignment_View(ministryName, individualName, activityName);

        //    // Add a new one, specifying the activity
        //    this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDropDown", activityName);

        //    // Specify the volunteer type
        //    this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_indTypeDropDown", volunteerType);

        //    // Specify the status
        //    if (isAssignmentActive == false)
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_statusDropDown", "Inactive");

        //    // Specify the Activity Grouping or the RLC, only if one of the parameters is null.  If both are defined, skip this entire section since it is invalid.
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown") && !string.IsNullOrEmpty(rlcName))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown", rlcName);

        //    // Specify the breakout group
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown") && !string.IsNullOrEmpty(breakoutGroup))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown", breakoutGroup);

        //    // Specify the activity schedule
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown") && !string.IsNullOrEmpty(activitySchedule))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown", activitySchedule);

        //    // Specify the staff schedule
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown") && !string.IsNullOrEmpty(staffSchedule))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown", staffSchedule);

        //    // Specify the job
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown") && !string.IsNullOrEmpty(job))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown", job);

        //    // Submit
        //    this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_Addeditstaff1_btnSubmit");
        //}

        ///// <summary>
        ///// Updates a staffing assignment for an individual.
        ///// </summary>
        ///// <param name="selenium"></param>
        ///// <param name="ministryName">The name of the ministry.</param>
        ///// <param name="individualName">The name of the individual.</param>
        ///// <param name="isAssignmentActive">The current status of the assignment.</param>
        ///// <param name="activityName">The current activity.</param>
        ///// <param name="volunteerType">The current volunteer type.</param>
        ///// <param name="activityScheduleDate">The current activity schedule.  This may or may not be specified.</param>
        ///// <param name="staffSchedule">The current staff schedule. This may or may not be specified.</param>
        ///// <param name="activityGrouping">The current activity grouping.  This may or not be specified</param>
        ///// <param name="rlcName">The current RLC. This may or may not be specified.</param>
        ///// <param name="breakoutGroup">The current breakout group. This may or may not be specified.</param>
        ///// <param name="job">The current job.  This may or may not be specified.</param>
        ///// <param name="updatedActivityName">The updated activity name.</param>
        ///// <param name="updatedVolunteerType">The updated volunteer type.</param>
        ///// <param name="updatedActiveStatus">The updated status for the staffing assignment.</param>
        ///// <param name="updatedActivityGrouping">The updated activity grouping.  This is optional. Specifying an activity grouping will prevent an RLC from being specified.</param>
        ///// <param name="updatedRlcName">The updated RLC.  This is optional.  Specifying a RLC will prevent an activity grouping from being specified.</param>
        ///// <param name="updatedBreakoutGroup">The updated breakout group.  This is optional.</param>
        ///// <param name="updatedActivitySchedule">The updated activity schedule.  If the Assignment attributes are not set to Activity Schedule for the activity, this will not be an option.</param>
        ///// <param name="updatedStaffSchedule">The updated staff schedule.  This is optional.</param>
        ///// <param name="updatedJob">The updated job.  This is optional.</param>
        //public void Ministry_StaffingAssignment_Update(string ministryName, string individualName, bool isAssignmentActive, string activityName, string volunteerType, string activityScheduleDate, string staffSchedule, string activityGrouping, string rlcName, string breakoutGroup, string job, string updatedActivityName, string updatedVolunteerType, bool updatedActiveStatus, string updatedActivityGrouping, string updatedRlcName, string updatedBreakoutGroup, string updatedActivitySchedule, string updatedStaffSchedule, string updatedJob) {
        //    // View staffing asignments for the individual
        //    this.Ministry_StaffingAssignment_View(ministryName, individualName, updatedActivityName);

        //    // Get the row number and hit edit for that staffing assignment.  If all the parameters are on the same row, we found the assignment.                        
        //    int numberOfRows = this._generalMethods.GetTableRowCount(TableIds.Ministry_Volunteers_StaffingAssignments);
        //    for (int rowPosition = 1; rowPosition <= numberOfRows; rowPosition++) {
        //        if (this._selenium.IsElementPresent(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[2]/img") == isAssignmentActive)
        //            if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[3]") == activityName)
        //                if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[4]") == volunteerType)
        //                    if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[5]") == activityScheduleDate)
        //                        if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[6]") == staffSchedule)
        //                            if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[7]") == activityGrouping)
        //                                if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[8]") == rlcName)
        //                                    if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[9]") == breakoutGroup)
        //                                        if (this._selenium.GetText(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[10]") == job) {
        //                                            this._selenium.ClickAndWaitForPageToLoad(TableIds.Ministry_Volunteers_StaffingAssignments + "/tbody/tr[" + (rowPosition + 1) + "]/td[1]/a");
        //                                            break;
        //                                        }
        //    }

        //    // Specify the activity
        //    this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDropDown", updatedActivityName);

        //    // Specify the volunteer type
        //    this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_indTypeDropDown", updatedVolunteerType);

        //    // Specify the status
        //    if (updatedActiveStatus == false)
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_statusDropDown", "Inactive");

        //    // Specify the Activity Grouping or the RLC, only if one of the parameters is null. The null parameter gets the respective selected value in the drop down cleared. If both are defined, skip this entire section since it is invalid.
        //    if (string.IsNullOrEmpty(updatedActivityGrouping) || string.IsNullOrEmpty(updatedRlcName)) {
        //        // RLC is null, so specify the activity grouping.
        //        if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea") && !string.IsNullOrEmpty(updatedActivityGrouping)) {
        //            this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea", updatedActivityGrouping);
        //            this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown", "");
        //        }
        //        // Activity Grouping is null, so specify the RLC.
        //        else if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown") && !string.IsNullOrEmpty(updatedRlcName)) {
        //            this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown", updatedRlcName);
        //            this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea", "");
        //        }
        //        // Both were null, clear em both out!
        //        else {
        //            this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_ddlArea", "");
        //            this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDetailDropDown", "");
        //        }

        //    }
        //    // Specify the breakout group
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown") && !string.IsNullOrEmpty(updatedBreakoutGroup))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_individualGroupDropDown", updatedBreakoutGroup);

        //    // Specify the activity schedule
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown") && !string.IsNullOrEmpty(updatedActivitySchedule))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_actTimeInstanceDropDown", updatedActivitySchedule);

        //    // Specify the staff schedule
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown") && !string.IsNullOrEmpty(updatedStaffSchedule))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_scheduleDropDown", updatedStaffSchedule);

        //    // Specify the job
        //    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown") && !string.IsNullOrEmpty(updatedJob))
        //        this._selenium.Select("ctl00_ctl00_MainContent_content_Addeditstaff1_jobDropDown", updatedJob);

        //    // Submit
        //    this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_Addeditstaff1_btnSubmit");
        //}

        /// <summary>
        /// Deletes a staffing assignment.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="activityName">The name of the activity</param>
        /// <param name="volunteerType">The type of volunteer.</param>
        /// <param name="activityScheduleDate">The activity schedule date.</param>
        /// <param name="staffSchedule">The staff's schedule.</param>
        /// <param name="activityGrouping">The activity grouping.</param>
        /// <param name="rlcName">The name of the RLC.</param>
        /// <param name="breakoutGroup">The breakout group.</param>
        /// <param name="job">The job for the individual.</param>
        public void Ministry_StaffingAssignment_Delete(string ministryName, string individualName, bool isAssignmentActive, string activityName, string volunteerType, string activityScheduleDate, string staffSchedule, string activityGrouping, string rlcName, string breakoutGroup, string job)
        {
            // View the staffing assignments for an individual
            this.Ministry_StaffingAssignment_View(ministryName, individualName, activityName);

            // Delete the staffing assignment
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.Ministry_Volunteers_StaffingAssignments, staffSchedule, "Staff Schedule", null);
            this._driver.FindElementByXPath(TableIds.Portal.Ministry_Volunteers_StaffingAssignments).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[10].FindElement(By.TagName("a")).Click();

            // Verify the staffing assignment was removed
            if (this._driver.FindElementsById(TableIds.Portal.Ministry_Volunteers_StaffingAssignments).Count > 0)
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.Ministry_Volunteers_StaffingAssignments, staffSchedule, "Staff Schedule", null));
            }
        }

        /// <summary>
        /// Views all the staffing assignments for an individual.
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="activityName">The name of the activity.</param>
        public void Ministry_StaffingAssignment_View(string ministryName, string individualName, string activityName)
        {
            // Navigate to ministry->staffing assignment
            this._generalMethods.Navigate_Portal(Navigation.Portal.Ministry.Volunteers.Staffing_Assignment);

            // Find the person
            this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(individualName);

            // Select the activity
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_Addeditstaff1_activityDropDown")).SelectByText(activityName);
        }
        #endregion Staffing Assignment

        #region Schedules
        /// <summary>
        /// Creates a schedule
        /// </summary>
        /// <param name="scheduleName">The name of the schedule to be created</param>
        public void Ministry_Schedules_Create(string scheduleName)
        {
            // Navigate to ministry->schedules
            this._selenium.Navigate(Navigation.Ministry.Volunteers.Schedules);

            // Create a new schedule
            if (!string.IsNullOrEmpty(scheduleName))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_AddEditSchedule1_txtStaffingScheduleName", scheduleName);
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_AddEditSchedule1_btnSave");

            // Verify the schedule was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Schedules, scheduleName, "Schedule", null);
            Assert.AreEqual(scheduleName, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_Schedules, itemRow)));
        }

        /// <summary>
        /// Updates a schedule.
        /// </summary>
        /// <param name="scheduleName">The name of the schedule</param>
        /// <param name="scheduleNameUpdated">The updated name of the schedule</param>
        public void Ministry_Schedules_Update(string scheduleName, string scheduleNameUpdated,
            [Optional, DefaultParameterValue("A Test Activity")] string activityName,
            [Optional, DefaultParameterValue("A Test Ministry")] string ministryName)
        {
            // Navigate to ministry->schedules
            this._selenium.Navigate(Navigation.Ministry.Volunteers.Schedules);


            //This allows for correct test activity to be chosen.
            //It was assuming it was automatically selected
            string ministryID = this._sql.Ministry_Ministries_FetchID(15, ministryName).ToString();
            TestLog.WriteLine("Ministry ID: " + ministryID);

            this._selenium.SelectAndWaitForPageToLoad("//select[@name='ddActivityId" + ministryID + "']", activityName);

            // Update a schedule
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Schedules, scheduleName, "Schedule", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.Ministry_Schedules, itemRow + 1));
            Assert.AreEqual(scheduleName, this._selenium.GetValue("ctl00_ctl00_MainContent_content_AddEditSchedule1_txtStaffingScheduleName"));

            if (!string.IsNullOrEmpty(scheduleNameUpdated))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_AddEditSchedule1_txtStaffingScheduleName", scheduleNameUpdated);
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_AddEditSchedule1_btnMod");

            // Verify the schedule was created, original no longer exists
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Schedules, scheduleNameUpdated, "Schedule", null);
            Assert.AreEqual(scheduleNameUpdated, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.Ministry_Schedules, itemRowUpdated)));
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_Schedules, scheduleName, "Schedule", null));
        }

        /// <summary>
        /// Deletes a schedule.
        /// </summary>
        /// <param name="scheduleName">The name of the schedule to be deleted</param>
        public void Ministry_Schedules_Delete(string scheduleName,
            [Optional, DefaultParameterValue("A Test Activity")] string activityName,
            [Optional, DefaultParameterValue("A Test Ministry")] string ministryName)
        {
            // Navigate to ministry->schedules
            this._selenium.Navigate(Navigation.Ministry.Volunteers.Schedules);

            //This allows for correct test activity to be chosen.
            //It was assuming it was automatically selected
            string ministryID = this._sql.Ministry_Ministries_FetchID(15, ministryName).ToString();
            TestLog.WriteLine("Ministry ID: " + ministryID);

            this._selenium.SelectAndWaitForPageToLoad("//select[@name='ddActivityId" + ministryID + "']", activityName);

            // Delete a schedule
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Schedules, scheduleName, "Schedule", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[5]/a", TableIds.Ministry_Schedules, itemRow + 1));

            // Verify the schedule was removed
            Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.Ministry_Schedules, scheduleName, "Schedule", null));
        }
        #endregion Schedules

        /// <summary>
        /// Sets the current ministry to the one specified.
        /// </summary>
        /// <param name="selenium"></param>
        /// <param name="ministry">The name of the ministry.</param>
        public void Ministry_ChangeMinistry(string ministry)
        {
            this._selenium.Click("link=Change");

            if (this._selenium.GetSelectedLabel("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection") != ministry)
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection", ministry);
            }
        }

        /// <summary>
        /// Sets a ministry as the active ministry.
        /// </summary>
        /// <param name="ministryName"></param>
        public void Ministry_View(string ministryName)
        {
            // Try to change the current ministry.  Only attempt if the current ministry is not the ministry name provided.
            if (this._selenium.GetText("active_ministry_name") != ministryName)
            {
                try
                {
                    // If the drop down is present and "Change" link is present, click Change and select the ministry.
                    if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection") && this._selenium.IsElementPresent("link=Change"))
                    //if (this._selenium.IsElementPresent("active_ministry_name") && this._selenium.IsElementPresent("link=Change"))
                    {
                        this._selenium.ClickAndWaitForCondition("link=Change", this._javascript.IsElementPresent("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection"), "5000");
                        
                        //this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection", ministryName, "AHS.ActivityChanged()", "10000");
                        // updated by Demi Zhang - replaced the javascript, otherwise it always indicated the AHS is not defined.
                        this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection", ministryName, string.Format("'{0}'", ministryName), "10000");  
                        System.Threading.Thread.Sleep(5000);
                       
                        
                    }
                }
                catch
                {
                    throw new SeleniumException("Could not select the ministry specified.");
                }
            }
        }
        #endregion Ministry Old

        #region Activities

        #region View All
        /// <summary>
        /// Views all the activities.
        /// </summary>
        public void Ministry_Activities_View_All()
        {
            // Navigate to View All
            this._selenium.Navigate(Navigation.Ministry.Activities.View_All);

            // Verify page loaded
            this._selenium.VerifyTextPresent("Activities");

        }

        /// <summary>
        /// Views all the activities.
        /// </summary>
        public void Ministry_Activities_View_All_WebDriver()
        {
            // Navigate to View All
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Activities.View_All);

            // Verify page loaded
            this._generalMethods.VerifyTextPresentWebDriver("Activities");

        }

        /// <summary>
        /// This method clicks the Assignment Pill on the Activities page and does verification
        /// </summary>
        /// <param name="churchId"></param>
        /// <param name="activityName"></param>
        /// <param name="isParticipant"></param>
        public void Ministry_Activities_View_All_AssignmentPill(int churchId, string activityName, bool isParticipant)
        {
            //Set filters 
            this._driver.FindElementById(GeneralMinistry.Activities.Activity_Name).SendKeys(activityName);
            this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            this._generalMethods.WaitForElementDisplayed(By.XPath(TableIds.Ministry_Activities_ViewAll));

            //Verify Counts
            int activityId = this._sql.Ministry_Activities_FetchID(churchId, activityName);
            string[] assignmentCount = this._sql.Ministry_Assignments_GetAssignmentCountForActivities(churchId, activityId);
            IWebElement activityTable = this._driver.FindElementByXPath(TableIds.Ministry_Activities_ViewAll);
            int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Activities_ViewAll, activityName, "Name");
            if (isParticipant)
            {
                Assert.AreEqual(assignmentCount[0], activityTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[3].Text);
                activityTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[3].FindElements(By.TagName("a"))[0].FindElements(By.TagName("span"))[0].Click();
            }
            else
            {
                Assert.AreEqual(assignmentCount[1], activityTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[2].Text);
                activityTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[2].FindElements(By.TagName("a"))[0].FindElements(By.TagName("span"))[0].Click();
            }

            this._generalMethods.WaitForElement(By.XPath(GeneralMinistry.Assignments.Select_All_CheckBox));
            Assert.AreEqual("SHOW SIDEBAR", this._driver.FindElementByCssSelector("[style=''][data-show-on-expand='yes']").Text, "Show Sidebar not displayed");
            this._driver.FindElementById("expand_collapse").Click();
            this._generalMethods.WaitForElementEnabled(By.XPath(GeneralMinistry.Assignments.Apply_Button));
            Assert.AreEqual("HIDE SIDEBAR", this._driver.FindElementByCssSelector("[style='display: inline;'][data-hide-on-expand='yes']").Text, "Hide Sidebar not displayed");
            //Assert.IsTrue(this._driver.FindElementByXPath(GeneralMinistry.Assignments.Activity).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Expanded), "Activity area not expanded");
            Assert.AreEqual(activityName, new SelectElement(this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Activity_Dropdown))).SelectedOption.Text.Trim(), "Activity Name does not match");

        }
        #endregion View All

        #region Schedules
        /// <summary>
        /// This method navigates to the Activities > View All > Schedules page
        /// </summary>
        /// <param name="ministryName"></param>
        /// <param name="activityName"></param>
        public void Ministry_Activities_Schedules_View(string ministryName, string activityName)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry_DropDown)).SelectByText(ministryName);
            // Search Activity.  ivan. zhang 09/28/2015
            this.Ministry_Activities_ViewAll_SearchActivity(activityName);
            this._driver.FindElement(By.XPath(GeneralMinistry.Activities.Apply_Button)).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.XPath(GeneralMinistry.Activities.View_Assignments));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(GeneralMinistry.Activities.Activity_Schedule_Add));
        }

        /// <summary>
        /// This method clicks on the assignment pill on the activity schedule page. 
        /// </summary>
        /// <param name="churchId"></param>
        /// <param name="activityName"></param>
        /// <param name="scheduleName"></param>
        /// <param name="assignmentType"></param>
        public void Ministry_Activities_Schedules_AssignmentPill(int churchId, string activityName, string scheduleName, string assignmentType)
        {
            //TODO - Write method for Schedule assginments counts
            //Verify Counts
            int activityId = this._sql.Ministry_Activities_FetchID(15, activityName);
            int scheduleId = this._sql.Ministry_ActivitySchedules_FetchID(15, scheduleName);
            int participantCount = this._sql.Ministry_Assignments_GetParticipantAssignmentForScheduleCount(activityId, scheduleId);
            int staffCount = this._sql.Ministry_Assignments_GetStaffAssignmentForScheduleCount(activityId, scheduleId);

            if (assignmentType.Equals("Participant"))
            {
                Assert.AreEqual(participantCount.ToString(), this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[2]/a[2]/span", scheduleId)).Text);
                this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[2]/a[2]", scheduleId)).Click();
            }
            else if (assignmentType.Equals("Staff") | assignmentType.Equals("Volunteer"))
            {
                Assert.AreEqual(staffCount.ToString(), this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[2]/a/span", scheduleId)).Text);
                this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[2]/a", scheduleId)).Click();
            }

            this._generalMethods.WaitForElement(By.XPath(GeneralMinistry.Assignments.Select_All_CheckBox));
            Assert.AreEqual("SHOW SIDEBAR", this._driver.FindElementByCssSelector("[style=''][data-show-on-expand='yes']").Text, "Show Sidebar not displayed");
            this._driver.FindElementById("expand_collapse").Click();
            this._generalMethods.WaitForElementEnabled(By.XPath(GeneralMinistry.Assignments.Apply_Button));
            Assert.AreEqual("HIDE SIDEBAR", this._driver.FindElementByCssSelector("[style='display: inline;'][data-hide-on-expand='yes']").Text, "Hide Sidebar not displayed");
            Assert.AreEqual(activityName, new SelectElement(this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Activity_Dropdown))).SelectedOption.Text.Trim(), "Activity Name does not match");
            Assert.IsTrue(this._driver.FindElementByXPath(GeneralMinistry.Assignments.Activity_Schedules).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Expanded), "Activity Schedule area not expanded");
            Assert.AreEqual(scheduleName, new SelectElement(this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Activity_Schedules_DropDown))).SelectedOption.Text.Trim(), "Activity Schedule Name does not match");
        }


        /// <summary>
        /// Adds a one time activity schedule to an activity
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the schedule.</param>
        /// <param name="startTime">The Start time.</param>
        /// <param name="endTime">The End time.</param>
        /// <param name="startDate">The Date of the activity.</param>
        public void Ministry_Activities_Schedules_Add_OneTime(string ministryName, string activityName, string scheduleName, string startTime, string endTime, string startDate)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on "Add schedule"
            this._driver.FindElementByLinkText("Add Schedule").Click();
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // Enter schedule name
            this._driver.FindElementById("activity_name").SendKeys(scheduleName);

            // Enter Start Time
            this._driver.FindElementById("start_time").SendKeys(startTime);

            // Enter End Time
            this._driver.FindElementById("end_time").SendKeys(endTime);

            // Click on "Add recurrence"
            //this._driver.FindElementByLinkText("Add Recurrence").Click();
            this._generalMethods.WaitForElementVisible(By.Id("frequency_0"));
            this._driver.FindElementById("frequency_0").Click();

            // Enter Start Date for Once recurrence
            this._generalMethods.WaitForElementVisible(By.Id("once_start_date_from"));
            this._driver.FindElementById("once_start_date_from").Clear();
            this._driver.FindElementById("once_start_date_from").SendKeys(startDate);

            // Click I'm Done for recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(2000);
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // If no error message appears continue on
            //var isHidden = this._driver.FindElement(By.Id("recurrence_form_errors")).GetAttribute("style").Contains("display: none");
            //TestLog.WriteLine("Displayed: {0}", isHidden);

            if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
            {
                TestLog.WriteLine("No error after set schedule time");
                // Click I'm Done for schedule
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));
                this._driver.FindElementById("commit").Click();
                System.Threading.Thread.Sleep(5000);
                this._generalMethods.WaitForPageIsLoaded();
                // If no error message appears continue on
                if (!this._generalMethods.IsElementVisibleWebDriver(By.XPath(GeneralMinistry.Activities.Schedule_Error_Message)))
                // if (!this._driver.FindElementByXPath(GeneralMinistry.Activities.Schedule_Error_Message).Displayed)
                {
                    TestLog.WriteLine("No error when click to save the schedule");
                    // Verify schedule was created and saved
                    this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
                }

                #region Error Validation for Schedule
                else
                {
                    TestLog.WriteLine("Error happens when click to save the schedule");
                    if (string.IsNullOrEmpty(scheduleName))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a name");
                    }
                    if (string.IsNullOrEmpty(startTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                    if (string.IsNullOrEmpty(endTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                }
                #endregion Error Validation for Schedule
            }

            #region Error Validation for Recurrence
            else
            {
                TestLog.WriteLine("Error occurs after set schedule time");
                // Verify error message
                //Assert.IsFalse(this._driver.FindElement(By.Id("recurrence_form_errors")).GetAttribute("style").Contains("display: none"));
                //TestLog.WriteLine("Text: " + this._driver.FindElementById("recurrence_form_errors").GetAttribute("value"));
                //this._generalMethods.WaitForElement(this._driver, By.Id("recurrence_form_errors"));
                this._generalMethods.VerifyTextPresentWebDriver("Please enter a date.");
                //Assert.IsTrue(this._driver.FindElementByTagName("html").Text.Contains("Start date is not valid."));
            }
            #endregion Error Validation for Recurrence


        }

        /// <summary>
        /// Adds a Daily recurrence into an existed schedule
        /// </summary>
        /// <param name="activityId">The id of activity.</para>
        /// <param name="scheduleId">The id of schedule.</para>
        /// <param name="startDate">The startdate of new recurrence.</para>
        public void Ministry_Activities_Schedules_Add_Daily_Recurrence(int activityId, int scheduleId, DateTime startDate)
        {
            GeneralMethods utility = this._generalMethods;

            TestLog.WriteLine("Add a daily recurrence");
       
            //Check if we are already in login page
            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                log.Debug("Please login to portal at first");
                throw new Exception("Please login to portal at first");
            }
            else
            {
                this._driver.Navigate().GoToUrl(string.Format("{0}/bridge/activities/{1}/schedules/{2}/edit", GetPortalURL(this._f1Environment), activityId, scheduleId));
            }

            //Add recurrence
            utility.WaitAndGetElement(By.LinkText("Add Recurrence")).Click();
            utility.WaitAndGetElement(By.Id("frequency_1")).Click();
            utility.WaitAndGetElement(By.Id("daily_start_date_from")).SendKeys(startDate.ToString("MM/dd/yyyy"));

            //Save recurrence
            utility.WaitAndGetElement(By.Id("btn_im_done")).Click();

            //Save scheduale
            utility.WaitAndGetElement(By.Id("commit")).Click();
        }

        /// Adds a Daily activity schedule to an activity
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the schedule.</param>
        /// <param name="startTime">The Start time.</param>
        /// <param name="endTime">The End time.</param>
        /// <param name="startDate">The start date of the activity.</param>
        /// <param name="dailyInterval">The frequency of the daily schedule.</param>
        public void Ministry_Activities_Schedules_Add_Daily(string ministryName, string activityName, string scheduleName, string startTime, string endTime, string startDate, string dailyInterval)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on "Add schedule"
            this._driver.FindElementByLinkText("Add Schedule").Click();
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // Enter schedule name
            this._driver.FindElementById("activity_name").SendKeys(scheduleName);

            // Enter Start Time
            this._driver.FindElementById("start_time").SendKeys(startTime);

            // Enter End Time
            this._driver.FindElementById("end_time").SendKeys(endTime);

            // Click on "Add recurrence"
            //this._driver.FindElementByLinkText("Add Recurrence").Click();
            //this._generalMethods.WaitForElement(this._driver, By.Id("frequency_0"));

            // Enter Start Date and frequency for Daily recurrence
            this._generalMethods.WaitForElement(this._driver, By.Id("frequency_1"));
            this._driver.FindElementById("frequency_1").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("daily_start_date_from"));
            this._driver.FindElementById("daily_start_date_from").Clear();
            this._driver.FindElementById("daily_start_date_from").SendKeys(startDate);



            new SelectElement(this._driver.FindElementById("daily_nth_day")).SelectByText(dailyInterval);

            // Click I'm Done for recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(2000);
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // If no error message appears continue on
            //var isHidden = this._driver.FindElement(By.Id("recurrence_form_errors")).GetAttribute("style").Contains("display: none");
            //TestLog.WriteLine("Displayed: {0}", isHidden);

            if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
            {
                // Click I'm Done for schedule
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));
                this._driver.FindElementById("commit").Click();

                // If no error message appears continue on
                if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                {
                    // Verify schedule was created and saved
                    this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
                }

                #region Error Validation for Schedule
                else
                {
                    if (string.IsNullOrEmpty(scheduleName))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a name");
                    }
                    if (string.IsNullOrEmpty(startTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                    if (string.IsNullOrEmpty(endTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                }
                #endregion Error Validation for Schedule
            }

            #region Error Validation for Recurrence
            else
            {
                // Verify error message
                if (string.IsNullOrEmpty(startDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }
                else if (string.IsNullOrEmpty(dailyInterval))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please specify the daily interval.");
                }
            }
            #endregion Error Validation for Recurrence


        }

        /// <summary>
        /// Adds a Weekly activity schedule to an activity
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the schedule.</param>
        /// <param name="startTime">The Start time.</param>
        /// <param name="endTime">The End time.</param>
        /// <param name="startDate">The start date of the activity.</param>
        /// <param name="weeklyInterval">The frequency of the weekly schedule.</param>
        /// <param name="weekDay">The day the weekly schedule occurs.</param>
        public void Ministry_Activities_Schedules_Add_Weekly(string ministryName, string activityName, string scheduleName, string startTime, string endTime, string startDate, string weeklyInterval, GeneralEnumerations.WeeklyScheduleDays[] weekDay)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on "Add schedule"
            this._driver.FindElementByLinkText("Add Schedule").Click();
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // Enter schedule name
            this._driver.FindElementById("activity_name").SendKeys(scheduleName);

            // Enter Start Time
            this._driver.FindElementById("start_time").SendKeys(startTime);

            // Enter End Time
            this._driver.FindElementById("end_time").SendKeys(endTime);

            // Click on "Add recurrence"
            //this._driver.FindElementByLinkText("Add Recurrence").Click();
            //this._generalMethods.WaitForElement(this._driver, By.Id("frequency_0"));

            // Enter Start Date and frequency for Weekly recurrence
            this._driver.FindElementById("frequency_2").Click();
            this._driver.FindElementById("weekly_start_date_from").Clear();
            this._driver.FindElementById("weekly_start_date_from").SendKeys(startDate);
            new SelectElement(this._driver.FindElementById("weekly_nth_week")).SelectByText(weeklyInterval);

            foreach (GeneralEnumerations.WeeklyScheduleDays weekday in weekDay)
            {
                switch (weekday)
                {
                    case GeneralEnumerations.WeeklyScheduleDays.Sunday:
                        this._driver.FindElementById("weekly_sunday").Click();
                        break;
                    case GeneralEnumerations.WeeklyScheduleDays.Monday:
                        this._driver.FindElementById("weekly_monday").Click();
                        break;
                    case GeneralEnumerations.WeeklyScheduleDays.Tuesday:
                        this._driver.FindElementById("weekly_tuesday").Click();
                        break;
                    case GeneralEnumerations.WeeklyScheduleDays.Wednesday:
                        this._driver.FindElementById("weekly_wednesday").Click();
                        break;
                    case GeneralEnumerations.WeeklyScheduleDays.Thursday:
                        this._driver.FindElementById("weekly_thursday").Click();
                        break;
                    case GeneralEnumerations.WeeklyScheduleDays.Friday:
                        this._driver.FindElementById("weekly_friday").Click();
                        break;
                    case GeneralEnumerations.WeeklyScheduleDays.Saturday:
                        this._driver.FindElementById("weekly_saturday").Click();
                        break;
                }
            }

            // Click I'm Done for recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(2000);
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // If no error message appears continue on
            //var isHidden = this._driver.FindElement(By.Id("recurrence_form_errors")).GetAttribute("style").Contains("display: none");
            //TestLog.WriteLine("Displayed: {0}", isHidden);

            if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
            {
                // Click I'm Done for schedule
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));
                this._driver.FindElementById("commit").Click();

                // If no error message appears continue on
                if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                {
                    // Verify schedule was created and saved
                    this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
                }

                #region Error Validation for Schedule
                else
                {
                    if (string.IsNullOrEmpty(scheduleName))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a name");
                    }
                    if (string.IsNullOrEmpty(startTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                    if (string.IsNullOrEmpty(endTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                }
                #endregion Error Validation for Schedule
            }

            #region Error Validation for Recurrence
            else
            {
                // Verify error message
                if (string.IsNullOrEmpty(startDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }
                else if (string.IsNullOrEmpty(weeklyInterval))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please specify the weekly interval and at least one week day.");
                }
                else if (string.IsNullOrEmpty(weekDay.ToString()))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please specify the weekly interval and at least one week day.");
                }
            }
            #endregion Error Validation for Recurrence

        }

        /// <summary>
        /// Adds a Monthly activity schedule to an activity
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the schedule.</param>
        /// <param name="startTime">The Start time.</param>
        /// <param name="endTime">The End time.</param>
        /// <param name="startDate">The start date of the activity.</param>
        /// <param name="monthDay">The day of the month for a monthly schedule.</param>
        /// <param name="monthInterval">The month interval for a monthly schedule.</param>
        public void Ministry_Activities_Schedules_Add_Monthly(string ministryName, string activityName, string scheduleName, string startTime, string endTime, string startDate, string monthDay, string monthInterval)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on "Add schedule"
            this._driver.FindElementByLinkText("Add Schedule").Click();
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // Enter schedule name
            this._driver.FindElementById("activity_name").SendKeys(scheduleName);

            // Enter Start Time
            this._driver.FindElementById("start_time").SendKeys(startTime);

            // Enter End Time
            this._driver.FindElementById("end_time").SendKeys(endTime);

            // Click on "Add recurrence"
            //this._driver.FindElementByLinkText("Add Recurrence").Click();
            //this._generalMethods.WaitForElement(this._driver, By.Id("frequency_0"));

            // Enter Start Date and frequency for Monthly recurrence
            this._driver.FindElementById("frequency_3").Click();
            this._driver.FindElementById("monthly_start_date_from").Clear();
            this._driver.FindElementById("monthly_start_date_from").SendKeys(startDate);
            new SelectElement(this._driver.FindElementById("monthly_nth_day")).SelectByText(monthDay);
            new SelectElement(this._driver.FindElementById("monthly_nth_month")).SelectByText(monthInterval);

            // Click I'm Done for recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(2000);
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // If no error message appears continue on
            //var isHidden = this._driver.FindElement(By.Id("recurrence_form_errors")).GetAttribute("style").Contains("display: none");
            //TestLog.WriteLine("Displayed: {0}", isHidden);

            if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
            {
                // Click I'm Done for schedule
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));
                this._driver.FindElementById("commit").Click();

                // If no error message appears continue on
                if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                {
                    // Verify schedule was created and saved
                    this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
                }

                #region Error Validation for Schedule
                else
                {
                    if (string.IsNullOrEmpty(scheduleName))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a name");
                    }
                    if (string.IsNullOrEmpty(startTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                    if (string.IsNullOrEmpty(endTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                }
                #endregion Error Validation for Schedule
            }

            #region Error Validation for Recurrence
            else
            {
                // Verify error message
                if (string.IsNullOrEmpty(startDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }
                else if (string.IsNullOrEmpty(monthDay) || string.IsNullOrEmpty(monthInterval))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please specify the day and month.");
                }
            }
            #endregion Error Validation for Recurrence


        }

        /// <summary>
        /// Adds a Monthly activity schedule to an activity
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the schedule.</param>
        /// <param name="startTime">The Start time.</param>
        /// <param name="endTime">The End time.</param>
        /// <param name="startDate">The start date of the activity.</param>
        /// <param name="specificDate">[Optional]Select the date on which the recurrence occurs?</param>
        /// <param name="week">[Optional]The week you want the schedule to occur</param>
        /// <param name="dayOfWeek">[Optional]The day of the week you want the schedule to occur</param>
        /// <param name="month">[Optional]The month you want the schedule to occur</param>
        public void Ministry_Activities_Schedules_Add_Yearly(string ministryName, string activityName, string scheduleName, string startTime, string endTime, string startDate, [Optional, DefaultParameterValue(false)] bool specificDate, [Optional, DefaultParameterValue("---")] string week, [Optional, DefaultParameterValue("---")] string dayOfWeek, [Optional, DefaultParameterValue("---")] string month)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on "Add schedule"
            this._driver.FindElementByLinkText("Add Schedule").Click();
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // Enter schedule name
            this._driver.FindElementById("activity_name").SendKeys(scheduleName);

            // Enter Start Time
            this._driver.FindElementById("start_time").SendKeys(startTime);

            // Enter End Time
            this._driver.FindElementById("end_time").SendKeys(endTime);

            // Click on "Add recurrence"
            //this._driver.FindElementByLinkText("Add Recurrence").Click();
            //this._generalMethods.WaitForElement(this._driver, By.Id("frequency_0"));

            // Enter Start Date for Yearly recurrence
            this._driver.FindElementById("frequency_4").Click();
            this._driver.FindElementById("yearly_start_date_from").Clear();
            this._driver.FindElementById("yearly_start_date_from").SendKeys(startDate);

            // If a specific date is selected, enter that information
            if (specificDate)
            {
                this._driver.FindElementById("yearly_nth").Click();
                new SelectElement(this._driver.FindElementById("yearly_ordinal_nth")).SelectByText(week);
                new SelectElement(this._driver.FindElementById("yearly_weekday")).SelectByText(dayOfWeek);
                new SelectElement(this._driver.FindElementById("yearly_nth_month")).SelectByText(month);
            }

            // Click I'm Done for recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(2000);
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // If no error message appears continue on
            //var isHidden = this._driver.FindElement(By.Id("recurrence_form_errors")).GetAttribute("style").Contains("display: none");
            //TestLog.WriteLine("Displayed: {0}", isHidden);

            if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
            {
                // Click I'm Done for schedule
                //this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));
                this._driver.FindElementById("commit").Click();

                // If no error message appears continue on
                if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("error_message")))
                {
                    // Verify schedule was created and saved
                    this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
                }

                #region Error Validation for Schedule
                else
                {
                    if (string.IsNullOrEmpty(scheduleName))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a name");
                    }
                    if (string.IsNullOrEmpty(startTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                    if (string.IsNullOrEmpty(endTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start and end time");
                    }
                }
                #endregion Error Validation for Schedule
            }

            #region Error Validation for Recurrence
            else
            {
                // Verify error message
                if (string.IsNullOrEmpty(startDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }
                else if (string.IsNullOrEmpty(week) || string.IsNullOrEmpty(dayOfWeek) || string.IsNullOrEmpty(month))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please specify the week, day of week and month.");
                }
            }
            #endregion Error Validation for Recurrence


        }

        /// <summary>
        /// Deletes a recurrence from an activity schedule
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the activity schedule.</param>
        public void Ministry_Activities_Schedules_Delete_Schedule(string ministryName, string activityName, string scheduleName)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on the gear icon for the schedule
            this._generalMethods.SelectCheckbox(By.Id("show_inactive"), true);
            this._driver.FindElementByXPath("//span[@class='relativize float_right normal']/a").Click();

            // Delete the schedule
            this._driver.FindElementByLinkText("Delete").Click();

            // Click on delete from confirmation message
            //this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);
            this._driver.FindElementById("ConfirmDelete").Click();
            //this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);

            // Confirm schedule was deleted
            Retry.WithPolling(500).WithTimeout(15000).WithFailureMessage("Did not detect the flyout in the specified time.")
                .Until(() => this._driver.FindElementByXPath("//div[@id='success_middle_messages']/p").Text.Equals(string.Format("{0} was deleted successfully", scheduleName)));

        }
        /// <summary>
        /// Deletes a recurrence from an activity schedule
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the activity schedule.</param>
        public void Ministry_Activities_Schedules_Delete_Schedule_ByName(string ministryName, string activityName, string scheduleName)
        {         
            int scheduleId = this._sql.Ministry_ActivitySchedules_FetchID_Single(15, scheduleName);
            
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on the gear icon for the schedule
            System.Threading.Thread.Sleep(10000);
            this._generalMethods.WaitForPageIsLoaded(60);
            this._generalMethods.SelectCheckbox(By.Id("show_active"), true);

            this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[@class='relativize float_right normal']/a", scheduleId)).Click();   
            // this._driver.FindElementByXPath(string.Format(".//*[text()='{0}']/parent::*/span/a[text()='Options']", scheduleName)).Click();
            
            // Delete the schedule
            this._driver.FindElementByLinkText("Delete").Click();

            // Click on delete from confirmation message
            this._generalMethods.WaitForElement(this._driver, By.Id("ConfirmDelete"));
            this._driver.FindElementById("ConfirmDelete").Click();
        }
        /// <summary>
        /// Deletes a recurrence from an activity schedule
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="scheduleName">The name of the activity schedule.</param>
        /// <param name="recurrenceName">The name of the recurrence.</param>
        public void Ministry_Activities_Schedules_Delete_Recurrence(string ministryName, string activityName, string scheduleName, string recurrenceName)
        {
            // Navigate to Activities -> View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Select Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministryName);
            this._driver.FindElement(By.CssSelector("[type='submit']")).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View assignments"));

            // Click on the Schedules tab
            this._driver.FindElementByLinkText("Schedules").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Schedule"));

            // Click on the gear icon for the activity schedule
            //this._driver.FindElementByClassName("gear_trigger").Click();

            // Click on the gear icon for the activity schedule and select Edit
            TestLog.WriteLine("Find Schedule Name? : {0}", this._driver.FindElementByXPath(TableIds.Ministry_NewSchedules).FindElements(By.TagName("tbody"))[0].FindElements(By.TagName("tr"))[1].FindElements(By.TagName("th"))[0].Text);
            decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_NewSchedules, scheduleName, "Name / Recurrence", null);
            this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Edit");
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            //this._driver.FindElementByLinkText("Edit").Click();

            // Click on the gear icon for the recurrence and select Delete
            decimal itemRow1 = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Recurrences, recurrenceName, "Occurs", null);
            this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Delete recurrence");
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Recurrence"));

            // Click on delete from confirmation message
            //this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);
            //this._driver.FindElementById("ConfirmDelete").Click();
            //this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);

            // Confirm schedule was deleted
            //Retry.WithPolling(500).WithTimeout(15000).WithFailureMessage("Did not detect the flyout in the specified time.")
            //.Until(() => this._driver.FindElementByXPath("//div[@id='success_middle']/p").Text.Equals(string.Format("{0} was deleted successfully", scheduleName)));

        }
        #endregion Schedules

        #region Activity Create Wizard

        /// <summary>
        /// Performs Step 1 of the activity creation wizard
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activityDescription">[Optional] The activity description.</param>
        /// <param name="useCheckin">[Optional] Specifies if this activity uses check in.</param>
        /// <param name="printNameTag">[Optional] Specify if name tags are printed.</param>
        /// <param name="printParentReceipt">[Optional] Specifies if parent receipts are printed.</param>
        /// <param name="overrideAssignments">[Optional] Specifies if assignments are overrided.</param>
        /// <param name="requirementType">[Optional] The requirement type.</param>
        /// <param name="startAgeRange">[Optional] The starting age range for the activity.</param>
        /// <param name="endAgeRange">[Optional] The ending age range for the activity.</param>
        [Obsolete]
        public void Ministry_Activities_Create_Step1(string ministryName, string activityName, [Optional, DefaultParameterValue(null)] string activityDescription, [Optional, DefaultParameterValue(false)] bool useCheckin, [Optional, DefaultParameterValue(false)] bool printNameTag, [Optional, DefaultParameterValue(false)] bool printParentReceipt, [Optional, DefaultParameterValue(false)] bool overrideAssignments, [Optional, DefaultParameterValue(GeneralEnumerations.ActivityCreationCheckinRequirements.Never)] GeneralEnumerations.ActivityCreationCheckinRequirements requirementType, [Optional, DefaultParameterValue(null)] string startAgeRange, [Optional, DefaultParameterValue(null)] string endAgeRange)
        {
            // Activies -> View All
            this.Ministry_Activities_View_All();

            // Add an activity
            this._selenium.ClickAndWaitForPageToLoad("link=Add activity");

            // Select the ministry
            this._selenium.Select("ministry", ministryName);

            // Set the activity name
            this._selenium.Type("activity_name", activityName);

            // Set the activity description
            this._selenium.Type("description", activityDescription);

            // Does this activity use checkin?
            if (useCheckin)
            {
                // It does.  Specify all the information
                this._selenium.Click("used_for_checkin_yes");

                if (printNameTag)
                {
                    this._selenium.Click("print_name_tag");
                }

                if (printParentReceipt)
                {
                    this._selenium.Click("print_receipt");
                }

                if (overrideAssignments)
                {
                    this._selenium.Click("assignments_override");
                }

                switch (requirementType)
                {
                    case GeneralEnumerations.ActivityCreationCheckinRequirements.Never:
                        this._selenium.Click("activity_ar_never");
                        break;
                    case GeneralEnumerations.ActivityCreationCheckinRequirements.Always:
                        this._selenium.Click("activity_ar_always");
                        break;
                    case GeneralEnumerations.ActivityCreationCheckinRequirements.Optional:
                        this._selenium.Click("activity_ar_optional");
                        break;
                    default:
                        throw new SeleniumException("Unknown requirement type specified.");
                }

            }

            // Unless the age range is not provided, specifiy the age range.
            if (!string.IsNullOrEmpty(startAgeRange) && !string.IsNullOrEmpty(endAgeRange))
            {

                this._selenium.Select("age_range_from", startAgeRange);
                this._selenium.Select("age_range_to", endAgeRange);
            }

            // Click Next
            this._selenium.ClickAndWaitForPageToLoad("commit");

            // If there is an error, confirm the error message
            if (this._selenium.IsElementPresent("//dl[@id='error_message']"))
            {
                // Validate messages
                if (string.IsNullOrEmpty(activityName))
                {
                    this._selenium.VerifyTextPresent("Activity name is required.");
                }

                // Cancel out of wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
        }

        /// <summary>
        /// Performs Step 1 of the activity creation wizard
        /// </summary>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activityDescription">[Optional] The activity description.</param>
        /// <param name="isConfidential">[Optional] Is the activity confidential?</param>
        /// <param name="activityType">[Optional] The activity type</param>
        /// <param name="useCheckin">[Optional] Specifies if this activity uses check in.</param>
        /// <param name="printNameTag">[Optional] Specify if name tags are printed.</param>
        /// <param name="printParentReceipt">[Optional] Specifies if parent receipts are printed.</param>
        /// <param name="overrideClosedRooms">[Optional] Specifies if assignments can override closed rooms.</param>
        /// <param name="requireAssignment">[Optional] Does this activity require an assignment?</param>
        /// <param name="requirementType">[Optional] The requirement type.</param>
        /// <param name="useAgeRestrictions">[Optional] Set age restrictions for the activity?</param>
        /// <param name="startAgeRange">[Optional] The starting age range for the activity.</param>
        /// <param name="endAgeRange">[Optional] The ending age range for the activity.</param>
        /// <param name="participantAssignmentType">[Optional] Participant assignment level</param>
        /// <param name="volStaffAssignmentType">[Optional] Vol/Staff assignment level</param>
        /// <param name="autoCreateAssignment">[Optional] Do you want to automatically create an assignment?</param>
        /// <param name="autoCreateBasedOn">[Optional] Create the assignment based on First/Last attendance</param>
        public void Ministry_Activities_Create_Step1_WebDriver(string ministryName, string activityName, [Optional, DefaultParameterValue("")] string activityDescription, [Optional, DefaultParameterValue(false)] bool isConfidential,
            [Optional, DefaultParameterValue("---")] string activityType, [Optional, DefaultParameterValue(false)] bool useCheckin, [Optional, DefaultParameterValue(false)] bool printNameTag,
            [Optional, DefaultParameterValue(false)] bool printParentReceipt, [Optional, DefaultParameterValue(false)] bool overrideClosedRooms, [Optional, DefaultParameterValue(false)] bool requireAssignment,
            [Optional, DefaultParameterValue(GeneralEnumerations.ActivitiesRequireAssignment.None)] GeneralEnumerations.ActivitiesRequireAssignment requirementType, [Optional, DefaultParameterValue(false)] bool useAgeRestrictions,
            [Optional, DefaultParameterValue("")] string startAgeRange, [Optional, DefaultParameterValue("")] string endAgeRange,
            [Optional, DefaultParameterValue(GeneralEnumerations.ActivityEnforceAssignmentCreationType.Always)] GeneralEnumerations.ActivityEnforceAssignmentCreationType participantAssignmentType,
            [Optional, DefaultParameterValue(GeneralEnumerations.ActivityEnforceAssignmentCreationType.Always)] GeneralEnumerations.ActivityEnforceAssignmentCreationType volStaffAssignmentType, [Optional, DefaultParameterValue(false)] bool autoCreateAssignment,
            [Optional, DefaultParameterValue(GeneralEnumerations.ActivityEnforceAssignmentAutoCreate.None)] GeneralEnumerations.ActivityEnforceAssignmentAutoCreate autoCreateBasedOn)
        {
            // Activies -> View All
            this.Ministry_Activities_View_All_WebDriver();

            // Add an activity
            this._driver.FindElementById(GeneralMinistry.Activities.Add_Activity).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // Verify no ministry is selected by default
            Assert.AreEqual("Please select a ministry....", new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry)).SelectedOption.Text);

            // Select the ministry
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry)).SelectByText(ministryName);

            // Set the activity name
            this._driver.FindElementById(GeneralMinistry.Activities.Activity_Name).SendKeys(activityName);

            // Set the activity description
            this._driver.FindElementById(GeneralMinistry.Activities.Activity_Description).SendKeys(activityDescription);

            // Is the activity confidential
            if (isConfidential)
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Is_Confidential).Click();
            }

            // Set Activity Type
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Activity_Type)).SelectByText(activityType);

            // Does this activity use checkin?
            #region Check-in Settings
            if (useCheckin)
            {
                // It does.  Specify all the information
                this._driver.FindElementById(GeneralMinistry.Activities.EnableCheckin_Box).Click();

                if (printNameTag)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.PrintNameTag_Box).Click();
                }

                if (printParentReceipt)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.PrintParentReceipt_Box).Click();
                }

                if (overrideClosedRooms)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.AllowedClosedRoom_Box).Click();
                }

                if (requireAssignment)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.RequireAssignment_Box).Click();

                    switch (requirementType)
                    {
                        case GeneralEnumerations.ActivitiesRequireAssignment.Prevent:
                            this._driver.FindElementById(GeneralMinistry.Activities.RequireAssignment_Prevent).Click();
                            break;
                        case GeneralEnumerations.ActivitiesRequireAssignment.Alert:
                            this._driver.FindElementById(GeneralMinistry.Activities.RequireAssignment_Alert).Click();
                            break;
                        case GeneralEnumerations.ActivitiesRequireAssignment.None:
                            break;
                        default:
                            throw new SeleniumException("Unknown requirement type specified.");
                    }
                }
            }
            #endregion Check-in Settings

            // If age restrictions are used select them
            #region Age Restrictions
            if (useAgeRestrictions)
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnableAgeRestrictions).Click();

                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.AgeRange_From)).SelectByText(startAgeRange);
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.AgeRange_To)).SelectByText(endAgeRange);
            }
            #endregion Age Restrictions

            // Set the assignment creation rules
            #region Assignment Creation Rules

            // Set the option for the type of assignment given to the participant
            switch (participantAssignmentType)
            {
                case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Schedule:
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipantSchedule).Click();
                    break;
                case GeneralEnumerations.ActivityEnforceAssignmentCreationType.DateTime:
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipantDateTime).Click();
                    break;
                case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Always:
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipantAlways).Click();
                    break;
                default:
                    throw new SeleniumException("Unknown assignment type specified");
            }

            // Set the option for the type of assignment given to the volunteer/staff
            switch (volStaffAssignmentType)
            {
                case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Schedule:
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaffSchedule).Click();
                    break;
                case GeneralEnumerations.ActivityEnforceAssignmentCreationType.DateTime:
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaffDateTime).Click();
                    break;
                case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Always:
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaffAlways).Click();
                    break;
                default:
                    throw new SeleniumException("Unknown assignment type specified");
            }

            if (autoCreateAssignment)
            {
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_AutoCreateAssignment), autoCreateAssignment);

                // Set the option to set the assignment based on attendance
                switch (autoCreateBasedOn)
                {
                    case GeneralEnumerations.ActivityEnforceAssignmentAutoCreate.FirstAttendance:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_AutoCreateFirstAttendance).Click();
                        break;
                    case GeneralEnumerations.ActivityEnforceAssignmentAutoCreate.LastAttendance:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_AutoCreateLastAttendance).Click();
                        break;
                    case GeneralEnumerations.ActivityEnforceAssignmentAutoCreate.None:
                        break;
                    default:
                        throw new SeleniumException("Unknown assignment type specified");
                }
            }
            #endregion Assignment Creation Rules

            // Click Next
            this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // If there is an error, confirm the error message
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            {
                // Validate messages
                if (ministryName == "Please select a ministry....")
                {
                    this._generalMethods.VerifyTextPresentWebDriver("No ministry was selected. Please select a ministry.");
                }
                if (string.IsNullOrEmpty(activityName))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Activity name is required.");
                }

                // Cancel out of wizard
                this._driver.FindElementByLinkText(GeneralLinks.RETURN_WebDriver).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add activity"));
            }
        }

        /// <summary>
        /// Validates Step 2 of the activity creation wizard for One Time activity
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="activityScheduleDate">The date of the activity</param>
        [Obsolete]
        public void Ministry_Activities_Create_Step2_Validation_OneTime(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, DateTime? activityScheduleDate)
        {
            // Store culture for date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Specify the activity schedule name
            this._selenium.Type("schedule_name", activityScheduleName);

            // Specify the recurrence start time and end time
            this._selenium.Type("start_time", activityStartTime);
            this._selenium.Type("end_time", activityEndTime);

            // Specify the dates
            this._selenium.Click("frequency_0");
            System.Threading.Thread.CurrentThread.CurrentCulture = culture;
            if (activityScheduleDate.HasValue)
            {
                var activityDate = (activityScheduleDate.Value.ToShortDateString());
                this._selenium.Type("once_start_date_from", activityScheduleDate.Value.ToShortDateString());
            }

            // Submit
            this._selenium.ClickAndWaitForPageToLoad("commit");

            // If validation occurs verify error message
            if (!this._selenium.IsElementPresent("//dl[@class='round_all in_grid']"))
            {
                // Validate messages
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._selenium.VerifyTextPresent("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._selenium.VerifyTextPresent("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._selenium.VerifyTextPresent("Please enter an end time.");
                }
                if (!activityScheduleDate.HasValue)
                {
                    this._selenium.VerifyTextPresent("Please enter a date");
                }
            }

            // Cancel out of wizard
            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");

        }

        /// <summary>
        /// Validates Step 2 of the activity creation wizard for One Time activity
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="activityScheduleStartDate">The date of the activity</param>
        public void Ministry_Activities_Create_Step2_OneTime_WebDriver(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleStartDate)
        {
            // Store culture for date settings
            CultureInfo culture = this.Culture_Settings(churchId);

            // Enter schedule name, start time, and end time
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, activityScheduleName, activityStartTime, activityEndTime);

            var scheduleRecurrence = new { scheduleStartDate = scheduleStartDate };

            // Specify the dates
            this.Ministry_Activities_Schedules_Recurrence_Settings(15, GeneralEnumerations.ActivityScheduleFrequency.Once, scheduleRecurrence);

            // Submit
            this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // If validation occurs verify error message
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            {
                #region Validation Messages
                // Validate messages
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter an end time.");
                }
                if (string.IsNullOrEmpty(scheduleStartDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a date");
                }

                // Cancel out of wizard
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));

                #endregion Validation Messages
            }
        }

        /// <summary>
        /// Validates Step 2 of the activity creation wizard for Daily activity
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="scheduleRepeatDays">The number of days the activity repeats.</param>
        /// <param name="activityScheduleStartDate">The date the activity will start.</param>
        /// <param name="activityScheduleEndDate">[Optional] The date the activity will end.</param>
        [Obsolete]
        public void Ministry_Activities_Create_Step2_Validation_Daily(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatDays, DateTime? activityScheduleStartDate, [Optional, DefaultParameterValue(null)] string activityScheduleEndDate)
        {
            // Store culture for date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Specify the activity schedule name
            this._selenium.Type("schedule_name", activityScheduleName);

            // Specify the recurrence start time and end time
            this._selenium.Type("start_time", activityStartTime);
            this._selenium.Type("end_time", activityEndTime);

            // Select Daily
            this._selenium.Click("frequency_1");

            // Specify the number of days the activity will repeat
            this._selenium.Select("daily_nth_day", scheduleRepeatDays);

            // Specify the Start date
            System.Threading.Thread.CurrentThread.CurrentCulture = culture;
            if (activityScheduleStartDate.HasValue)
            {
                var activityDate = (activityScheduleStartDate.Value.ToShortDateString());
                this._selenium.Type("daily_start_date_from", activityScheduleStartDate.Value.ToShortDateString());
            }

            // Specify end date if given
            System.Threading.Thread.CurrentThread.CurrentCulture = culture;
            if (!string.IsNullOrEmpty(activityScheduleEndDate))
            {
                var activityDate = (activityScheduleEndDate);
                this._selenium.Click("daily_ends");
                this._selenium.Type("recurrence_daily_ending_date", activityScheduleEndDate);
            }

            // Submit
            this._selenium.ClickAndWaitForPageToLoad("commit");

            // If validation occurs verify error message
            if (!this._selenium.IsElementPresent("//dl[@class='round_all in_grid']"))
            {
                // Validate messages
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._selenium.VerifyTextPresent("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._selenium.VerifyTextPresent("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._selenium.VerifyTextPresent("Please enter an end time.");
                }
                if (scheduleRepeatDays == "---")
                {
                    this._selenium.VerifyTextPresent("Please select how often this schedule repeats.");
                }
                if (!activityScheduleStartDate.HasValue)
                {
                    this._selenium.VerifyTextPresent("Please enter a date");
                }
            }

            // Cancel out of wizard
            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");

        }

        /// <summary>
        /// Validates Step 2 of the activity creation wizard for Daily activity
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="scheduleRepeatDays">The number of days the activity repeats.</param>
        /// <param name="activityScheduleStartDate">The date the activity will start.</param>
        /// <param name="activityScheduleEndDate">[Optional] The date the activity will end.</param>
        public void Ministry_Activities_Create_Step2_Daily_WebDriver(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatDays, string scheduleStartDate,
            [Optional, DefaultParameterValue(null)] string scheduleEndDate)
        {
            // Store culture for date settings
            CultureInfo culture = this.Culture_Settings(churchId);

            // Enter schedule name, start time, and end time
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, activityScheduleName, activityStartTime, activityEndTime);

            var scheduleRecurrence = new { scheduleRepeatDays = scheduleRepeatDays, scheduleStartDate = scheduleStartDate, scheduleEndDate = scheduleEndDate };

            // Specify the dates
            this.Ministry_Activities_Schedules_Recurrence_Settings(15, GeneralEnumerations.ActivityScheduleFrequency.Daily, scheduleRecurrence);

            // Submit
            this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // If validation occurs verify error message
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            {
                #region Validation Messages
                // Validate messages
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter an end time.");
                }
                if (scheduleRepeatDays == "---")
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please select how often this schedule repeats.");
                }
                if (string.IsNullOrEmpty(scheduleStartDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }

                // Cancel out of wizard
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));

                #endregion Validation Messages
            }
        }

        /// <summary>
        /// Validates Step 2 of the activity creation wizard for Weekly activity
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="scheduleRepeatWeek">The number of weeks the activity repeats.</param>
        /// <param name="daysToMeet">The days of the week the activity occurs.</param>
        /// <param name="activityScheduleStartDate">The date the activity will start.</param>
        /// <param name="activityScheduleEndDate">[Optional] The date the activity will end.</param>
        [Obsolete]
        public void Ministry_Activities_Create_Step2_Validation_Weekly(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatWeek, List<GeneralEnumerations.WeeklyScheduleDays> daysToMeet, DateTime? activityScheduleStartDate, [Optional, DefaultParameterValue(null)] string activityScheduleEndDate)
        {
            // Store culture for date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Specify the activity schedule name
            this._selenium.Type("schedule_name", activityScheduleName);

            // Specify the recurrence start time and end time
            this._selenium.Type("start_time", activityStartTime);
            this._selenium.Type("end_time", activityEndTime);

            // Select Weekly
            this._selenium.Click("frequency_2");

            // Specify number of weeks the activity repeats
            this._selenium.Select("weekly_nth_week", scheduleRepeatWeek);

            // Specify the days of the week the activity occurs, if not null
            if (!string.IsNullOrEmpty(daysToMeet.ToString()))
            {

                foreach (var dayOfWeek in daysToMeet)
                {
                    if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Sunday)
                    {
                        this._selenium.Click("weekly_sunday");
                    }
                    if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Monday)
                    {
                        this._selenium.Click("weekly_monday");
                    }
                    if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Tuesday)
                    {
                        this._selenium.Click("weekly_tuesday");
                    }
                    if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Wednesday)
                    {
                        this._selenium.Click("weekly_wednesday");
                    }
                    if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Thursday)
                    {
                        this._selenium.Click("weekly_thursday");
                    }
                    if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Friday)
                    {
                        this._selenium.Click("weekly_friday");
                    }
                    if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Saturday)
                    {
                        this._selenium.Click("weekly_saturday");
                    }
                }
            }

            // Specify the Start Date
            System.Threading.Thread.CurrentThread.CurrentCulture = culture;
            if (activityScheduleStartDate.HasValue)
            {
                var activityDate = (activityScheduleStartDate.Value.ToShortDateString());
                this._selenium.Type("weekly_start_date_from", activityScheduleStartDate.Value.ToShortDateString());
            }

            // Specify end date if given
            System.Threading.Thread.CurrentThread.CurrentCulture = culture;
            if (!string.IsNullOrEmpty(activityScheduleEndDate))
            {
                var activityDate = (activityScheduleEndDate);
                this._selenium.Click("weekly_ends");
                this._selenium.Type("recurrence_weekly_ending_date", activityScheduleEndDate);
            }

            // Submit
            this._selenium.ClickAndWaitForPageToLoad("commit");

            // If validation occurs verify error message
            if (!this._selenium.IsElementPresent("//dl[@class='round_all in_grid']"))
            {
                // Validate messages
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._selenium.VerifyTextPresent("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._selenium.VerifyTextPresent("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._selenium.VerifyTextPresent("Please enter an end time.");
                }
                if (scheduleRepeatWeek == "---")
                {
                    this._selenium.VerifyTextPresent("Please select how often this schedule repeats.");
                }
                if (daysToMeet == null)
                {
                    this._selenium.VerifyTextPresent("Please select the day of the week this schedule occurs on.");
                }
                if (!activityScheduleStartDate.HasValue)
                {
                    this._selenium.VerifyTextPresent("Please enter a start date.");
                }
            }

            // Cancel out of wizard
            this._selenium.ClickAndWaitForPageToLoad("link=Cancel");

        }

        /// <summary>
        /// Validates Step 2 of the activity creation wizard for Weekly activity
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="scheduleRepeatWeek">The number of weeks the activity repeats.</param>
        /// <param name="daysToMeet">The days of the week the activity occurs.</param>
        /// <param name="activityScheduleStartDate">The date the activity will start.</param>
        /// <param name="activityScheduleEndDate">[Optional] The date the activity will end.</param>
        public void Ministry_Activities_Create_Step2_Weekly_WebDriver(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatWeek,
            List<GeneralEnumerations.WeeklyScheduleDays> daysToMeet, string scheduleStartDate, [Optional, DefaultParameterValue(null)] string scheduleEndDate)
        {
            // Store culture for date settings
            CultureInfo culture = this.Culture_Settings(churchId);

            // Enter schedule name, start time, and end time
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, activityScheduleName, activityStartTime, activityEndTime);

            var scheduleRecurrence = new { scheduleRepeatWeek = scheduleRepeatWeek, daysToMeet = daysToMeet, scheduleStartDate = scheduleStartDate, scheduleEndDate = scheduleEndDate };

            // Specify the dates
            this.Ministry_Activities_Schedules_Recurrence_Settings(15, GeneralEnumerations.ActivityScheduleFrequency.Weekly, scheduleRecurrence);

            // Submit
            this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // If validation occurs verify error message
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            {
                #region Validation Messages
                // Validate messages
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter an end time.");
                }
                if (scheduleRepeatWeek == "---")
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please select how often this schedule repeats.");
                }
                if (daysToMeet == null)
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please select the day of the week this schedule occurs on.");
                }
                if (string.IsNullOrEmpty(scheduleStartDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }

                // Cancel out of wizard
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));

                #endregion Validation Messages
            }
        }

        /// <summary>
        /// Validates Step 2 of the activity creation wizard for Monthly activity
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="scheduleRepeatMonths">The number of months the activity repeats.</param>
        /// <param name="scheduleRepeatOn">Whether the activity occurs on a day of the month or a specific weekday.</param>
        /// <param name="scheduleDayOfMonth">The day of the month the activity occurs.</param>
        /// <param name="activityScheduleStartDate">The date the activity will start.</param>
        /// <param name="activityScheduleEndDate">[Optional] The date the activity will end.</param>
        public void Ministry_Activities_Create_Step2_Monthly_WebDriver(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatMonths, string scheduleRepeatOn, string activityScheduleStartDate,
            string activityScheduleEndDate = null)
        {
            // Store culture for date settings
            CultureInfo culture = this.Culture_Settings(churchId);

            // Specify the activity schedule name, start time, and end time
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, activityScheduleName, activityStartTime, activityEndTime);

            var scheduleRecurrence = new { scheduleRepeatMonths = scheduleRepeatMonths, scheduleRepeatOn = scheduleRepeatOn, scheduleStartDate = activityScheduleStartDate, scheduleEndDate = activityScheduleEndDate };

            // Set the recurrence for a monthly schedule
            this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Monthly, scheduleRecurrence);

            // Submit
            this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // If validation occurs verify error message
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            {
                #region Validation Messages
                // Validation
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter an end time.");
                }
                if (string.IsNullOrEmpty(scheduleRepeatMonths))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please select how often this schedule repeats.");
                }
                if (string.IsNullOrEmpty(activityScheduleStartDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }

                // Cancel out of wizard
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));

                #endregion Validation Messages
            }
        }

        /// <summary>
        /// Creates Step 2 of the add activity wizard
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="activityScheduleName">The activity schedule name</param>
        /// <param name="activityStartTime"> The start time</param>
        /// <param name="activityEndTime">The end time</param>
        /// <param name="activityScheduleStartDate">The schedule start date</param>
        /// <param name="specificDate">Does it recurr on a specific date?</param>
        /// <param name="specificWeek">The specific week of occurrence</param>
        /// <param name="specificDayOfWeek">The specific day of the week</param>
        /// <param name="specificMonth">The specific month</param>
        /// <param name="activityScheduleEndDate">The schedule end date</param>
        public void Ministry_Activities_Create_Step2_Yearly_WebDriver(int churchId, string activityScheduleName, string activityStartTime, string activityEndTime, string activityScheduleStartDate, bool specificDate = false, string specificWeek = null,
            string specificDayOfWeek = null, string specificMonth = null, DateTime? activityScheduleEndDate = null)
        {
            // Store culture for date settings
            CultureInfo culture = this.Culture_Settings(churchId);

            // Specify the activity schedule name, start time, and end time
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, activityScheduleName, activityStartTime, activityEndTime);

            var scheduleRecurrence = new { scheduleStartDate = activityScheduleStartDate, specificDate = specificDate, week = specificWeek, dayOfWeek = specificDayOfWeek, month = specificMonth, scheduleEndDate = activityScheduleEndDate };

            // Set the recurrence for a Yearly schedule
            this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Yearly, scheduleRecurrence);

            // Submit
            this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // If validation occurs verify error message
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            {
                #region Validation Messages
                // Validation
                if (string.IsNullOrEmpty(activityScheduleName))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a schedule name.");
                }
                if (string.IsNullOrEmpty(activityStartTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start time.");
                }
                if (string.IsNullOrEmpty(activityEndTime))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter an end time.");
                }
                if (string.IsNullOrEmpty(activityScheduleStartDate))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                }

                // Cancel out of wizard
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));

                #endregion Validation Messages
            }
        }

        /// <summary>
        /// Enters the values for Schedule Name, Start Time, and End Time for an activity
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="scheduleName">The name of the schedule</param>
        /// <param name="startTime">The schedule Start Time</param>
        /// <param name="endTime">The Schedule End Time</param>
        public void Ministry_Activities_Create_Schedule_Name_and_Time(int churchId, string scheduleName, string startTime, string endTime, bool isStaff = false)
        {
            // Store culture for date settings
            this.Culture_Settings(churchId);

            // Specify the activity schedule name
            if (isStaff)
            {
                this._driver.FindElementById("rotation_schedule_name").SendKeys(scheduleName);
            }
            else
            {
                this._driver.FindElementById("schedule_name").SendKeys(scheduleName);
            }

            // if it's not a Staff Schedule enter the start/end times
            if (!isStaff)
            {

                // Specify the recurrence start time and end time
                this._driver.FindElementById("start_time").SendKeys(startTime);
                this._driver.FindElementById("end_time").SendKeys(endTime);
            }
        }

        /// <summary>
        /// Sets the schedule recurrence settings based on input
        /// </summary>
        /// <param name="churchId"></param>
        /// <param name="recurrenceType"></param>
        /// <param name="scheduleRecurrence"></param>
        public void Ministry_Activities_Schedules_Recurrence_Settings(int churchId, GeneralEnumerations.ActivityScheduleFrequency recurrenceType, dynamic scheduleRecurrence)
        {

            // Store culture for date settings
            CultureInfo culture = this.Culture_Settings(churchId);

            // Enter recurrence data
            switch (recurrenceType)
            {
                case GeneralEnumerations.ActivityScheduleFrequency.Once:
                    #region Once
                    // Specify the dates
                    this._driver.FindElementById("frequency_0").Click();

                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleStartDate))
                    {
                        System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                        var activityDate = (scheduleRecurrence.scheduleStartDate);
                        this._driver.FindElementById("once_start_date_from").SendKeys(activityDate);
                    }
                    break;
                    #endregion Once
                case GeneralEnumerations.ActivityScheduleFrequency.Daily:
                    #region Daily
                    // Select Daily
                    this._driver.FindElementById("frequency_1").Click();

                    // Specify the number of days the activity will repeat
                    new SelectElement(this._driver.FindElementById("daily_nth_day")).SelectByText(scheduleRecurrence.scheduleRepeatDays);

                    // Specify the Start date
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleStartDate))
                    {
                        System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                        var activityDate = (scheduleRecurrence.scheduleStartDate);
                        this._driver.FindElementById("daily_start_date_from").SendKeys(activityDate);
                    }

                    // Specify end date if given
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleEndDate))
                    {
                        var activityDate = (scheduleRecurrence.scheduleEndDate);
                        this._driver.FindElementById("daily_ends").Click();
                        this._driver.FindElementById("recurrence_daily_ending_date").SendKeys(activityDate);
                    }
                    break;
                    #endregion Daily
                case GeneralEnumerations.ActivityScheduleFrequency.Monthly:
                    #region Monthly
                    // Select Monthly
                    this._driver.FindElementById("frequency_3").Click();

                    // Select the number of months the activity repeats
                    new SelectElement(this._driver.FindElementById("monthly_nth_month")).SelectByText(scheduleRecurrence.scheduleRepeatMonths);

                    // Select the type of monthly reccurrence
                    new SelectElement(this._driver.FindElementById("monthly_nth_day")).SelectByText(scheduleRecurrence.scheduleRepeatOn);

                    // Select the day of the month the activity occurs
                    //this._selenium.Select("monthly_nth_day", scheduleDayOfMonth);

                    // Specify the Start Date
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleStartDate))
                    {
                        var activityDate = (scheduleRecurrence.scheduleStartDate);
                        this._driver.FindElementById("monthly_start_date_from").SendKeys(activityDate);
                    }

                    // Specify end date if given
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleEndDate))
                    {
                        var activityDate = (scheduleRecurrence.scheduleEndDate);
                        this._driver.FindElementById("monthly_ends_date").Click();
                        this._driver.FindElementById("recurrence_monthly_ending_date").SendKeys(activityDate);
                    }
                    break;
                    #endregion Monthly
                case GeneralEnumerations.ActivityScheduleFrequency.Weekly:
                    #region Weekly
                    // Select Weekly
                    this._driver.FindElementById("frequency_2").Click();

                    // Specify number of weeks the activity repeats
                    new SelectElement(this._driver.FindElementById("weekly_nth_week")).SelectByText(scheduleRecurrence.scheduleRepeatWeek);

                    // Specify the days of the week the activity occurs, if not null
                    if (!string.IsNullOrEmpty(scheduleRecurrence.daysToMeet.ToString()))
                    {

                        foreach (var dayOfWeek in scheduleRecurrence.daysToMeet)
                        {
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Sunday)
                            {
                                this._driver.FindElementById("weekly_sunday").Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Monday)
                            {
                                this._driver.FindElementById("weekly_monday").Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Tuesday)
                            {
                                this._driver.FindElementById("weekly_tuesday").Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Wednesday)
                            {
                                this._driver.FindElementById("weekly_wednesday").Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Thursday)
                            {
                                this._driver.FindElementById("weekly_thursday").Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Friday)
                            {
                                this._driver.FindElementById("weekly_friday").Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Saturday)
                            {
                                this._driver.FindElementById("weekly_saturday").Click();
                            }
                        }
                    }

                    // Specify the Start Date
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleStartDate))
                    {
                        var activityDate = (scheduleRecurrence.scheduleStartDate);
                        this._driver.FindElementById("weekly_start_date_from").SendKeys(activityDate);
                    }

                    // Specify end date if given
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleEndDate))
                    {
                        var activityDate = (scheduleRecurrence.scheduleEndDate);
                        this._driver.FindElementById("weekly_ends_date").Click();
                        this._driver.FindElementById("recurrence_weekly_ending_date").SendKeys(activityDate);
                    }
                    break;
                    #endregion Weekly
                case GeneralEnumerations.ActivityScheduleFrequency.Yearly:
                    #region Yearly
                    // Select Yearly
                    this._driver.FindElementById("frequency_4").Click();

                    // Enter Start Date for Yearly recurrence
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleStartDate))
                    {
                        var activityDate = (scheduleRecurrence.scheduleStartDate);
                        this._driver.FindElementById("yearly_start_date_from").Clear();
                        this._driver.FindElementById("yearly_start_date_from").SendKeys(activityDate);
                    }

                    // If a specific date is selected, enter that information
                    if (scheduleRecurrence.specificDate)
                    {
                        this._driver.FindElementById("yearly_nth").Click();
                        new SelectElement(this._driver.FindElementById("yearly_ordinal_nth")).SelectByText(scheduleRecurrence.week);
                        new SelectElement(this._driver.FindElementById("yearly_weekday")).SelectByText(scheduleRecurrence.dayOfWeek);
                        new SelectElement(this._driver.FindElementById("yearly_nth_month")).SelectByText(scheduleRecurrence.month);
                    }

                    // Specify end date if given
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    if (!string.IsNullOrEmpty(scheduleRecurrence.scheduleEndDate))
                    {
                        var activityDate = (scheduleRecurrence.scheduleEndDate);
                        this._driver.FindElementById("yearly_ends_date").Click();
                        this._driver.FindElementById("recurrence_yearly_ending_date").SendKeys(activityDate);
                    }
                    break;
                    #endregion Yearly
                default:
                    break;
            }
        }

        /// <summary>
        /// Creates rosters during step 3 of the activity wizard
        /// </summary>
        /// <param name="useCheckin">Is the activity using check-in</param>
        /// <param name="activityRosterNames">Activity roster names</param>
        /// <param name="rosterBuilding">The building location</param>
        /// <param name="rosterCapacity"> The room capacity</param>
        /// <param name="printNameTag">Print name tags?</param>
        /// <param name="printParentReceipt">Print parent receipt?</param>
        /// <param name="startRosterAsClosed">Start room as closed?</param>
        /// <param name="useRecommendedAges">Use recommended ages?</param>
        /// <param name="checkinBestFit">Best fit with age range or birthdate?</param>
        /// <param name="bestFitAgeRangeMinAge">Starting age range</param>
        /// <param name="bestFitAgeRangeMaxAge">Ending age range</param>
        /// <param name="bestFitAgeRangeType">Age range in months or years?</param>
        /// <param name="bestFitBirthDateRangeStart">Birthdate range start</param>
        /// <param name="bestFitBirthDateRangeEnd">Birthdate range end</param>
        public void Ministry_Activities_Create_Step3_WebDriver(bool useCheckin, List<string> activityRosterNames, string rosterBuilding, string rosterCapacity, bool printNameTag = false, bool printParentReceipt = false, bool startRosterAsClosed = false,
            bool useRecommendedAges = false, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit = GeneralEnumerations.ActivityCreationCheckinBestFit.NoAgeRestriction, string bestFitAgeRangeMinAge = null, string bestFitAgeRangeMaxAge = null,
            string bestFitAgeRangeType = null, DateTime? bestFitBirthDateRangeStart = null, DateTime? bestFitBirthDateRangeEnd = null)
        {
            // If the activiy uses check-in
            #region Check-in Settings
            if (useCheckin)
            {
                // Specify the name of the roster
                foreach (var roster in activityRosterNames)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Name).SendKeys(roster);
                }

                // Select the building
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Roster_Building)).SelectByText(rosterBuilding);

                // Set the room capacity
                this._driver.FindElementById(GeneralMinistry.Activities.Roster_Capacity).SendKeys(rosterCapacity);

                // Make sure Enable Roster for Check-in is checked
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.EnableCheckin_Box), true);

                // Set the options for printing tags
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintNameTag), printNameTag);
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintParentReceipt), printParentReceipt);

                // Set activity to NOT be visible for check-in
                if (startRosterAsClosed)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_StartAsClosed).Click();
                }

                #region Use Recommended Ages
                if (useRecommendedAges)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_UseRecommendedAges).Click();

                    // Set the Check-in Best Fit
                    switch (checkinBestFit)
                    {
                        case GeneralEnumerations.ActivityCreationCheckinBestFit.AgeRange:
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_SetAgeRange).Click();
                            break;
                        case GeneralEnumerations.ActivityCreationCheckinBestFit.BirthDateRange:
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_SetBirthdateRange).Click();
                            break;
                        default:
                            throw new SeleniumException("Unknown Check-in Best Fit Setting specified.");
                    }

                    // If Age Range, select Start and End range
                    if (checkinBestFit == GeneralEnumerations.ActivityCreationCheckinBestFit.AgeRange)
                    {
                        this._driver.FindElementById(GeneralMinistry.Activities.Roster_StartAge).SendKeys(bestFitAgeRangeMinAge);
                        this._driver.FindElementById(GeneralMinistry.Activities.Roster_EndAge).SendKeys(bestFitAgeRangeMaxAge);
                        new SelectElement(this._driver.FindElementById("age_range_type")).SelectByText(bestFitAgeRangeType);
                    }

                    // If Birth Date Range, select Start/End dates
                    if (checkinBestFit == GeneralEnumerations.ActivityCreationCheckinBestFit.BirthDateRange)
                    {
                        if (bestFitBirthDateRangeStart.HasValue)
                        {
                            var birthDateStart = (bestFitBirthDateRangeStart.Value.ToShortDateString());
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_Birthdate_Start).SendKeys(birthDateStart);
                        }
                        if (bestFitBirthDateRangeEnd.HasValue)
                        {
                            var birthDateEnd = (bestFitBirthDateRangeEnd.Value.ToShortDateString());
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_Birthdate_End).SendKeys(birthDateEnd);
                        }
                    }
                }
                #endregion Use Recommended Ages

            #endregion Check-in Settings

                // Add Roster
                this._driver.FindElementById(GeneralMinistry.Activities.Roster_Save).Click();
                this._generalMethods.WaitForElement(By.XPath("//div[@id='saved_rosters']/table[@id='']"));

            }
            else
            {
                // If the activity does not use check-in: For each roster, specify the roster name and hit save.
                foreach (var roster in activityRosterNames)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Name).SendKeys(roster);

                    // Select the building
                    new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Roster_Building)).SelectByText(rosterBuilding);

                    // Set the room capacity
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Capacity).SendKeys(rosterCapacity);

                    // Add Roster
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Save).Click();
                    this._generalMethods.WaitForElement(By.XPath("//div[@id='saved_rosters']/table[@id='']"));

                }
            }

            // Validation
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            #region Validation Messages
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please enter a roster name.");

                // Cancel out of wizard
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));
            }
            #endregion Validation Messages
            else
            {
                // Wait for roster to be saved
                this._generalMethods.WaitForElement(By.XPath("//div[@id='saved_rosters']/table[@id='']"));

                // Click Create Activity
                this._driver.FindElementById(GeneralMinistry.Activities.Create_Activity).Click();
                this._generalMethods.WaitForElement(By.LinkText(GeneralMinistry.Activities.Activity_Schedule_Add));

            }
        }

        /// <summary>
        /// Creates an activity with a schedule recurrence of one time.
        /// </summary>
        public void Ministry_Activities_Create_One_Time(int churchId, string ministryName, string activityName, string activityDescription, bool useCheckin, bool printNameTag, bool printParentReceipt, bool overrideAssignments, GeneralEnumerations.ActivityCreationCheckinRequirements requirementType, string startAgeRange, string endAgeRange, string activityScheduleName, string activityStartTime, string activityEndTime, string activityScheduleStartDate, List<string> activityRosterNames, bool makeRosterVisible, bool openAutomatically, GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings defaultActivityCheckinSettings, bool overridePrintNameTag, bool overridePrintParentReceipt, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge, string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd, GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType, GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType)
        {
            // Store the schedule date in an anonymous type
            var scheduleDates = new { activityScheduleStartDate = activityScheduleStartDate };

            // Create the activity
            this.Ministry_Activity_Create(churchId, ministryName, activityName, activityDescription, useCheckin, printNameTag, printParentReceipt, overrideAssignments, requirementType, startAgeRange, endAgeRange, activityScheduleName, activityStartTime, activityEndTime, GeneralEnumerations.ActivityScheduleFrequency.Once, scheduleDates, activityRosterNames, makeRosterVisible, openAutomatically, defaultActivityCheckinSettings, overridePrintNameTag, overridePrintParentReceipt, checkinBestFit, bestFitAgeRangeMinAge, bestFitAgeRangeMaxAge, bestFitAgeRangeType, bestFitBirthDateRangeStart, bestFitBirthDateRangeEnd, participantAssignmentType, automaticAssignmentType, staffAssignmentType);

        }

        /// <summary>
        /// Creates an activity with a schedule recurrence of one time.
        /// </summary>
        public void Ministry_Activities_Create_One_Time_WebDriver(int churchId, string ministryName, string activityName, string activityDescription, bool isConfidential, string activityType, bool useCheckin, bool printNameTag, bool printParentReceipt,
            bool overrideAssignments, bool requireAssignment, GeneralEnumerations.ActivitiesRequireAssignment requirementType, bool ageRestrictions, string startAgeRange, string endAgeRange,
            GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType, GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType, bool autoCreateAssignment,
            GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, bool useWebLinkGroups, string webLinkContactItem, string activityScheduleName, string activityStartTime, string activityEndTime,
            string activityScheduleStartDate, List<string> activityRosterNames, bool startRosterAsClosed, bool useRecommendedAges, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge,
            string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd)
        {
            // Store the schedule date in an anonymous type
            var scheduleDates = new { activityScheduleStartDate = activityScheduleStartDate };

            // Create the activity
            this.Ministry_Activity_Create_WebDriver(churchId, ministryName, activityName, activityDescription, isConfidential, activityType, useCheckin, printNameTag, printParentReceipt, overrideAssignments, requireAssignment, requirementType,
                ageRestrictions, startAgeRange, endAgeRange, participantAssignmentType, staffAssignmentType, autoCreateAssignment, automaticAssignmentType, useWebLinkGroups, webLinkContactItem, activityScheduleName, activityStartTime, activityEndTime,
                GeneralEnumerations.ActivityScheduleFrequency.Once, scheduleDates, activityRosterNames, startRosterAsClosed, useRecommendedAges, checkinBestFit, bestFitAgeRangeMinAge, bestFitAgeRangeMaxAge, bestFitAgeRangeType, bestFitBirthDateRangeStart,
                bestFitBirthDateRangeEnd);

        }

        /// <summary>
        /// Creates an activity that has a schedule that repeats daily.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="minstryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activityDescription">The activity description.</param>
        /// <param name="useCheckin">Specifies if this activity uses check in.</param>
        /// <param name="printNameTag">Specify if name tags are printed.</param>
        /// <param name="printParentReceipt">Specifies if parent receipts are printed.</param>
        /// <param name="overrideAssignments">Specifies if assignments are overrided.</param>
        /// <param name="requirementType">The requirement type.</param>
        /// <param name="startAgeRange">The starting age range for the activity.</param>
        /// <param name="endAgeRange">The ending age range for the activity.</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="scheduleRepeatDays">Specifies how many days this schedule repeats</param>
        /// <param name="excludesWeekends">Specifies if this excludes weekends.</param>
        /// <param name="scheduleStartDate">Specifies the schedule start date.</param>
        /// <param name="scheduleEndDate">Specifies the schedule end date.</param>
        /// <param name="activityRosterNames">The activity roster names.</param>
        /// <param name="makeRosterVisible">Makes the roster visible in check-in.</param>
        /// <param name="openAutomatically">Makes the roster open automatically.</param>
        /// <param name="defaultActivityCheckinSettings">Keeps the roster settings the same as the activity check-in settings.</param>
        /// <param name="overridePrintNameTag">Overrides the activity check-in settings and prints a name tag just for the roster.</param>
        /// <param name="overridePrintParentReceipt">Overrides the activity check-in settings and prints a parent receipt just for the roster.</param>
        /// <param name="checkinBestFit">Specifies the best fit for individuals going to a roster.</param>
        /// <param name="bestFitAgeRangeMinAge">Sets the start age for the best fit by age range.</param>
        /// <param name="bestFitAgeRangeMaxAge">Sets the end age for the best fit by age range.</param>
        /// <param name="bestFitAgeRangeType">Sets the type (months or years) for the age range best fit.</param>
        /// <param name="bestFitBirthDateRangeStart">Sets the start birth date for the best fit by birth date range.</param>
        /// <param name="bestFitBirthDateRangeEnd">Sets the end date for the best fit by birth date range.</param>
        /// <param name="participantAssignmentType">The type of participant assignment.</param>
        /// <param name="automaticAssignmentType">The auto assignment rules.</param>
        /// <param name="staffAssignmentType">The staff assignment types.</param>
        public void Ministry_Activities_Create_Daily(int churchId, string ministryName, string activityName, string activityDescription, bool useCheckin, bool printNameTag, bool printParentReceipt, bool overrideAssignments, GeneralEnumerations.ActivityCreationCheckinRequirements requirementType, string startAgeRange, string endAgeRange, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatDays, bool excludesWeekends, string scheduleStartDate, string scheduleEndDate, List<string> activityRosterNames, bool makeRosterVisible, bool openAutomatically, GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings defaultActivityCheckinSettings, bool overridePrintNameTag, bool overridePrintParentReceipt, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge, string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd, GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType, GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType)
        {
            // Store the schedule date in an anonymous type
            var scheduleDates = new { scheduleRepeatDays = scheduleRepeatDays, excludesWeekends = excludesWeekends, scheduleStartDate = scheduleStartDate, scheduleEndDate = scheduleEndDate };

            // Create the activity
            this.Ministry_Activity_Create(churchId, ministryName, activityName, activityDescription, useCheckin, printNameTag, printParentReceipt, overrideAssignments, requirementType, startAgeRange, endAgeRange, activityScheduleName, activityStartTime, activityEndTime, GeneralEnumerations.ActivityScheduleFrequency.Daily, scheduleDates, activityRosterNames, makeRosterVisible, openAutomatically, defaultActivityCheckinSettings, overridePrintNameTag, overridePrintParentReceipt, checkinBestFit, bestFitAgeRangeMinAge, bestFitAgeRangeMaxAge, bestFitAgeRangeType, bestFitBirthDateRangeStart, bestFitBirthDateRangeEnd, participantAssignmentType, automaticAssignmentType, staffAssignmentType);

        }

        public void Ministry_Activities_Create_Weekly(int churchId, string ministryName, string activityName, string activityDescription, bool useCheckin, bool printNameTag, bool printParentReceipt, bool overrideAssignments, GeneralEnumerations.ActivityCreationCheckinRequirements requirementType, string startAgeRange, string endAgeRange, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatWeek, List<GeneralEnumerations.WeeklyScheduleDays> daysToMeet, string scheduleStartDate, string scheduleEndDate, List<string> activityRosterNames, bool makeRosterVisible, bool openAutomatically, GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings defaultActivityCheckinSettings, bool overridePrintNameTag, bool overridePrintParentReceipt, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge, string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd, GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType, GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType)
        {
            // Store the schedule date in an anonymous type
            var scheduleDates = new { scheduleRepeatWeek = scheduleRepeatWeek, daysToMeet = daysToMeet, scheduleStartDate = scheduleStartDate, scheduleEndDate = scheduleEndDate };

            // Create the activity
            this.Ministry_Activity_Create(churchId, ministryName, activityName, activityDescription, useCheckin, printNameTag, printParentReceipt, overrideAssignments, requirementType, startAgeRange, endAgeRange, activityScheduleName, activityStartTime, activityEndTime, GeneralEnumerations.ActivityScheduleFrequency.Weekly, scheduleDates, activityRosterNames, makeRosterVisible, openAutomatically, defaultActivityCheckinSettings, overridePrintNameTag, overridePrintParentReceipt, checkinBestFit, bestFitAgeRangeMinAge, bestFitAgeRangeMaxAge, bestFitAgeRangeType, bestFitBirthDateRangeStart, bestFitBirthDateRangeEnd, participantAssignmentType, automaticAssignmentType, staffAssignmentType);
        }

        public void Ministry_Activities_Create_Monthly(int churchId, string ministryName, string activityName, string activityDescription, bool useCheckin, bool printNameTag, bool printParentReceipt, bool overrideAssignments, GeneralEnumerations.ActivityCreationCheckinRequirements requirementType, string startAgeRange, string endAgeRange, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleRepeatMonth, string repeatOn, string dayOfMonth, string scheduleStartDate, string scheduleEndDate, List<string> activityRosterNames, bool makeRosterVisible, bool openAutomatically, GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings defaultActivityCheckinSettings, bool overridePrintNameTag, bool overridePrintParentReceipt, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge, string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd, GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType, GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType)
        {
            // Store the schedule date in an anonymous type
            var scheduleDates = new { scheduleRepeatMonth = scheduleRepeatMonth, repeatOn = repeatOn, dayOfMonth = dayOfMonth, scheduleStartDate = scheduleStartDate, scheduleEndDate = scheduleEndDate };

            // Create the activity
            this.Ministry_Activity_Create(churchId, ministryName, activityName, activityDescription, useCheckin, printNameTag, printParentReceipt, overrideAssignments, requirementType, startAgeRange, endAgeRange, activityScheduleName, activityStartTime, activityEndTime, GeneralEnumerations.ActivityScheduleFrequency.Monthly, scheduleDates, activityRosterNames, makeRosterVisible, openAutomatically, defaultActivityCheckinSettings, overridePrintNameTag, overridePrintParentReceipt, checkinBestFit, bestFitAgeRangeMinAge, bestFitAgeRangeMaxAge, bestFitAgeRangeType, bestFitBirthDateRangeStart, bestFitBirthDateRangeEnd, participantAssignmentType, automaticAssignmentType, staffAssignmentType);
        }

        public void Ministry_Activities_Create_Yearly(int churchId, string ministryName, string activityName, string activityDescription, bool useCheckin, bool printNameTag, bool printParentReceipt, bool overrideAssignments, GeneralEnumerations.ActivityCreationCheckinRequirements requirementType, string startAgeRange, string endAgeRange, string activityScheduleName, string activityStartTime, string activityEndTime, string scheduleStartDate, string scheduleEndDate, List<string> activityRosterNames, bool makeRosterVisible, bool openAutomatically, GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings defaultActivityCheckinSettings, bool overridePrintNameTag, bool overridePrintParentReceipt, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge, string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd, GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType, GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType)
        {
            // Store the schedule date in an anonymous type
            var scheduleDates = new { scheduleStartDate = scheduleStartDate, scheduleEndDate = scheduleEndDate };

            // Create the activity
            this.Ministry_Activity_Create(churchId, ministryName, activityName, activityDescription, useCheckin, printNameTag, printParentReceipt, overrideAssignments, requirementType, startAgeRange, endAgeRange, activityScheduleName, activityStartTime, activityEndTime, GeneralEnumerations.ActivityScheduleFrequency.Yearly, scheduleDates, activityRosterNames, makeRosterVisible, openAutomatically, defaultActivityCheckinSettings, overridePrintNameTag, overridePrintParentReceipt, checkinBestFit, bestFitAgeRangeMinAge, bestFitAgeRangeMaxAge, bestFitAgeRangeType, bestFitBirthDateRangeStart, bestFitBirthDateRangeEnd, participantAssignmentType, automaticAssignmentType, staffAssignmentType);
        }

        #endregion Activity Create Wizard

        #region Staffing Needs

        #region search activity
        /// <summary>
        /// search an activity in the view all page of ministry
        /// </summary>
        /// <param name="activityName"></param>
        /// created by ivan.zhang
        public void Ministry_Activities_ViewAll_SearchActivity(string activityName)
        {
            this._driver.FindElementById("activity_name").Clear();
            this._driver.FindElementById("activity_name").SendKeys(activityName);
            this._driver.FindElementById("apply").Click();

            // Verify page loaded
            this._generalMethods.VerifyTextPresentWebDriver("Activities");
        }
        #endregion search activity

        /// <summary>
        /// Manages the staffing needs for an activity
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="activityName">The name of the activity</param>
        /// <param name="activityScheduleName">The name of the activity schedule</param>
        /// <param name="jobTitle">The name of the job</param>
        /// <param name="staffAmount">The number of staff members</param>
        /// <param name="cancel">Cancel changes? Yes/No</param>
        /// <param name="nonNumeric">Is amount nonnumeric? Yes/No</param>
        public void Ministry_Activities_ManageStaffingNeeds(int churchId, string activityName, string activityScheduleName, string jobTitle, string staffAmount, bool cancel, bool nonNumeric)
        {
            // Store data
            //int activityId = this._sql.Ministry_Activities_FetchID(churchId, activityName);
            int scheduleId = this._sql.Ministry_ActivitySchedules_FetchID(churchId, activityScheduleName);
            int jobId = this._sql.Ministry_Jobs_FetchID(churchId, jobTitle);

            // Navigate to activities View All page
            this.Ministry_Activities_View_All_WebDriver();

            //search the activity
            //added by ivan.zhang
            this.Ministry_Activities_ViewAll_SearchActivity(activityName);

            // Select an activity
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));

            // Click on Manage Staffing Needs
            this._driver.FindElementByLinkText("Manage Staffing Needs").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // Enter staffing amounts for specific activity schedules
            this._driver.FindElementById(string.Format("staffing_{0}_{1}", jobId, scheduleId)).SendKeys(staffAmount);

            // If Cancel is selected go back to activity page without saving
            if (cancel)
            {
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(this._driver, By.ClassName("gutter_left"));
                this._driver.FindElementByClassName("gutter_left").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));

                // Verify amounts were not saved
                this._driver.FindElementByLinkText("Manage Staffing Needs").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));
                this._generalMethods.VerifyTextNotPresentWebDriver(staffAmount);
                this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));
            }
            else if (nonNumeric)
            {
                // Save and go back to activity page
                this._driver.FindElementById("commit").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));

                // Verify amounts were not saved
                this._driver.FindElementByLinkText("Manage Staffing Needs").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));
                this._generalMethods.VerifyTextNotPresentWebDriver(staffAmount);
                this._driver.FindElementByLinkText(GeneralLinksWebDriver.RETURN).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));
            }
            else
            {
                // Otherwise Save and go back to activity page
                this._driver.FindElementById("commit").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));

                // Verify amounts were saved
                this._driver.FindElementByLinkText("Manage Staffing Needs").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));
                this._generalMethods.VerifyTextPresentWebDriver(staffAmount);
                // Remove to reset counts
                this._driver.FindElementById(string.Format("staffing_{0}_{1}", jobId, scheduleId)).Clear();
                this._driver.FindElementById("commit").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));
            }

        }
        #endregion Staffing Needs

        #region Rosters
        /// <summary>
        /// Views the Roster listing page for an activity
        /// </summary>
        /// <param name="ministryName">The name of the ministry</param>
        /// <param name="activityName">The name of the activity</param>
        public void Ministry_Activities_Rosters_View(string ministryName, string activityName)
        {
            // Navigate to Activities View All page
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Activities.View_All);

            // Select an Activity
            this.Ministry_Activities_Search(ministryName, activityName);
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));

            // Click on the Rosters tab
            this._driver.FindElementByLinkText("Rosters").Click();
            System.Threading.Thread.Sleep(5000);
            this._generalMethods.WaitForElementDisplayed(By.LinkText(GeneralMinistry.Activities.RosterFolder_Add));

        }

        /// <summary>
        /// Adds a new Roster Folder
        /// </summary>
        /// <param name="rosterFolderName">The name of the roster folder</param>
        public void Ministry_Activities_RosterFolder_Add(string rosterFolderName)
        {
            // Click to add new roster folder
            this._driver.FindElementByLinkText(GeneralMinistry.Activities.RosterFolder_Add).Click();
            System.Threading.Thread.Sleep(5000);
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // Enter new roster folder name
            this._driver.FindElementById(GeneralMinistry.Activities.RosterFolder_Name).SendKeys(rosterFolderName);

            // Save roster folder
            this._driver.FindElementById(GeneralMinistry.Activities.RosterFolder_Save).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(GeneralMinistry.Activities.RosterFolder_Add));

        }

        /// <summary>
        /// Edits an existing Roster Folder
        /// </summary>
        /// <param name="activityName">The name of the activity</param>
        /// <param name="rosterFolderName">The name of the roster folder</param>
        /// <param name="editedRosterFolderName">The edited name of the roster folder</param>
        public void Ministry_Activities_RosterFolder_Edit(string activityName, string rosterFolderName, string editedRosterFolderName)
        {
            // Store activity and roster folder IDs
            int activityId = this._sql.Ministry_Activities_FetchID(15, activityName);
            int rosterFolderId = this._sql.Ministry_RosterFolders_FetchID(15, rosterFolderName, activityId);

            // Click to Edit the roster folder
            this._driver.FindElementByXPath(string.Format("//div[@id='{0}_header']/span[@class='relativize float_right normal']/a", rosterFolderId)).Click();
            this._driver.FindElementByLinkText("Edit").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // Enter new roster folder name
            this._driver.FindElementById(GeneralMinistry.Activities.RosterFolder_Name).SendKeys(editedRosterFolderName);

            // Save roster folder
            this._driver.FindElementById(GeneralMinistry.Activities.RosterFolder_Save).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(GeneralMinistry.Activities.RosterFolder_Add));

        }

        /// <summary>
        /// Deletes a Roster Folder
        /// </summary>
        /// <param name="activityName">The name of the activity</param>
        /// <param name="rosterFolderName">The name of the roster folder</param>
        public void Ministry_Activities_RosterFolder_Delete(string activityName, string rosterFolderName)
        {
            // Store activity and roster folder IDs
            int activityId = this._sql.Ministry_Activities_FetchID(15, activityName);
            int rosterFolderId = this._sql.Ministry_RosterFolders_FetchID(15, rosterFolderName, activityId);

            // Click to Delete the roster folder
            this._driver.FindElementByXPath(string.Format("//div[@id='{0}_header']/span[@class='relativize float_right normal']/a", rosterFolderId)).Click();
            this._driver.FindElementByLinkText("Delete").Click();

            // Confirm delete
            this._driver.SwitchTo().Alert().Accept();

        }

        /// <summary>
        /// Adds/Edits a Roster for an activity
        /// </summary>
        /// <param name="ministryName">The name of the ministry</param>
        /// <param name="activityName">The name of the activity</param>
        /// <param name="rosterFolderName">The name of the roster folder</param>
        /// <param name="isNew">Is this a new roster?</param>
        /// <param name="rosterName">The name of the roster</param>
        /// <param name="isActive">Is this roster active?</param>
        /// <param name="rosterFolder">The roster folder</param>
        /// <param name="rosterRoom">The meeting room</param>
        /// <param name="rosterCapacity">The roster capacity</param>
        /// <param name="enableCheckin">Enable check-in for this roster?</param>
        /// <param name="printNameTag">Print name tags?</param>
        /// <param name="printParentReceipt">Print parent receipts?</param>
        /// <param name="startRosterClosed">Start this roster closed?</param>
        /// <param name="useAgeRecommendation">Use recommended ages?</param>
        /// <param name="setAgeRange">Set age range?</param>
        /// <param name="ageRangeFrom">Enter from age</param>
        /// <param name="ageRangeTo">Enter to age</param>
        /// <param name="ageRangeType">Select age type</param>
        /// <param name="birthdateRangeFrom">Enter from birthdate</param>
        /// <param name="birthdateRangeTo">Enter to birthdate</param>
        /// <param name="hideRosterInGroupFinder">Hide roster in small group finder?</param>
        /// <param name="allowShareContacts">Allow sharing of contacts?</param>
        /// <param name="saveAddAnother">Save and add another roster?</param>
        public void Ministry_Activities_Rosters_AddEdit(string ministryName, string activityName, bool isNew, string rosterFolderName, string rosterName, bool isActive, string rosterFolder, string rosterRoom,
            string rosterCapacity, bool enableCheckin, bool printNameTag, bool printParentReceipt, bool startRosterClosed, bool useAgeRecommendation, bool setAgeRange, string ageRangeFrom,
            string ageRangeTo, string ageRangeType, string birthdateRangeFrom, string birthdateRangeTo, bool hideRosterInGroupFinder, bool allowShareContacts, bool saveAddAnother = false)
        {
            // Data
            int activityId = this._sql.Ministry_Activities_FetchID(15, activityName);
            int rosterFolderId = this._sql.Ministry_RosterFolders_FetchID(15, rosterFolderName, activityId);

            // If adding a new roster
            if (isNew)
            {
                // Select Add Roster for the selected roster group
                this._driver.FindElementByXPath(string.Format("//div[@id='{0}_header']/span[@class='relativize float_right normal']/a", rosterFolderId)).Click();
                this._driver.FindElementByLinkText("Add Roster").Click();
                this._generalMethods.WaitForElement(By.LinkText("Cancel"));
            }
            else
            {
                // Otherwise, select Edit for the selected roster name
                this._driver.FindElementByXPath(string.Format("//div[@id='block{0}']/table/tbody/tr[2]/td[8]/span[@class='']/a", rosterFolderId)).Click();
                this._driver.FindElementByLinkText("Edit").Click();
                this._generalMethods.WaitForElement(By.LinkText("Cancel"));
                this._driver.FindElementById(GeneralMinistry.Activities.Roster_Name).Clear();
            }

            // Enter roster name
            this._driver.FindElementById(GeneralMinistry.Activities.Roster_Name).SendKeys(rosterName);

            // Set the Roster Active/Inactive
            if (isActive)
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Roster_Active).Click();
            }
            else
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Roster_Inactive).Click();
            }

            // Select roster folder
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Roster_Folder)).SelectByText(rosterFolder);

            // Select room
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Roster_Building)).SelectByText(rosterRoom);

            // Enter room capacity
            this._driver.FindElementById(GeneralMinistry.Activities.Roster_Capacity).SendKeys(rosterCapacity);

            // If check-in is enable
            if (enableCheckin)
            {
                // Check the enable check-in box if not already checked
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnableCheckin), enableCheckin);

                // Set the options for printing tags
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintNameTag), printNameTag);
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintParentReceipt), printParentReceipt);

                // Set the option for assignment override
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_AssignmentOverride), startRosterClosed);

            }

            // If age range is used
            if (useAgeRecommendation)
            {
                // If you want age recommendations click the option to enable it
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Roster_UseRecommendedAges), useAgeRecommendation);

                // If Age Range
                if (setAgeRange)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_SetAgeRange).Click();

                    // Enter first age
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_StartAge).SendKeys(ageRangeFrom);

                    // Enter second age
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_EndAge).SendKeys(ageRangeTo);

                    // Select age type
                    new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Roster_AgeRangeType)).SelectByText(ageRangeType);
                }
                // If Birthdate Range
                else
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_SetBirthdateRange).Click();

                    // Enter birthdate from
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Birthdate_Start).SendKeys(birthdateRangeFrom);

                    // Enter birthdate to
                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Birthdate_End).SendKeys(birthdateRangeTo);
                }
            }

            // Check if hiding roster in small group finder
            if (this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Roster_HiddenInSmallGroupFinder)))
            {
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Roster_HiddenInSmallGroupFinder), hideRosterInGroupFinder);

                // Check if allowing contacts to be shared
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Roster_ShareContactsWithGroup), allowShareContacts);
            }

            // If Save & Add Another
            if (saveAddAnother)
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Roster_SaveAndAddAnother).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));
            }
            else
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Roster_Save).Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Rosters"));
            }
        }

        /// <summary>
        /// This method clicks on the assignment pill on the activity roster page. 
        /// </summary>
        /// <param name="churchId"></param>
        /// <param name="activityName"></param>
        /// <param name="rosterGroupName"></param>
        /// <param name="rosterName"></param>
        /// <param name="isGroupLevel"></param>
        /// <param name="isParticipant"></param>
        public void Ministry_Activities_Rosters_AssignmentPill(int churchId, string activityName, string rosterGroupName, string rosterName, bool isGroupLevel, bool isParticipant)
        {
            //TODO - Write method for Schedule assginments counts
            //Verify Counts
            int activityId = this._sql.Ministry_Activities_FetchID(churchId, activityName);
            int rosterGroupId = this._sql.Ministry_RosterFolders_FetchID(churchId, rosterGroupName, activityId);
            int rosterId = this._sql.Ministry_ActivityDetails_FetchID(churchId, activityId, rosterName);
            int staffRosterGroupCount = this._sql.Ministry_Assignments_GetStaffAssignmentForRosterGroupLevelCount(activityId, rosterGroupId);
            int staffRosterCount = this._sql.Ministry_Assignments_GetStaffAssignmentForRosterLevelCount(activityId, rosterId);
            int participantCount = this._sql.Ministry_Assignments_GetParticipantAssignmentForRosterLevelCount(activityId, rosterId);
            int combineStaffCount = staffRosterGroupCount + staffRosterCount;

            if (isParticipant)
            {
                Assert.AreEqual(participantCount.ToString(), this._driver.FindElementByXPath(string.Format("//div[@id='{0}_header']/span[2]/a[2]/span", rosterGroupId)).Text);
                Assert.AreEqual(participantCount.ToString(), this._driver.FindElementByXPath(string.Format("//div[@id='block{0}']/table/tbody/tr[2]/td[7]/a/span", rosterGroupId)).Text);
                this._driver.FindElementByXPath(string.Format("//div[@id='block{0}']/table/tbody/tr[2]/td[7]/a/span", rosterGroupId)).Click();
            }
            else
            {
                if (isGroupLevel)
                {
                    Assert.AreEqual(combineStaffCount.ToString(), this._driver.FindElementByXPath(string.Format("//div[@id='{0}_header']/span[2]/a/span", rosterGroupId)).Text);
                    this._driver.FindElementByXPath(string.Format("//div[@id='{0}_header']/span[2]/a", rosterGroupId)).Click();
                }
                else
                {
                    Assert.AreEqual(staffRosterCount.ToString(), this._driver.FindElementByXPath(string.Format("//div[@id='block{0}']/table/tbody/tr[2]/td[6]/a/span", rosterGroupId)).Text);
                    this._driver.FindElementByXPath(string.Format("//div[@id='block{0}']/table/tbody/tr[2]/td[6]/a", rosterGroupId)).Click();
                }
            }

            this._generalMethods.WaitForElement(By.XPath(GeneralMinistry.Assignments.Select_All_CheckBox));
            Assert.AreEqual("SHOW SIDEBAR", this._driver.FindElementByCssSelector("[style=''][data-show-on-expand='yes']").Text, "Show Sidebar not displayed");
            this._driver.FindElementById("expand_collapse").Click();
            this._generalMethods.WaitForElementEnabled(By.XPath(GeneralMinistry.Assignments.Apply_Button));
            Assert.AreEqual("HIDE SIDEBAR", this._driver.FindElementByCssSelector("[style='display: inline;'][data-hide-on-expand='yes']").Text, "Hide Sidebar not displayed");
            Assert.AreEqual(activityName, new SelectElement(this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Activity_Dropdown))).SelectedOption.Text.Trim(), "Activity Name does not match");
            if (isGroupLevel)
            {
                Assert.IsTrue(this._driver.FindElementByXPath(GeneralMinistry.Assignments.Rosters).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Expanded), "Rosters section is not expanded");
                Assert.AreEqual(rosterGroupName, new SelectElement(this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Roster_Folders_Dropdown))).SelectedOption.Text.Replace("&nbsp;", "").Trim(), "Roster Group Name does not match");
            }
            else
            {
                Assert.IsTrue(this._driver.FindElementByXPath(GeneralMinistry.Assignments.Rosters).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Expanded), "Rosters section is not expanded");
                Assert.AreEqual(rosterName, new SelectElement(this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Roster_DropDown))).SelectedOption.Text.Trim(), "Roster Name does not match");
            }

        }

        #endregion Rosters

        #region Breakout Groups
        /// <summary>
        /// Views the Breakout Groups page for an activity
        /// </summary>
        /// <param name="ministryName">The ministry name</param>
        /// <param name="activityName">The activity name</param>
        public void Ministry_Activities_BreakoutGroups_View(string ministryName, string activityName)
        {
            // Navigate to Activities View All page
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Activities.View_All);

            // Select an Activity
            this.Ministry_Activities_Search(ministryName, activityName);
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));

            // Click on the Breakout Groups tab
            this._driver.FindElementByLinkText("Breakout Groups").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add Breakout Group"));

            // Verify you are on Breakout Groups page
            Assert.IsTrue(this._driver.FindElementByXPath("//div[@id='tabs']/ul/li[3]/a[@class='ui-tabs-anchor current']").Displayed);
            IWebElement breakoutGroupsTable = this._driver.FindElementByXPath(TableIds.Ministry_Activities_BreakoutGroups);
            Assert.AreEqual("Tag code", breakoutGroupsTable.FindElements(By.TagName("tbody"))[0].FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[0].Text, "Tag code Header Mismatch");
            Assert.AreEqual("Name", breakoutGroupsTable.FindElements(By.TagName("tbody"))[0].FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[1].Text, "Name Header Mismatch");
            Assert.AreEqual("Assigned", breakoutGroupsTable.FindElements(By.TagName("tbody"))[0].FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[2].Text, "Assigned Header Mismatch");

        }

        /// <summary>
        /// Adds a breakout group to an activity
        /// </summary>
        /// <param name="breakoutGroupName">The breakout group name</param>
        /// <param name="breakoutGroupDescription">The breakout group description</param>
        /// <param name="breakoutGroupTagCode">The breakout group tag code</param>
        public void Ministry_Activities_BreakoutGroups_AddEdit(bool isNew, string breakoutGroupName, string breakoutGroupDescription = null, string breakoutGroupTagCode = null)
        {
            if (isNew)
            {
                // Click on the add breakout group link
                this._driver.FindElementByLinkText(GeneralMinistry.Activities.BreakoutGroups_Add).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Activities.BreakoutGroups_Name));
            }

            // Enter breakout group name
            this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_Name).Clear();
            this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_Name).SendKeys(breakoutGroupName);

            // Enter description
            if (!string.IsNullOrEmpty(breakoutGroupDescription))
            {
                this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_Description).Clear();
                this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_Description).SendKeys(breakoutGroupDescription);
            }

            // Enter tag code
            if (!string.IsNullOrEmpty(breakoutGroupTagCode))
            {
                this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_TagCode).Clear();
                this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_TagCode).SendKeys(breakoutGroupTagCode);
            }

            // Save breakout group
            this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_Save).Click();
            this._generalMethods.WaitForElement(By.LinkText(GeneralMinistry.Activities.BreakoutGroups_Add));

            // Verify breakout group was added
            this._generalMethods.VerifyElementPresentWebDriver(By.LinkText(breakoutGroupName));

            if (!string.IsNullOrEmpty(breakoutGroupDescription))
            {
                int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Activities_BreakoutGroups, string.Format("{0}\r\n{1}", breakoutGroupName, breakoutGroupDescription), "Name");
                Assert.AreEqual(breakoutGroupDescription, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/small", TableIds.Ministry_Activities_BreakoutGroups, row + 1)).Text);
            }

            if (!string.IsNullOrEmpty(breakoutGroupTagCode))
            {
                int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Activities_BreakoutGroups, breakoutGroupName, "Name");
                Assert.AreEqual(breakoutGroupTagCode, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td/h2", TableIds.Ministry_Activities_BreakoutGroups, row + 1)).Text);
            }

        }

        /// <summary>
        /// Edits an existing breakout group
        /// </summary>
        /// <param name="breakoutGroupName">Current breakout group name</param>
        /// <param name="newBreakoutGroupName">New breakout group name</param>
        /// <param name="breakoutGroupDescription">The breakout group description</param>
        /// <param name="breakoutGroupTagCode">The breakout group tag code</param>
        public void Ministry_Activities_BreakoutGroups_Edit(string breakoutGroupName, string newBreakoutGroupName, string breakoutGroupDescription = null, string breakoutGroupTagCode = null)
        {
            // Click on the gear for the breakout group and select Edit
            int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Activities_BreakoutGroups, breakoutGroupName, "Name");
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[5]/span/a", TableIds.Ministry_Activities_BreakoutGroups, row + 1)).Click();
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[5]/span/ul/li/a", TableIds.Ministry_Activities_BreakoutGroups, row + 1)).Click();
            this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Activities.BreakoutGroups_Save));
            //this._generalMethods.SelectOptionFromGearWebDriver(row, GeneralMinistry.Activities.BreakoutGroups_Gear_Edit);

            // Update breakout group
            this.Ministry_Activities_BreakoutGroups_AddEdit(false, newBreakoutGroupName, breakoutGroupDescription, breakoutGroupTagCode);

        }

        /// <summary>
        /// Delete a breakout group
        /// </summary>
        /// <param name="breakoutGroupName">The breakout group name</param>
        /// <param name="hasAssignments">Does this breakout group have assignments/attendance tied to it?</param>
        public void Ministry_Activities_BreakoutGroups_Delete(string breakoutGroupName, bool hasAssignments)
        {
            // Click on the gear for the breakout group and select Delete
            int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Activities_BreakoutGroups, breakoutGroupName, "Name");
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[5]/span/a", TableIds.Ministry_Activities_BreakoutGroups, row + 1)).Click();
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[5]/span/ul/li[3]/a", TableIds.Ministry_Activities_BreakoutGroups, row + 1)).Click();
            //this._generalMethods.SelectOptionFromGearWebDriver(row +1, GeneralMinistry.Activities.BreakoutGroups_Gear_Delete);
            this._generalMethods.WaitForElementDisplayed(By.Id("form_modal_window"));

            // If there are no assignments tied to breakout group continue with delete
            if (!hasAssignments)
            {
                Assert.Contains(this._driver.FindElementByXPath("//div[@id='modal_delete_group']/form/p").Text, " has no associated items, so no other records or items will be deleted or modified.");
                this._driver.FindElementById(GeneralMinistry.Activities.BreakoutGroups_Delete).Click();
                this._generalMethods.WaitForElement(By.LinkText(GeneralMinistry.Activities.BreakoutGroups_Add));

                // Confirm breakout group was deleted
                this._generalMethods.VerifyElementNotPresentWebDriver(By.XPath(string.Format("{0}/tbody/tr[{1}]/td[2]/a[text()='{2}']", TableIds.Ministry_Activities_BreakoutGroups, row + 1, breakoutGroupName)));
                //this._generalMethods.VerifyTextNotPresentWebDriver(breakoutGroupName);
            }
            else
            {
                Assert.Contains(this._driver.FindElementByXPath("//div[@id='modal_delete_group']/form/p").Text, "These items must be deleted before ");
                this._driver.FindElementByLinkText("Close alert window").Click();
                this._generalMethods.WaitForElementNotDisplayed(By.Id("form_modal_wrapper"));

                // Confirm breakout group was not deleted
                this._generalMethods.VerifyTextPresentWebDriver(breakoutGroupName);
            }

        }
        #endregion Breakout Groups

        #region Staff/Vol Schedules
        /// <summary>
        /// Views the Roster listing page for an activity
        /// </summary>
        /// <param name="ministryName">The name of the ministry</param>
        /// <param name="activityName">The name of the activity</param>
        public void Ministry_Activities_StaffSchedules_View(string ministryName, string activityName)
        {
            // Navigate to Activities View All page
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Activities.View_All);

            // Select an Activity
            this.Ministry_Activities_Search(ministryName, activityName);
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Manage Staffing Needs"));

            // Click on the Staff & Volunteer Schedules tab
            this._driver.FindElementByLinkText("Staff & Volunteer Schedules").Click();
            this._generalMethods.WaitForElementDisplayed(By.LinkText("Add Schedule"));
            this._generalMethods.WaitForElementInexistent(this._driver, By.ClassName("loading_animation_overlay"));
            this._generalMethods.WaitForElementDisplayed(By.Id("rotationScheduleDiv"));
        }

        /// <summary>
        /// Deletes a Staff Schedule from an activity
        /// </summary>
        /// <param name="ministryName">The name of the ministry</param>
        /// <param name="activityName">The name of the activity</param>
        /// <param name="staffScheduleName">The name of the staff schedule</param>
        /// <param name="haveAssignments">Are there assignments to the staff schedule?</param>
        /// <param name="individualId">Individual ID of person with assignment</param>
        public void Ministry_Activities_StaffSchedules_Delete(string ministryName, string activityName, string staffScheduleName, bool haveAssignments = false, int individualId = 0)
        {
            // Data
            int activityId = this._sql.Ministry_Activities_FetchID(15, activityName);
            int staffScheduleId = this._sql.Ministry_StaffingSchedules_FetchID(15, activityId, staffScheduleName);

            // Delete staff schedule
            this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[@class='relativize float_right normal']/a", staffScheduleId)).Click();
            System.Threading.Thread.Sleep(3000);
            this._driver.FindElementByLinkText("Delete").Click();
            this._generalMethods.WaitForElementDisplayed(By.Id("form_modal_window"));

            //If there are no assignments then finish delete
            if (haveAssignments)
            {
                this._generalMethods.WaitForElementDisplayed(By.Id("staff-schedule-cannot-delete"));
                Assert.AreEqual("This staff/volunteer schedule cannot be deleted because there are assignments associated to it", this._driver.FindElementByXPath("//div[@id='staff-schedule-cannot-delete']/div/div/div/h2/strong").Text);
                //this._generalMethods.VerifyTextPresentWebDriver("This staff/volunteer schedule cannot be deleted because there are assignments associated to it");
                this._driver.FindElementByLinkText("Close alert window").Click();
                this._generalMethods.WaitForElementNotDisplayed(By.Id("form_modal_window"));

                // Delete the assignment
                this._sql.Ministry_StaffingAssignments_Delete(15, individualId, activityName, staffScheduleName);

                //Refresh page
                this._driver.Navigate().Refresh();
                this._driver.FindElementByLinkText("Staff & Volunteer Schedules").Click();
                this._generalMethods.WaitForElementDisplayed(By.LinkText("Add Schedule"));

                // Delete staff schedule
                this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[@class='relativize float_right normal']/a", staffScheduleId)).Click();
                System.Threading.Thread.Sleep(3000);
                this._driver.FindElementByLinkText("Delete").Click();
                this._generalMethods.WaitForElementDisplayed(By.Id("form_modal_window"));
            }

            // Confirm modal appears and click to delete schedule
            this._generalMethods.WaitForElementDisplayed(By.Id("staff-schedule-can-delete"));
            Assert.AreEqual("You are about to delete this staff/volunteer schedule", this._driver.FindElementByXPath("//div[@id='staff-schedule-can-delete']/div/div/div/h2/strong").Text);
            //this._generalMethods.VerifyTextPresentWebDriver("You are about to delete this staff/volunteer schedule");
            this._driver.FindElementById("delete-staff-volunteer-schedule-confirm").Click();
            this._generalMethods.WaitForElementNotDisplayed(By.Id("form_modal_window"));

            // Verify schedule is deleted
            this._generalMethods.VerifyTextNotPresentWebDriver(staffScheduleName);

        }

        /// <summary>
        /// Create a staff schedule with a one time recurrence
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="scheduleName">The schedule name</param>
        /// <param name="staffScheduleStartDate">The schedule date</param>
        public void Ministry_Activities_StaffSchedules_Add_Once(int churchId, string scheduleName, string staffScheduleStartDate)
        {
            // Click on the Add Schedule button
            this._driver.FindElementByLinkText("Add Schedule").Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // Enter staff schedule name
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, scheduleName, null, null, true);

            // Enter the recurrence information
            var scheduleRecurrence = new { scheduleStartDate = staffScheduleStartDate };

            this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Once, scheduleRecurrence);

            // Save recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(10000);

            // Save schedule
            this._driver.FindElementById("commit").Click();
            System.Threading.Thread.Sleep(10000);

            // Confirm schedule was created
            this._generalMethods.VerifyTextPresentWebDriver(scheduleName);

        }

        /// <summary>
        /// Creates a staff schedule with a Daily recurrence
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="scheduleName">The schedule name</param>
        /// <param name="staffScheduleStartDate">The schedule start date</param>
        /// <param name="scheduleRepeatDays">The number of days the schedule occurs</param>
        /// <param name="scheduleEndDate">[Optional] The schedule end date</param>
        public void Ministry_Activities_StaffSchedules_Add_Daily(int churchId, string scheduleName, string staffScheduleStartDate, string scheduleRepeatDays, [Optional] string scheduleEndDate)
        {
            // Click on the Add Schedule button
            this._driver.FindElementByLinkText("Add Schedule").Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // Enter staff schedule name
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, scheduleName, null, null, true);

            // Enter the recurrence information
            var scheduleRecurrence = new { scheduleStartDate = staffScheduleStartDate, scheduleRepeatDays = scheduleRepeatDays, scheduleEndDate = scheduleEndDate };

            this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Daily, scheduleRecurrence);

            // Save recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(10000);

            // Save schedule
            this._driver.FindElementById("commit").Click();
            System.Threading.Thread.Sleep(10000);

            // Confirm schedule was created
            this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
        }

        /// <summary>
        /// Creates a staff schedule with a Weekly recurrence
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="scheduleName">The schedule name</param>
        /// <param name="staffScheduleStartDate">The schedule start date</param>
        /// <param name="scheduleRepeatWeek">The number of weeks the schedule repeats</param>
        /// <param name="daysToMeet">The days the schedule occurs on</param>
        /// <param name="scheduleEndDate">[Optional] The schedule end date</param>
        public void Ministry_Activities_StaffSchedules_Add_Weekly(int churchId, string scheduleName, string staffScheduleStartDate, string scheduleRepeatWeek, GeneralEnumerations.WeeklyScheduleDays[] daysToMeet, [Optional] string scheduleEndDate)
        {
            // Click on the Add Schedule button
            this._driver.FindElementByLinkText("Add Schedule").Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // Enter staff schedule name
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, scheduleName, null, null, true);

            // Enter the recurrence information
            var scheduleRecurrence = new { scheduleStartDate = staffScheduleStartDate, scheduleRepeatWeek = scheduleRepeatWeek, daysToMeet = daysToMeet, scheduleEndDate = scheduleEndDate };

            this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Weekly, scheduleRecurrence);

            // Save recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(10000);

            // Save schedule
            this._driver.FindElementById("commit").Click();
            System.Threading.Thread.Sleep(10000);

            // Confirm schedule was created
            this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
        }

        /// <summary>
        /// Creates a staff schedule with a Monthly recurrence
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="scheduleName">The schedule name</param>
        /// <param name="staffScheduleStartDate">The schedule start date</param>
        /// <param name="scheduleRepeatMonths">The number of months the schedule repeats</param>
        /// <param name="scheduleRepeatOn">The day the schedule repeats on</param>
        /// <param name="scheduleEndDate">[Optional] The end date</param>
        public void Ministry_Activities_StaffSchedules_Add_Monthly(int churchId, string scheduleName, string staffScheduleStartDate, string scheduleRepeatMonths, string scheduleRepeatOn, [Optional] string scheduleEndDate)
        {
            // Click on the Add Schedule button
            this._driver.FindElementByLinkText("Add Schedule").Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // Enter staff schedule name
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, scheduleName, null, null, true);

            // Enter the recurrence information
            var scheduleRecurrence = new { scheduleStartDate = staffScheduleStartDate, scheduleRepeatMonths = scheduleRepeatMonths, scheduleRepeatOn = scheduleRepeatOn, scheduleEndDate = scheduleEndDate };

            this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Monthly, scheduleRecurrence);

            // Save recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(10000);

            // Save schedule
            this._driver.FindElementById("commit").Click();
            System.Threading.Thread.Sleep(10000);

            // Confirm schedule was created
            this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
        }

        /// <summary>
        /// Creates a staff schedule with a Yearly recurrence
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="scheduleName">The schedule name</param>
        /// <param name="staffScheduleStartDate">The schedule start date</param>
        /// <param name="specificDate">Does this occur on a specific date?</param>
        /// <param name="week">[Optional] The week the schedule occurs</param>
        /// <param name="dayOfWeek">[Optional] The day of the week the schedule occurs</param>
        /// <param name="month">[Optional] The month the schedule occurs</param>
        /// <param name="scheduleEndDate">[Optional] The schedule end date</param>
        public void Ministry_Activities_StaffSchedules_Add_Yearly(int churchId, string scheduleName, string staffScheduleStartDate, bool specificDate, [Optional] string week, [Optional] string dayOfWeek, [Optional] string month, [Optional] string scheduleEndDate)
        {
            // Click on the Add Schedule button
            this._driver.FindElementByLinkText("Add Schedule").Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // Enter staff schedule name
            this.Ministry_Activities_Create_Schedule_Name_and_Time(churchId, scheduleName, null, null, true);

            // Enter the recurrence information
            var scheduleRecurrence = new { scheduleStartDate = staffScheduleStartDate, specificDate = specificDate, week = week, dayOfWeek = dayOfWeek, month = month, scheduleEndDate = scheduleEndDate };

            this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Yearly, scheduleRecurrence);

            // Save recurrence
            this._driver.FindElementById("btn_im_done").Click();
            System.Threading.Thread.Sleep(10000);

            // Save schedule
            this._driver.FindElementById("commit").Click();
            System.Threading.Thread.Sleep(10000);

            // Confirm schedule was created
            this._generalMethods.VerifyTextPresentWebDriver(scheduleName);
        }

        /// <summary>
        /// Edits an existing staff schedule
        /// </summary>
        /// <param name="churchId">The church ID</param>
        /// <param name="activityName">The activity name</param>
        /// <param name="staffScheduleName">The existing staff schedule name</param>
        /// <param name="newScheduleName">The new staff schedule name</param>
        /// <param name="newRecurrence">[Optional] Is there a new recurrence?</param>
        /// <param name="staffScheduleStartDate">[Optional] start date for new recurrence</param>
        public void Ministry_Activities_StaffSchedules_Edit(int churchId, string activityName, string staffScheduleName, string newScheduleName, [Optional] bool newRecurrence, [Optional] string staffScheduleStartDate)
        {
            // Store activity and schedule IDs
            int activityId = this._sql.Ministry_Activities_FetchID(churchId, activityName);
            int staffScheduleId = this._sql.Ministry_StaffingSchedules_FetchID(churchId, activityId, staffScheduleName);

            // Click the gear icon for an existing schedule and select Edit
            this._driver.FindElementByXPath(string.Format("//div[@id='schedule_{0}']/span[@class='relativize float_right normal']/a", staffScheduleId)).Click();
            this._driver.FindElementByLinkText("Edit").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));

            // Update schedule name
            this._driver.FindElementById("rotation_schedule_name").Clear();
            this._driver.FindElementById("rotation_schedule_name").SendKeys(newScheduleName);

            // Add new recurrence
            if (newRecurrence)
            {
                this._driver.FindElementByLinkText("Add Recurrence").Click();

                var scheduleRecurrence = new { scheduleStartDate = staffScheduleStartDate };

                this.Ministry_Activities_Schedules_Recurrence_Settings(churchId, GeneralEnumerations.ActivityScheduleFrequency.Once, scheduleRecurrence);

                // Save recurrence
                this._driver.FindElementById("btn_im_done").Click();
                System.Threading.Thread.Sleep(10000);
            }

            // Save changes
            this._driver.FindElementById("commit").Click();
            System.Threading.Thread.Sleep(10000);
            //this._generalMethods.WaitForElement(By.LinkText("Add Schedule"));

            // Verify changes were made
            this._generalMethods.VerifyTextPresentWebDriver(newScheduleName);

        }

        #endregion Staff/Vol Schedules

        #region Properties
        /// <summary>
        /// Edits the Properties of an existing activity
        /// </summary>
        public void Ministry_Activities_Properties_EditPage(int churchId, string ministryName, string activityName)
        {
            // Store activity ID?
            int activityID = this._sql.Ministry_Activities_FetchID(churchId, activityName);

            // Navigate to Activities View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Search for a particular ministry
            this.Ministry_Activities_Search(ministryName, activityName);

            // Click on an activity name
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Schedules"));

            // Click on Edit for Properties
            this._driver.FindElementByXPath(GeneralMinistry.Activities.Properties_Edit).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel"));
            this._generalMethods.VerifyTextPresentWebDriver("Edit Activity Settings");
        }

        /// <summary>
        /// Verify Side Grid Activity Properties
        /// </summary>
        /// <param name="properties">Properties in order to verify</param>
        public void Ministry_Activities_Activity_Property_Verify(Dictionary<string, string> properties)
        {

            IWebElement propertiesTable = this._driver.FindElementByXPath(TableIds.Ministry_Activity_PropertiesTable);
            int index = 0;
            foreach (KeyValuePair<string, string> property in properties)
            {

                switch (property.Key)
                {

                    case GeneralMinistry.Activity.Property.Ministry:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Ministry, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.AreEqual(property.Value, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].Text);
                        break;

                    case GeneralMinistry.Activity.Property.Activity_Type:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Activity_Type, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.AreEqual(property.Value, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].Text);
                        break;

                    case GeneralMinistry.Activity.Property.Age:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Age, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.AreEqual(property.Value, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].Text);
                        break;

                    case GeneralMinistry.Activity.Property.Confidential:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Confidential, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.Contains(propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), GeneralMinistry.Activities.Check_Icon);
                        break;

                    case GeneralMinistry.Activity.Property.Volunteers_Staff:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Volunteers_Staff, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.AreEqual(property.Value, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].Text);
                        break;

                    case GeneralMinistry.Activity.Property.Participants:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Participants, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.AreEqual(property.Value, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].Text);
                        break;

                    case GeneralMinistry.Activity.Property.Auto_Assignment:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Auto_Assignment, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.AreEqual(property.Value, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].Text);
                        break;

                    case GeneralMinistry.Activity.Property.Weblink_Groups:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Weblink_Groups, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        Assert.Contains(propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), GeneralMinistry.Activities.Check_Icon);
                        Assert.AreEqual(property.Value, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].FindElements(By.TagName("small"))[0].Text);
                        break;

                    case GeneralMinistry.Activity.Property.Active:
                        Assert.AreEqual(GeneralMinistry.Activity.Property.Active, propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("th"))[0].Text);
                        if (property.Value.Equals(GeneralMinistry.Activity.Property.Yes))
                        {
                            Assert.Contains(propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), GeneralMinistry.Activities.Check_Icon);
                        }
                        else
                        {
                            Assert.Contains(propertiesTable.FindElements(By.TagName("tr"))[index].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), GeneralMinistry.Activities.UnCheck_Icon);
                        }
                        break;

                    default:
                        Assert.Fail("Activity Property Unknown: {0}", property.Key);
                        break;
                }

                index++;
            }

        }

        /// <summary>
        /// VErify CheckIn Settings in Ministry Activity
        /// </summary>
        /// <param name="activityName">Activity Name to get checkin code</param>
        /// <param name="nameTag">Name Tag present</param>
        /// <param name="parentReceipt">Parent Receipt present</param>
        /// <param name="closedRoomOveride">Closed Room present</param>
        /// <param name="assignmentRequired">Assignment Required</param>
        /// <param name="preventAlert">If assignment required what type (i.e. Prevent or Alert)</param>
        public void Ministry_Activities_Activity_CheckIn_Settings_Verify(String activityName, bool nameTag = false, bool parentReceipt = false, bool closedRoomOveride = false, bool assignmentRequired = false, string preventAlert = "")
        {

            int checkinCode = this._sql.Ministry_CheckIn_FetchCheckInCode(15, activityName);

            IWebElement checkinTable = this._driver.FindElementByXPath(TableIds.Ministry_Activity_CheckInTable);
            Assert.AreEqual("Code", checkinTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[0].Text);
            Assert.AreEqual(checkinCode, Convert.ToInt32(checkinTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("td"))[0].FindElements(By.TagName("span"))[0].Text));
            Assert.AreEqual("Renew", checkinTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("td"))[0].FindElements(By.TagName("span"))[1].GetAttribute("a"));
            Assert.IsTrue(checkinTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("td"))[0].FindElements(By.TagName("span"))[1].FindElement(By.Id(GeneralMinistry.Activities.Check_In_Settings_Renew)).Displayed);

            Assert.AreEqual("Name Tag", checkinTable.FindElements(By.TagName("tr"))[1].FindElements(By.TagName("th"))[0].Text);
            string nameIcon = nameTag == true ? GeneralMinistry.Activities.Check_Icon : GeneralMinistry.Activities.UnCheck_Icon;
            Assert.Contains(checkinTable.FindElements(By.TagName("tr"))[1].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), nameIcon);

            Assert.AreEqual("Parent Receipt", checkinTable.FindElements(By.TagName("tr"))[2].FindElements(By.TagName("th"))[0].Text);
            string receiptIcon = parentReceipt == true ? GeneralMinistry.Activities.Check_Icon : GeneralMinistry.Activities.UnCheck_Icon;
            Assert.Contains(checkinTable.FindElements(By.TagName("tr"))[2].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), receiptIcon);


            Assert.AreEqual("Closed Room Override", checkinTable.FindElements(By.TagName("tr"))[3].FindElements(By.TagName("th"))[0].Text);
            string overideIcon = closedRoomOveride == true ? GeneralMinistry.Activities.Check_Icon : GeneralMinistry.Activities.UnCheck_Icon;
            Assert.Contains(checkinTable.FindElements(By.TagName("tr"))[3].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), overideIcon);

            Assert.AreEqual("Assignment Required", checkinTable.FindElements(By.TagName("tr"))[4].FindElements(By.TagName("th"))[0].Text);
            string requiredIcon = assignmentRequired == true ? GeneralMinistry.Activities.Check_Icon : GeneralMinistry.Activities.UnCheck_Icon;
            Assert.Contains(checkinTable.FindElements(By.TagName("tr"))[4].FindElements(By.TagName("td"))[0].FindElements(By.TagName("img"))[0].GetAttribute("src"), requiredIcon);
            if (assignmentRequired) { Assert.AreEqual("Alert", checkinTable.FindElements(By.TagName("tr"))[4].FindElements(By.TagName("td"))[0].FindElements(By.TagName("span"))[0].Text); }

        }

        #endregion Properties

        #region Activity Settings
        /// <summary>
        /// Adds or edits the basic information for an activity
        /// </summary>
        /// <param name="activityName">The activity name</param>
        /// <param name="updatedActivityName">The updated activity name</param>
        /// <param name="isActive">Want the activity to be Active?</param>
        /// <param name="description">The activity description</param>
        /// <param name="isConfidential">Want this activity confidential?</param>
        /// <param name="activityType">The activity type</param>
        public void Ministry_Activities_AddEditSettings_BasicInformation(string activityName, string updatedActivityName, bool isActive, string description, bool isConfidential, string activityType)
        {
            // Edit activity name
            if (!string.IsNullOrEmpty(updatedActivityName))
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_Name).Clear();
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_Name).SendKeys(updatedActivityName);
            }

            // Make activity Active/Inactive
            if (isActive)
            {
                if ((this._driver.FindElementById(GeneralMinistry.Activities.Activity_Inactive).Selected))
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_Active).Click();
                }
            }
            else
            {
                if ((this._driver.FindElementById(GeneralMinistry.Activities.Activity_Active).GetAttribute("data-val")).Equals("true"))
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Activity_Inactive).Click();
                }
            }

            // Edit description
            if (!string.IsNullOrEmpty(description))
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_Description).Clear();
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_Description).SendKeys(description);
            }

            // Make assignments/attendance confidential or not
            this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_IsConfidential), isConfidential);

            // Edit activity type
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.EditActivity_Type)).SelectByText(activityType);

        }

        /// <summary>
        /// Adds or edits the check-in settings for an activity
        /// </summary>
        /// <param name="enableCheckin">Do you want to enable Check-in?</param>
        /// <param name="printNameTag">Do you want to print name tags?</param>
        /// <param name="printParentReceipt">Do you want to print parent receipt?</param>
        /// <param name="allowClosedRoom">Do you want to override closed rooms?</param>
        /// <param name="requireAssignment">Do you want to require an assignment?</param>
        /// <param name="prevent">Do you want to prevent check-in without an assignment?</param>
        public void Ministry_Activities_AddEditSettings_EnableCheckin(bool enableCheckin, bool printNameTag, bool printParentReceipt, bool allowClosedRoom, bool requireAssignment, bool prevent)
        {
            // Enable check-in
            if (enableCheckin)
            {
                // Check the enable check-in box if not already checked
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnableCheckin), enableCheckin);

                // Set the options for printing tags
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintNameTag), printNameTag);
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintParentReceipt), printParentReceipt);

                // Set the option for assignment override
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_AssignmentOverride), allowClosedRoom);

                // Set options for requiring assignment
                if (requireAssignment)
                {
                    this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_RequireAssignment), requireAssignment);

                    // Set the option to Prevent or Alert
                    if (prevent)
                    {
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_RequirePrevent).Click();
                    }
                    else
                    {
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_RequireAlert).Click();
                    }
                }
                else
                {
                    // Set option if NOT requiring assignment
                    this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_RequireAssignment), requireAssignment);
                }
            }
            else
            {
                // Set option if NOT using check-in
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnableCheckin), enableCheckin);
            }

        }

        /// <summary>
        /// Adds or edits the age restrictions for an activity
        /// </summary>
        /// <param name="ageRestrictions"></param>
        /// <param name="startAge"></param>
        /// <param name="endAge"></param>
        public void Ministry_Activities_AddEditSettings_EnableAgeRestrictions(bool ageRestrictions, string startAge, string endAge)
        {
            if (ageRestrictions)
            {
                // If you want age restrictions click the option to enable it
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnableAgeRestrictions), ageRestrictions);

                // Set the age range
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Activity_AgeRangeFrom)).SelectByText(startAge);
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Activity_AgeRangeTo)).SelectByText(endAge);
            }
            else
            {
                // Click to disable the age restriction
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnableAgeRestrictions), ageRestrictions);
            }

        }

        /// <summary>
        /// Adds or edits the enforce assignment creation rules for an activity
        /// </summary>
        /// <param name="enforceAssignmentCreation">Do you want to enforce assignment creation rules?</param>
        /// <param name="enforceParticipants">Do you want to enforce assignment rules for Participants?</param>
        /// <param name="participantAssignmentType">What is the availability of the assignment?</param>
        /// <param name="enforceVolStaff">Do you want to enforce assignment rules for Vol/Staff?</param>
        /// <param name="volStaffAssignmentType">What is the availability of the assignment?</param>
        /// <param name="autoCreateAssignment">Do you want to create participant assignments automatically?</param>
        /// <param name="autoCreateBasedOn">What do you want the participant assignment to be based on?</param>
        public void Ministry_Activities_AddEditSettings_EnforceAssignmentCreationRules(bool enforceAssignmentCreation, bool enforceParticipants,
            GeneralEnumerations.ActivityEnforceAssignmentCreationType participantAssignmentType, bool enforceVolStaff, GeneralEnumerations.ActivityEnforceAssignmentCreationType volStaffAssignmentType,
            bool autoCreateAssignment, GeneralEnumerations.ActivityEnforceAssignmentAutoCreate autoCreateBasedOn)
        {
            //if (enforceAssignmentCreation)
            //{
            //    // Enable the enforce assignment creation rules
            //    this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnforceAssignmentCreation), enforceAssignmentCreation);

            // If you want to set assignments for participants
            if (enforceParticipants)
            {
                //this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipants), enforceParticipants);

                // Set the option for the type of assignment given to the participant
                switch (participantAssignmentType)
                {
                    case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Schedule:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipantSchedule).Click();
                        break;
                    case GeneralEnumerations.ActivityEnforceAssignmentCreationType.DateTime:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipantDateTime).Click();
                        break;
                    case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Always:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipantAlways).Click();
                        break;
                    default:
                        throw new SeleniumException("Unknown assignment type specified");
                }
            }
            else
            {
                // Disable assignment creation for participants
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnforceAssignmentParticipants), enforceParticipants);
            }

            // If you want to set assignments for volunteer/staff
            if (enforceVolStaff)
            {
                //this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaff), enforceVolStaff);

                // Set the option for the type of assignment given to the volunteer/staff
                switch (volStaffAssignmentType)
                {
                    case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Schedule:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaffSchedule).Click();
                        break;
                    case GeneralEnumerations.ActivityEnforceAssignmentCreationType.DateTime:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaffDateTime).Click();
                        break;
                    case GeneralEnumerations.ActivityEnforceAssignmentCreationType.Always:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaffAlways).Click();
                        break;
                    default:
                        throw new SeleniumException("Unknown assignment type specified");
                }
            }
            else
            {
                // Disable assignment creation for volunteer/staff
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnforceAssignmentVolStaff), enforceVolStaff);
            }

            //else
            //{
            //    // Disable the enforce assignment creation rules
            //    this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_EnforceAssignmentCreation), enforceAssignmentCreation);
            //}

            // If you want to auto create participant assignments
            if (autoCreateAssignment)
            {
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_AutoCreateAssignment), autoCreateAssignment);

                // Set the option to set the assignment based on attendance
                switch (autoCreateBasedOn)
                {
                    case GeneralEnumerations.ActivityEnforceAssignmentAutoCreate.FirstAttendance:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_AutoCreateFirstAttendance).Click();
                        break;
                    case GeneralEnumerations.ActivityEnforceAssignmentAutoCreate.LastAttendance:
                        this._driver.FindElementById(GeneralMinistry.Activities.Activity_AutoCreateLastAttendance).Click();
                        break;
                    default:
                        throw new SeleniumException("Unknown assignment type specified");
                }
            }
            else
            {
                // Disable the auto creation of participant assignments
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_AutoCreateAssignment), autoCreateAssignment);
            }
        }

        /// <summary>
        /// Adds or edits the WebLink settings for an activity
        /// </summary>
        /// <param name="useAsWebLinkGroups">Do you want to enable WebLink Groups for this activity?</param>
        /// <param name="webLinkContactItem">Select the WebLink contact item</param>
        public void Ministry_Activities_AddEditSettings_UseAsWebLinkGroups(bool useAsWebLinkGroups, string webLinkContactItem)
        {
            if (useAsWebLinkGroups)
            {
                // Enable use as WebLink Groups
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_UseAsWebLinkGroups), useAsWebLinkGroups);

                // Set the WebLink contact item
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Activity_WebLinkContactItem)).SelectByText(webLinkContactItem);
            }
            else
            {
                // Disable user as WebLink Groups
                this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_UseAsWebLinkGroups), useAsWebLinkGroups);
            }
        }
        #endregion Activity Settings

        #region Activities Filter

        /// <summary>
        /// Input Activity Name Filter and apply
        /// </summary>
        /// <param name="activityName">Activity Name</param>
        /// <param name="apply">Click apply button</param>
        public void Ministry_Activities_Filter_Activity_Name(String activityName, Boolean apply = true)
        {

            this._driver.FindElementById(GeneralMinistry.Activities.Activity_Name).SendKeys(activityName);
            this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            this._generalMethods.WaitForElement(this._driver, By.Id(GeneralMinistry.Activities.Activity_Name), 30);

            if (apply)
            {
                //Apply
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            }
        }

        /// <summary>
        /// Input Ministry and apply
        /// </summary>
        /// <param name="ministries">Ministries to filter through</param>
        /// <param name="apply">Click apply button</param>
        public void Ministry_Activities_Filter_Ministry(List<string> ministries, Boolean apply = true)
        {
            if (ministries != null)
            {
                foreach (string ministry in ministries)
                {
                    new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry_DropDown)).SelectByText(ministry);
                    this._generalMethods.WaitForElement(this._driver, By.Id(GeneralMinistry.Activities.Ministry_DropDown));
                    //Assert.IsTrue(this._driver.FindElementByXPath(GeneralMinistry.Activities.Delete_Button).Displayed, "Delete button is not displayed");
                }
            }
            else
            {
                throw new Exception("Ministryies list is null");

            }

            if (apply)
            {
                //Apply
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            }

        }

        /// <summary>
        /// Input Activity Type and apply
        /// </summary>
        /// <param name="activityTypes">Activity Types to filter through</param>
        /// <param name="apply">Click apply button</param>
        public void Ministry_Activities_Filter_Activity_Type(List<string> activityTypes, Boolean apply = true)
        {

            //If not toggled then select else it's already there for selecting
            if (this._driver.FindElementByXPath(GeneralMinistry.Activities.Activity_Type_Filter).GetAttribute("class").Equals(GeneralMinistry.Activities.UI_Collapsed))
            {
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Activity_Type_Filter).Click();
            }

            if (activityTypes != null)
            {
                foreach (string activityType in activityTypes)
                {
                    new SelectElement(this._driver.FindElementByXPath(GeneralMinistry.Activities.Activity_Type_DropDown)).SelectByText(activityType);
                    this._generalMethods.WaitForElement(this._driver, By.XPath(GeneralMinistry.Activities.Activity_Type_DropDown));
                    //Assert.IsTrue(this._driver.FindElementByXPath(GeneralMinistry.Activities.Delete_Button).Displayed, "Delete button is not displayed");
                }
            }
            else
            {
                throw new Exception("Ministryies list is null");

            }

            if (apply)
            {
                //Apply
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            }

        }

        /// <summary>
        /// Input Occurrence and apply
        /// </summary>
        /// <param name="daysOfWeek">Day of Week</param>
        /// <param name="dateRanges">Date Ranges</param>
        /// <param name="dateFrom">Date From</param>
        /// <param name="dateTo">Date to</param>
        /// <param name="apply">Click apply button</param>
        //public void Ministry_Activities_Filter_Occurence(GeneralEnumerations.WeeklyScheduleDays[] daysOfWeek = null, string dateRange = null, string dateFrom = "", string dateTo = "", Boolean apply = true)
        //{

        //    //If not toggled then select else it's already there for selecting
        //    if (this._driver.FindElementByXPath(GeneralMinistry.Activities.Occurence).GetAttribute("class").Equals(GeneralMinistry.Activities.UI_Collapsed))
        //    {
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Occurence).Click();
        //    }

        //    //Day of Week
        //    if (daysOfWeek != null)
        //    {
        //        foreach (GeneralEnumerations.WeeklyScheduleDays weekday in daysOfWeek)
        //        {
        //            switch (weekday)
        //            {
        //                case GeneralEnumerations.WeeklyScheduleDays.Sunday:
        //                    this._driver.FindElementById(GeneralMinistry.Activities.Sun_CheckBox).Click();
        //                    break;
        //                case GeneralEnumerations.WeeklyScheduleDays.Monday:
        //                    this._driver.FindElementById(GeneralMinistry.Activities.Mon_CheckBox).Click();
        //                    break;
        //                case GeneralEnumerations.WeeklyScheduleDays.Tuesday:
        //                    this._driver.FindElementById(GeneralMinistry.Activities.Tue_CheckBox).Click();
        //                    break;
        //                case GeneralEnumerations.WeeklyScheduleDays.Wednesday:
        //                    this._driver.FindElementById(GeneralMinistry.Activities.Wed_CheckBox).Click();
        //                    break;
        //                case GeneralEnumerations.WeeklyScheduleDays.Thursday:
        //                    this._driver.FindElementById(GeneralMinistry.Activities.Thu_CheckBox).Click();
        //                    break;
        //                case GeneralEnumerations.WeeklyScheduleDays.Friday:
        //                    this._driver.FindElementById(GeneralMinistry.Activities.Fri_CheckBox).Click();
        //                    break;
        //                case GeneralEnumerations.WeeklyScheduleDays.Saturday:
        //                    this._driver.FindElementById(GeneralMinistry.Activities.Sat_CheckBox).Click();
        //                    break;
        //                case GeneralEnumerations.WeeklyScheduleDays.Any:
        //                    throw new Exception("Weekly Any is not an option");
        //            }

        //        }
        //    }

        //    //Date Range
        //    //if (dateRange != null)
        //    //{
        //    //    new SelectElement(this._driver.FindElementByXPath(GeneralMinistry.Activities.DateRange_DropDown)).SelectByText(dateRange);
        //    //}

        //    if (dateFrom != "")
        //    {
        //        this._driver.FindElementById(GeneralMinistry.Activities.DateFrom).SendKeys(dateFrom);
        //    }


        //    if (dateTo != "")
        //    {
        //        this._driver.FindElementById(GeneralMinistry.Activities.DateTo).SendKeys(dateTo);
        //    }

        //    //Date Range Drop down will change to custome date range option
        //    //if((dateFrom != "") & (dateTo != "")){
        //    //    this._driver.FindElementById(GeneralMinistry.Activities.DateTo).SendKeys(Keys.Tab);
        //    //    Assert.AreEqual("Custom date range", new SelectElement(this._driver.FindElementByXPath(GeneralMinistry.Activities.DateRange_DropDown)).SelectedOption.Text, "Date Range DropDown was did not automatically change to [Custom date range] option");
        //    //}

        //    if (apply)
        //    {
        //        //Apply
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
        //    }

        //}

        /// <summary>
        /// Input Age Range
        /// </summary>
        /// <param name="min">Min Age</param>
        /// <param name="max">Max Age</param>
        /// <param name="apply">Click apply button</param>
        //public void Ministry_Activities_Filter_Age_Range(string min = "", string max = "", Boolean apply = true)
        //{
        //    //If not toggled then select else it's already there for selecting
        //    if (this._driver.FindElementByXPath(GeneralMinistry.Activities.Age_Range).GetAttribute("class").Equals(GeneralMinistry.Activities.UI_Collapsed))
        //    {
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Age_Range).Click();
        //    }

        //    if (min != "")
        //    {
        //        new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Age_Range_Min_DropDown)).SelectByText(min);
        //    }

        //    if (max != "")
        //    {
        //        new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Age_Range_Max_DropDown)).SelectByText(max);
        //    }

        //    if (apply)
        //    {
        //        //Apply
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
        //    }

        //}

        /// <summary>
        /// Input Location
        /// </summary>
        /// <param name="buildingNames">Buildings to filter through</param>
        /// <param name="roomNames">Rooms to filter through</param>
        /// <param name="apply">Click apply button</param>
        //public void Ministry_Activities_Filter_Location(List<string> buildingNames, List<string> roomNames = null, Boolean apply = true)
        //{
        //    //If not toggled then select else it's already there for selecting
        //    if (this._driver.FindElementByXPath(GeneralMinistry.Activities.Location).GetAttribute("class").Equals(GeneralMinistry.Activities.UI_Collapsed))
        //    {
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Location).Click();
        //    }

        //    //Select Building Name
        //    if(buildingNames != null)
        //    {
        //        foreach (string buildingName in buildingNames)
        //        {
        //            new SelectElement(this._driver.FindElementByXPath(GeneralMinistry.Activities.Buildings_DropDown)).SelectByText(buildingName);
        //            this._generalMethods.WaitForElement(this._driver, By.XPath(GeneralMinistry.Activities.Buildings_DropDown));
        //        }
        //    }

        //    //Select Rooms
        //    if(roomNames != null)
        //    {
        //        foreach (string roomName in roomNames)
        //        {
        //            new SelectElement(this._driver.FindElementByXPath(GeneralMinistry.Activities.Rooms_DropDown)).SelectByText(roomName);
        //        }
        //    }

        //    if (apply)
        //    {
        //        //Apply
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
        //    }

        //}

        /// <summary>
        /// Input Confidential and apply
        /// </summary>
        /// <param name="confidential">Confidential Check</param>
        /// <param name="normal">Normal Check</param>
        /// <param name="apply">Click apply button</param>
        //public void Ministry_Activities_Filter_Confidential(Boolean confidential = false, Boolean normal = false, Boolean apply = true)
        //{

        //    //If not toggled then select else it's already there for selecting
        //    if (this._driver.FindElementByXPath(GeneralMinistry.Activities.Confidential).GetAttribute("class").Equals(GeneralMinistry.Activities.UI_Collapsed))
        //    {
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Confidential).Click();
        //    }

        //    //Confidential
        //    if (confidential)
        //    {
        //        if (!this._driver.FindElementById(GeneralMinistry.Activities.Confidential_Checkbox).Selected)
        //            this._driver.FindElementById(GeneralMinistry.Activities.Confidential_Checkbox).Click();
        //    }
        //    else
        //    {
        //        if (this._driver.FindElementById(GeneralMinistry.Activities.Confidential_Checkbox).Selected)
        //            this._driver.FindElementById(GeneralMinistry.Activities.Confidential_Checkbox).Click();
        //    }

        //    //Normal
        //    if (normal)
        //    {
        //        if (!this._driver.FindElementById(GeneralMinistry.Activities.Normal_Checkbox).Selected)
        //            this._driver.FindElementById(GeneralMinistry.Activities.Normal_Checkbox).Click();
        //    }
        //    else
        //    {
        //        if (this._driver.FindElementById(GeneralMinistry.Activities.Normal_Checkbox).Selected)
        //            this._driver.FindElementById(GeneralMinistry.Activities.Normal_Checkbox).Click();
        //    }

        //    if (apply)
        //    {
        //        //Apply
        //        this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
        //    }
        //}

        /// <summary>
        /// Input CheckIn Enabled
        /// </summary>
        /// <param name="enabled">Enabled Check</param>
        /// <param name="notEnabled">Not Enabled Check</param>
        /// <param name="apply">Click apply button</param>
        public void Ministry_Activities_Filter_CheckIn_Enabled(Boolean enabled = false, string code = "", Boolean notEnabled = false, Boolean apply = true)
        {
            //If not toggled then select else it's already there for selecting
            if (this._driver.FindElementByXPath(GeneralMinistry.Activities.Check_In_Enabled).GetAttribute("class").Equals(GeneralMinistry.Activities.UI_Collapsed))
            {
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Check_In_Enabled).Click();
            }

            //Enabled Checkbox
            if (enabled)
            {
                if (!this._driver.FindElementById(GeneralMinistry.Activities.Check_In_Enabled_CheckBox).Selected)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.Check_In_Enabled_CheckBox).Click();
                    this._driver.FindElementById(GeneralMinistry.Activities.Check_In_Code).SendKeys(code);
                }
            }
            else
            {
                if (this._driver.FindElementById(GeneralMinistry.Activities.Check_In_Enabled_CheckBox).Selected)
                    this._driver.FindElementById(GeneralMinistry.Activities.Check_In_Enabled_CheckBox).Click();
            }

            //Not Enabled Checkbox
            if (notEnabled)
            {
                if (!this._driver.FindElementById(GeneralMinistry.Activities.Check_In_NotEnabled_CheckBox).Selected)
                    this._driver.FindElementById(GeneralMinistry.Activities.Check_In_NotEnabled_CheckBox).Click();
            }
            else
            {
                if (this._driver.FindElementById(GeneralMinistry.Activities.Check_In_NotEnabled_CheckBox).Selected)
                    this._driver.FindElementById(GeneralMinistry.Activities.Check_In_NotEnabled_CheckBox).Click();
            }

            if (apply)
            {
                //Apply
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            }
        }

        /// <summary>
        /// Input Active
        /// </summary>
        /// <param name="active">Active Check</param>
        /// <param name="inActive">InActive Check</param>
        /// <param name="apply">Click apply button</param>
        public void Ministry_Activities_Filter_Active(Boolean active = false, Boolean inActive = false, Boolean apply = true)
        {
            //If not toggled then select else it's already there for selecting
            if (this._driver.FindElementByXPath(GeneralMinistry.Activities.Active).GetAttribute("class").Equals(GeneralMinistry.Activities.UI_Collapsed))
            {
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Active).Click();
            }

            //Active Checkbox
            if (active)
            {
                if (!this._driver.FindElementById(GeneralMinistry.Activities.Active_CheckBox).Selected)
                    this._driver.FindElementById(GeneralMinistry.Activities.Active_CheckBox).Click();
            }
            else
            {
                if (this._driver.FindElementById(GeneralMinistry.Activities.Active_CheckBox).Selected)
                    this._driver.FindElementById(GeneralMinistry.Activities.Active_CheckBox).Click();
            }

            //InActive Checkbox
            if (inActive)
            {
                if (!this._driver.FindElementById(GeneralMinistry.Activities.Inactive_CheckBox).Selected)
                    this._driver.FindElementById(GeneralMinistry.Activities.Inactive_CheckBox).Click();
            }
            else
            {
                if (this._driver.FindElementById(GeneralMinistry.Activities.Inactive_CheckBox).Selected)
                    this._driver.FindElementById(GeneralMinistry.Activities.Inactive_CheckBox).Click();
            }

            if (apply)
            {
                //Apply
                this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            }
        }

        /// <summary>
        /// Verify Activity Filter Results for Occurance Day of Week
        /// </summary>
        /// <param name="daysOfWeek">Day of Week</param>
        //public void Ministry_Activities_Filter_Verify_Occurance_Day_Of_Week(GeneralEnumerations.WeeklyScheduleDays[] daysOfWeek)
        //{
        //    String nextDayOfWeek = string.Empty;
        //    IWebElement activitiesTable = this._driver.FindElementByXPath(TableIds.Ministry_Activities_ViewAll);
        //    int rows = this._generalMethods.GetTableRowCountWebDriver(TableIds.Ministry_Activities_ViewAll);

        //    for (int row = 1; row < rows; row++)
        //    {
        //        //If Occurs Empty then valid
        //        nextDayOfWeek = string.Format("{0}", activitiesTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[3].Text);

        //        TestLog.WriteLine(string.Format("Next Occur: {0}", nextDayOfWeek));

        //        if (!nextDayOfWeek.Equals(""))
        //        {

        //            foreach (GeneralEnumerations.WeeklyScheduleDays weekday in daysOfWeek)
        //            {
        //                switch (weekday)
        //                {
        //                    case GeneralEnumerations.WeeklyScheduleDays.Sunday:
        //                        Assert.AreNotEqual("Sun", nextDayOfWeek, string.Format("Row [{0}] occurence [{1}] was found.", row, nextDayOfWeek));
        //                        break;
        //                    case GeneralEnumerations.WeeklyScheduleDays.Monday:
        //                        Assert.AreNotEqual("Mon", nextDayOfWeek, string.Format("Row [{0}] occurence [{1}] was found.", row, nextDayOfWeek));
        //                        break;
        //                    case GeneralEnumerations.WeeklyScheduleDays.Tuesday:
        //                        Assert.AreNotEqual("Tue", nextDayOfWeek, string.Format("Row [{0}] occurence [{1}] was found.", row, nextDayOfWeek));
        //                        break;
        //                    case GeneralEnumerations.WeeklyScheduleDays.Wednesday:
        //                        Assert.AreNotEqual("Wed", nextDayOfWeek, string.Format("Row [{0}] occurence [{1}] was found.", row, nextDayOfWeek));
        //                        break;
        //                    case GeneralEnumerations.WeeklyScheduleDays.Thursday:
        //                        Assert.AreNotEqual("Thu", nextDayOfWeek, string.Format("Row [{0}] occurence [{1}] was found.", row, nextDayOfWeek));
        //                        break;
        //                    case GeneralEnumerations.WeeklyScheduleDays.Friday:
        //                        Assert.AreNotEqual("Fri", nextDayOfWeek, string.Format("Row [{0}] occurence [{1}] was found.", row, nextDayOfWeek));
        //                        break;
        //                    case GeneralEnumerations.WeeklyScheduleDays.Saturday:
        //                        Assert.AreNotEqual("Sat", nextDayOfWeek, string.Format("Row [{0}] occurence [{1}] was found.", row, nextDayOfWeek));
        //                        break;
        //                    case GeneralEnumerations.WeeklyScheduleDays.Any:
        //                        throw new Exception("Weekly Any is not an option");
        //                }
        //            }
        //        }
        //        else
        //        {
        //            Assert.AreEqual(nextDayOfWeek.Trim(), "", "Not Empty Next Occurence");
        //        }

        //    }
        //}

        /// <summary>
        /// Verify Activity Filter Results for Between Dates.
        /// </summary>
        /// <param name="dateFrom">Date From</param>
        /// <param name="dateTo">Date To</param>
        //public void Ministry_Activities_Filter_Verify_Occurance_Date(string dateFrom, string dateTo)
        //{
        //    string nextOccurDate = string.Empty;
        //    string minNextDate = string.Empty;
        //    string maxNextDate = string.Empty;
        //    string dateFormat = "{0:MMM dd hh:mm tt}"; //Leaving out the day of the week

        //    IWebElement activitiesTable = this._driver.FindElementByXPath(TableIds.Ministry_Activities_ViewAll);
        //    int rows = this._generalMethods.GetTableRowCountWebDriver(TableIds.Ministry_Activities_ViewAll);

        //    minNextDate = string.Format(dateFormat, dateFrom);
        //    maxNextDate = string.Format(dateFormat, dateTo);
        //    TestLog.WriteLine(string.Format("Min Compare Date: {0}", minNextDate));
        //    TestLog.WriteLine(string.Format("Max Compare Date: {0}", maxNextDate));

        //    for (int row = 1; row < rows; row++)
        //    {
        //        //If Occurs Empty then valid
        //        nextOccurDate = string.Format("{0} {1}", //activitiesTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[6].Text,
        //                                                    activitiesTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[4].Text,
        //                                                    activitiesTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[5].Text);

        //        TestLog.WriteLine(string.Format("Next Occur Date: {0}", nextOccurDate));
        //        nextOccurDate = string.Format(dateFormat, nextOccurDate);

        //        //If Day of Week is empty then we don't have any business checking date. It should be there.
        //        if (!activitiesTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[3].Text.Equals(""))
        //        {
        //            //Assert.GreaterThan(string.Format(dateFormat, nextOccur), string.Format(dateFormat, nextDate), string.Format("Row [{0}] occurence [{1}] not greater than [{2}]", row, nextOccur, nextDate));
        //            Assert.NotBetween(nextOccurDate, minNextDate, maxNextDate, string.Format("Row [{0}] occurence [{1}] between [{2}] and [{3}]", row, nextOccurDate, minNextDate, maxNextDate));
        //        }
        //        else
        //        {
        //            Assert.AreEqual(nextOccurDate.Trim(), "", "Not Empty Next Occurence");
        //        }
        //    }
        //}

        #endregion Activities Filter

        #region Requirements
        /// <summary>
        /// This Method Deletes a Requirement from the Activity Requirments tab
        /// </summary>
        /// <param name="requirementName"></param>
        public void Ministry_Activities_View_All_Requirements_Delete(string requirementName)
        {
            // Delete the batch
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Activities_ViewAll_Requirements, requirementName, "Name", null);
            this._generalMethods.SelectOptionFromGearWebDriver(itemRow - 1, "Delete");
            this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Activities.Requirement_Delete_Confirm));

            //Get the Delete Message
            //string confirmationMsg = this._driver.SwitchTo().Window(this._driver.WindowHandles[1]).PageSource;
            string confirmationMsg = this._driver.FindElementById("form_modal_window").Text;
            TestLog.WriteLine(string.Format("Confirmation Message: {0}", confirmationMsg));
            Assert.Contains(HttpUtility.HtmlEncode(confirmationMsg.Trim()), string.Format("Are you sure you want to delete the requirement {0}?", requirementName));

            //Click OK            
            this._driver.FindElementById(GeneralMinistry.Activities.Requirement_Delete_Confirm).Click();

        }

        /// <summary>
        /// Navigates to the Activities > View All - Requirements Tab
        /// </summary>
        /// <param name="ministryName"></param>
        /// <param name="activityName"></param>
        public void Ministry_Activities_View_All_Requirements(string ministryName, string activityName)
        {
            // Navigate to Activities View All page
            this.Ministry_Activities_View_All_WebDriver();

            // Search for a particular ministry
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry_DropDown)).SelectByText(ministryName);
            this._driver.FindElementById(GeneralMinistry.Activities.Inactive_CheckBox).Click();
            this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));

            // Click on an activity name
            this._driver.FindElementByLinkText(activityName).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Requirements"));

            //Click on Requirements tab 
            this._driver.FindElementByLinkText("Requirements").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id(GeneralMinistry.Activities.Requirements_Schedule_DropDown));
        }

        /// <summary>
        /// Creates a Requirement from the Requirements Tab. 
        /// </summary>
        /// <param name="requirementName"></param>
        public void Ministry_Activities_View_All_Requirements_Add(string requirementName)
        {
            //Click Add
            this._driver.FindElementByLinkText(GeneralMinistry.Activities.Add_Requirement).Click();
            this._generalMethods.WaitForElement(this._driver, By.Id(GeneralMinistry.Activities.Requirement_Name_Input));

            //Enter Requirement Name
            this._driver.FindElementById(GeneralMinistry.Activities.Requirement_Name_Input).SendKeys(requirementName);

            //Click Save 
            this._driver.FindElementByXPath(GeneralMinistry.Activities.Requirement_Save_Button).Click();
            this._generalMethods.WaitForElement(this._driver, By.Id(GeneralMinistry.Activities.Requirements_Schedule_DropDown));

        }

        #endregion Requirements

        #endregion Activities

        #region Assignments

        #region ViewAll

        //This naviages to the Assignment View All screen
        public void Ministry_Assignments_View_All_WebDriver()
        {
            // Navigate to View All
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Assignments.View_All);

            // Verify page loaded
            this._generalMethods.VerifyTextPresentWebDriver("Assignments");

        }

        #endregion ViewAll

        #region Search
        /// <summary>
        /// Searches for an individual to create an assignment
        /// </summary>
        /// <param name="individualName">The individual's name</param>
        public void Ministry_Assignments_Search(string individualName)
        {
            // Search for an individual
            this._driver.FindElementById("search_name").SendKeys(individualName);
            this._driver.FindElementById("btn_search").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add"), 60);

        }

        /// <summary>
        /// Searches for an individual using Advanced Search to create an assignment.
        /// </summary>
        /// <param name="individualName">The individual's name</param>
        /// <param name="address">The individual's address</param>
        /// <param name="communication">The phone, email, or web address for the individual</param>
        /// <param name="attribute">The attribute of the individual</param>
        /// <param name="memberEnvNumber">The member/envelope number for the individual</param> 
        public void Ministry_Assignments_AdvancedSearch(string individualName, string address, string communication, string attribute, string memberEnvNumber)
        {

            // Navigate to the Assignment Search screen
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Assignments.Add_Assignment);
            //this._selenium.Navigate(string.Format("https://portal.{0}.fellowshipone.com/bridge/activities/assignments/search", _f1Environment));

            // Search by individual's name
            // this._driver.FindElementById("search_name").SendKeys(individualName);

            // Click Advanced Search link
            this._driver.FindElementByLinkText("Advanced Search").Click();

            // Search by Address
            this._driver.FindElementById("search_address").SendKeys(address);

            // Search by communication
            this._driver.FindElementById("search_communication").SendKeys(communication);

            // Search by Attribute
            new SelectElement(this._driver.FindElementById("search_attributes")).SelectByText(attribute);

            // Search by Member/Envelope number
            this._driver.FindElementById("search_identifier").SendKeys(memberEnvNumber);

            // Click the search button
            this._driver.FindElementById("btn_search").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add"), 20);

            // Verify individual name
            this._generalMethods.VerifyTextPresentWebDriver(individualName);

            //Click Return link
            //this._driver.FindElementByLinkText("RETURN").Click();
            //this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out"), 20);


        }
        #endregion Search

        #region Participant
        /// <summary>
        /// Creates a Participant Assignment for an individual using the new add assignment page
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="ministry">Select a ministry</param>
        /// <param name="activity">Select an activity</param>
        /// <param name="roster">Select a roster</param>
        /// <param name="breakoutRoster">Select a breakout roster</param>
        /// <param name="activitySchedule">Select an activity schedule/time</param>
        /// <param name="afterSaveAction">Select an action for after saving</param>
        /// <param name="startOver">Start over - true/false</param>
        public void Ministry_ParticipantAssignment_Individual_Create(string individualName, string ministry, string activity, string roster, string breakoutRoster, string activitySchedule, string afterSaveAction, bool startOver)
        {

            // Navigate to the Add Assignment page
            this._generalMethods.Navigate_Portal(Navigation.Ministry.Assignments.Add_Assignment);

            // Search for an individual
            this.Ministry_Assignments_Search(individualName);

            // Select individual
            this._driver.FindElementByLinkText("Add").Click();

            // Select a Ministry
            new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(ministry);
            this._generalMethods.WaitForElement(this._driver, By.Id("show_activity"), 30);

            // Select an Activity
            new SelectElement(this._driver.FindElementById("show_activity")).SelectByText(activity);

            // Select a Roster
            this._generalMethods.WaitForElement(this._driver, By.XPath("//select[@id='select_roster']/optgroup"));
            //add by Grace Zhang for bug 
            if (String.IsNullOrEmpty(roster)){
                new SelectElement(this._driver.FindElementById("select_roster")).SelectByIndex(0);
            }
            else{
                new SelectElement(this._driver.FindElementById("select_roster")).SelectByText(roster);
            }

            // Select a Breakout roster
            if (!string.IsNullOrEmpty(breakoutRoster))
            {
                this._generalMethods.WaitForElement(this._driver, By.Id("select_breakout_group"), 60);
                new SelectElement(this._driver.FindElementById("select_breakout_group")).SelectByText(breakoutRoster);
            }

            // Select Schedule/Time
            if (!string.IsNullOrEmpty(activitySchedule))
            {
                this._generalMethods.WaitForElement(this._driver, By.Id("select_schedule"), 100, "Schedule taking too long Yo!");
                new SelectElement(this._driver.FindElementById("select_schedule")).SelectByText(activitySchedule);
            }

            // if Start Over is true, don't save and go back to Search page
            if (startOver)
            {
                this._driver.FindElementByLinkText("Start over").Click();
                this._generalMethods.WaitForElement(this._driver, By.Id("search_name"));
                this._generalMethods.VerifyTextPresentWebDriver("Add New Assignment");
                this._driver.FindElementByLinkText("RETURN").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out")); ;
            }
            // if Start Over is false, continue with assignment save
            else
            {
                // Choose an action after saving
                new SelectElement(this._driver.FindElementByName("after_save_action")).SelectByText(afterSaveAction);

                // Add assignment
                this._driver.FindElementById("add_button").Click();

                // Verify correct page load based on after save action choice
                if (afterSaveAction == "View assignments list")
                {
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out"), 60);
                    this._generalMethods.VerifyTextPresentWebDriver("View All");
                }

                else if (afterSaveAction == "Create a new assignment")
                {
                    this._generalMethods.WaitForElement(this._driver, By.Id("search_name"), 60);
                    this._generalMethods.VerifyTextPresentWebDriver("Add New Assignment");
                    this._driver.FindElementByLinkText("RETURN").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out"), 60);
                }

                else if (afterSaveAction == "Add another person to this assignment")
                {
                    this._generalMethods.WaitForElement(this._driver, By.Id("search_name"), 60);
                    this._generalMethods.VerifyTextPresentWebDriver("Add New Assignment");
                    this._driver.FindElementByLinkText("RETURN").Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("sign out"), 60);
                }
            }
        }

        /// <summary>
        /// submit application
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        public void People_volunteerPipeline_submitApplication(string individualName, string applicationName, string opportunityName)
        {
            GeneralMethods utility = this._generalMethods;
            if(this._driver.Title!="Fellowship One :: Submit Application")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Submit_Application);
            }

            utility.WaitAndGetElement(By.PartialLinkText("Find person")).Click();

            string currentWindow = this._driver.CurrentWindowHandle;
            this._driver.SwitchTo().Window(this._driver.WindowHandles.Last());
            //select a people
            utility.WaitAndGetElement(By.Id("ctl00_content_txtName_textBox")).SendKeys(individualName);
            utility.WaitAndGetElement(By.Id("ctl00_content_btnSearchPeople")).Click();
            utility.WaitAndGetElement(By.PartialLinkText("Select")).Click();
            this._driver.SwitchTo().Window(currentWindow);

            //select an application
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddlApplicationList"))).SelectByText(applicationName);

            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnOpenApplication")).Click();

            this._driver.SwitchTo().Window(this._driver.WindowHandles.Last());
            utility.WaitAndGetElement(By.XPath(string.Format("//label[contains(text(),'{0}')]/preceding-sibling::input", opportunityName))).Click();
            utility.WaitAndGetElement(By.Id("btnGo")).Click();
            this._driver.SwitchTo().Window(currentWindow);

            //hard coded "gender" and "maritalStatus", it will lead to some data issue if you really care about it
            this._driver.SwitchTo().Window(this._driver.WindowHandles.Last());
            utility.WaitAndGetElement(By.Id("btnUpdate")).Click();
            this._driver.Close();

            this._driver.SwitchTo().Window(currentWindow);
        }

        /// <summary>
        /// review application
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="applicationName">The name of the application.</param>
        public void People_volunteerPipeline_reviewApplication(string individualName, string applicationName, string opportunityName)
        {
            GeneralMethods utility = this._generalMethods;

            if (this._driver.Title != "Fellowship One :: Review Applications")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Review_Applications);
            }
            
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_ddVolunteerApplicationId"))).SelectByText(applicationName);
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_ddOpportunityId"))).SelectByText(opportunityName);
            //utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_dgTest_ctl02_btnSubmit")).Click();
            utility.WaitAndGetElement(By.XPath(string.Format("//a[text()='{0}']/parent::td/following-sibling::td/input[@type='submit']" , individualName))).Click();
        }

        /// <summary>
        /// add notes on review application page
        /// </summary>
        /// <param name="applicationName">The name of the application.</param>
        public void People_volunteerPipeline_reviewApplication_addNotes(string individualName, string applicationName, string opportunityName)
        {
            GeneralMethods utility = this._generalMethods;

            if (this._driver.Title != "Fellowship One :: Review Applications")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Review_Applications);
            }

            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_ddVolunteerApplicationId"))).SelectByText(applicationName);
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_ddOpportunityId"))).SelectByText(opportunityName);
            //utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_dgTest_ctl02_btnSubmit")).Click();
            utility.WaitAndGetElement(By.XPath(string.Format("//a[text()='{0}']/parent::td/preceding-sibling::td/a", individualName))).Click();

            string currentWindow = this._driver.CurrentWindowHandle;
            this._driver.SwitchTo().Window(this._driver.WindowHandles.Last());

            utility.WaitAndGetElement(By.Id("volunteer_note")).SendKeys("123456789 123456789 123456789 123456789 123456789");
            utility.WaitAndGetElement(By.Id("ctl00_content_btnSave")).Click();

            this._driver.Close();
            this._driver.SwitchTo().Window(currentWindow);
        }

        /// <summary>
        ///  verify requirements
        /// </summary>
        /// <param name="applicationName">The name of the application.</param>
        public void People_volunteerPipeline_verifyRequirements(string individualName, string applicationName, string opportunityName)
        {
            GeneralMethods utility = this._generalMethods;

            if (this._driver.Title != "Fellowship One :: Verify Requirements")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Verify_Requirements);
            }

            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_WorkVolunteerListCtrl1_ddVolunteerApplicationId"))).SelectByText(applicationName);
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_WorkVolunteerListCtrl1_ddOpportunityId"))).SelectByText(opportunityName);
            //utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_dgTest_ctl02_btnSubmit")).Click();
            utility.WaitAndGetElement(By.XPath(string.Format("//a[text()='{0}']/parent::td/following-sibling::td/input[@type='submit']", individualName))).Click();
        }

        /// <summary>
        /// add notes on verify requirements page
        /// </summary>
        /// <param name="applicationName">The name of the application.</param>
        public void People_volunteerPipeline_verifyRequirements_addNotes(string individualName, string applicationName, string opportunityName)
        {
            GeneralMethods utility = this._generalMethods;

            if (this._driver.Title != "Fellowship One :: Verify Requirements")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Verify_Requirements);
            }

            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_WorkVolunteerListCtrl1_ddVolunteerApplicationId"))).SelectByText(applicationName);
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_WorkVolunteerListCtrl1_ddOpportunityId"))).SelectByText(opportunityName);
            //utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_NarrowTheFieldCtrl1_dgTest_ctl02_btnSubmit")).Click();
            utility.WaitAndGetElement(By.XPath(string.Format("//a[text()='{0}']/parent::td/preceding-sibling::td/a", individualName))).Click();

            string currentWindow = this._driver.CurrentWindowHandle;
            this._driver.SwitchTo().Window(this._driver.WindowHandles.Last());

            utility.WaitAndGetElement(By.Id("volunteer_note")).SendKeys("123456789 123456789 123456789 123456789 123456789");
            utility.WaitAndGetElement(By.Id("ctl00_content_btnSave")).Click();

            this._driver.Close();
            this._driver.SwitchTo().Window(currentWindow);
        }

        /// <summary>
        /// add notes on ministry review page
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param>
        /// <param name="applicationName">The name of the application.</param>
        /// <param name="opportunityName">The name of the opportunity.</param>
        public void People_volunteerPipeline_ministryReview_addNotes(string individualName, string ministryName, string applicationName, string opportunityName)
        {
            GeneralMethods utility = this._generalMethods;

            if (this._driver.Title != "Fellowship One :: Ministry Review")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Ministry_Review);
            }

            utility.WaitAndGetElement(By.Id("active_ministry_toggle")).Click();
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection"))).SelectByText(ministryName);

            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddVolunteerApplicationId"))).SelectByText(applicationName);
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddOpportunityId"))).SelectByText(opportunityName);
            //utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_dgVolunteerOpportunityInstance_ctl02_btnSubmit")).Click();
            utility.WaitAndGetElement(By.XPath(string.Format("//a[text()='{0}']/parent::td/preceding-sibling::td/a", individualName))).Click();

            string currentWindow = this._driver.CurrentWindowHandle;
            this._driver.SwitchTo().Window(this._driver.WindowHandles.Last());

            utility.WaitAndGetElement(By.Id("volunteer_note")).SendKeys("123456789 123456789 123456789 123456789 123456789");
            utility.WaitAndGetElement(By.Id("ctl00_content_btnSave")).Click();

            this._driver.Close();
            this._driver.SwitchTo().Window(currentWindow);
        }

        /// <summary>
        /// ministry review
        /// </summary>
        /// <param name="ministryName">The name of the ministry.</param>
        /// <param name="applicationName">The name of the application.</param>
        /// <param name="opportunityName">The name of the opportunity.</param>
        public void People_volunteerPipeline_ministryReview(string individualName, string ministryName, string applicationName, string opportunityName)
        {
            GeneralMethods utility = this._generalMethods;

            if (this._driver.Title != "Fellowship One :: Ministry Review")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Ministry_Review);
            }
            
            utility.WaitAndGetElement(By.Id("active_ministry_toggle")).Click();
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_ddlMinistryTemplateSelection"))).SelectByText(ministryName);

            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddVolunteerApplicationId"))).SelectByText(applicationName);
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddOpportunityId"))).SelectByText(opportunityName);
            //utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_dgVolunteerOpportunityInstance_ctl02_btnSubmit")).Click();
            utility.WaitAndGetElement(By.XPath(string.Format("//a[text()='{0}']/parent::td/following-sibling::td/input[@type='submit']", individualName))).Click();
        }

        /// <summary>
        /// background check
        /// </summary>
        /// <param name="applicationName">The name of the application.</param>
        /// <param name="opportunityName">The name of the opportunity.</param>
        public void People_volunteerPipeline_backgroundCheck_add(string individualName, string applicationName, string opportunityName, string ssn, string requirementType)
        {
            GeneralMethods utility = this._generalMethods;

            if (this._driver.Title != "Fellowship One :: Background Checks")
            {
                utility.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Background_Checks);
            }

            string currentWindow = this._driver.CurrentWindowHandle;

            utility.WaitAndGetElement(By.LinkText("Add")).Click();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctlFindPerson_lnkFindPerson")).Click();

            this._driver.SwitchTo().Window(this._driver.WindowHandles.Last());

            utility.WaitAndGetElement(By.Id("ctl00_content_txtName_textBox")).SendKeys(individualName);
            utility.WaitAndGetElement(By.Id("ctl00_content_btnSearchPeople")).Click();

            utility.WaitAndGetElement(By.PartialLinkText("Select")).Click();

            this._driver.SwitchTo().Window(currentWindow);

            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtSSN_textBox")).SendKeys(ssn);
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddlRequirementType_dropDownList"))).SelectByText(requirementType);
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnSave")).Click();
        }

        /// <summary>
        /// Deletes a participant assignment
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        public void People_ParticipantAssignment_Delete(string individualName)
        {
            // Navigate to individual view
            this._driver.FindElementById("header_search").SendKeys(individualName);
            this._driver.FindElementById("header_button").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add a household"), 20);
            this._driver.FindElementByClassName("gear_trigger").Click();
            this._driver.FindElementByLinkText("View individual").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View the household"), 20);

            // Click on Assignments link
            this._driver.FindElementByLinkText("Assignments").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add an assignment"), 20);

            // View the assignment
            this._driver.FindElementByLinkText("View").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Find person"), 20);

            // Delete the assignment
            this._driver.FindElementByClassName("delete").Click();

        }
        //add by Grace Zhang:for FO-4091
        public void People_ParticipantAssignment_DeleteForce(string individualName)
        {
            // Navigate to individual view
            this._driver.FindElementById("header_search").SendKeys(individualName);
            this._driver.FindElementById("header_button").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add a household"), 20);
            this._driver.FindElementByClassName("gear_trigger").Click();
            this._driver.FindElementByLinkText("View individual").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View the household"), 20);

            // Click on Assignments link
            this._driver.FindElementByLinkText("Assignments").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add an assignment"), 20);

            // View the assignment
            this._driver.FindElementByLinkText("View").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Find person"), 20);

            ReadOnlyCollection<IWebElement> WebElementList = this._driver.FindElementById("ctl00_ctl00_MainContent_content_dgIndividualPrefs").FindElement(By.TagName("tbody")).FindElements(By.TagName("tr"));
            int dataLineCount = WebElementList.Count;
            for (int i = 1; i < dataLineCount; i++)
            {
                String rosterValue = WebElementList[i].FindElements(By.TagName("td"))[3].FindElement(By.TagName("span")).Text.ToString();
                if(rosterValue=="")
                {
                    WebElementList[i].FindElements(By.TagName("td"))[7].FindElement(By.TagName("a")).Click();
                    this._generalMethods.WaitForElement(this._driver, By.LinkText("Find person"), 20);
                    WebElementList = this._driver.FindElementById("ctl00_ctl00_MainContent_content_dgIndividualPrefs").FindElement(By.TagName("tbody")).FindElements(By.TagName("tr"));
                    dataLineCount =  WebElementList.Count;
                    i = 0;
                }
            }   

        }
        //ctl00_ctl00_MainContent_content_dgIndividualPrefs
        #endregion Participant

        #region Staff
        /// <summary>
        /// Sets a ministry as the active ministry.
        /// </summary>
        /// <param name="ministryName"></param>
        public void Ministry_StaffAssignment_Individual_Create(string individualName, string staffType, string active, string ministry, string activity, string roster, string activitySchedule, string staffSchedule, string job, string afterSaveAction, bool startOver)
        {

        }

        /// <summary>
        /// Sets a ministry as the active ministry.
        /// </summary>
        /// <param name="ministryName"></param>
        public void People_StaffAssignment_Delete(string individualName)
        {

        }
        #endregion Staff

        #region Actions

        #region Add To Group
        /// <summary>
        /// This Method creates a group from the Add to Group Modal on the assignments view all page.  
        /// </summary>
        /// <param name="ministryName"></param>
        /// <param name="activityName"></param>
        /// <param name="groupName"></param>
        /// <param name="groupType"></param>
        /// <param name="whoOption"></param>
        /// <param name="newGroup"></param>
        /// <param name="verifyGroup"></param>
        public string Ministry_Assignments_View_All_AddToGroup(string ministryName, string[] activityName, string groupName, string groupType, string addToGroupOption,
            bool newGroup, bool verifyGroup, string memberCount = null, bool selectAll = true)
        {
            string whoSelectedDefault = string.Empty;
            string memCount = string.Empty;

            //Select Ministry
            this.Ministry_Assignments_View_All_Filters_Ministry(ministryName, false);

            ////Select Activity
            this.Ministry_Assignments_View_All_Filters_Activity(activityName);

            this._generalMethods.WaitForElementEnabled(By.XPath("//tr[@class='participant-row']"));

            if (selectAll)
            {
                //Select All CheckBox            
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.Select_All_CheckBox).Click();
            }
            else
            {
                //Select first individual
                this._driver.FindElementByXPath("//tbody[@id='all_assign_wrapper']/tr/td/input").Click();
            }

            //Verify that all of them have been selected
            //TODO

            //Select action for the add to group option
            Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_DropDown).Enabled, "Add To Group DropDown was not enabled");
            this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_DropDown).Click();
            this._driver.FindElementByLinkText(addToGroupOption).Click();
            this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Add_To_Group_Modal));
            //this._generalMethods.WaitForElement(this._driver, By.Id(GeneralMinistry.Assignments.Add_To_Group_Modal_Who_DropDown));

            //Select modal options
            switch (addToGroupOption)
            {
                case GeneralMinistry.Assignments.Add_To_Parents:
                    whoSelectedDefault = "Their parents";
                    break;
                case GeneralMinistry.Assignments.Add_To_FamilyHousehold:
                    whoSelectedDefault = "Their whole family / household";
                    break;
                case GeneralMinistry.Assignments.Add_To_Children:
                    whoSelectedDefault = "Their family's children";
                    break;
                default:
                    whoSelectedDefault = "Selected individuals";
                    break;
            }
            //new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Who_DropDown)).SelectByText(whoSelectedDefault);

            Assert.AreEqual(whoSelectedDefault, new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Who_DropDown)).SelectedOption.Text.Trim(), "The proper DropDown was not Selected");

            if (newGroup)
            {
                Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_New_Radio_Button).Selected);
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Type_DropDown)).SelectByText(groupType);
                this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Name).SendKeys(groupName);
            }
            else
            {
                this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Existing_Radio_Button).Click();
                Assert.IsTrue(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Existing_Radio_Button).Selected);
                this._generalMethods.WaitForElementEnabled(By.Id(GeneralMinistry.Assignments.Add_To_Group_Modal_Type_DropDown), 30, "Group Type drop down did not load");
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Type_DropDown)).SelectByText(groupType);
                this._generalMethods.WaitForElementEnabled(By.Id(GeneralMinistry.Assignments.Add_To_Group_Modal_Group_DropDown), 30, "Group drop down did not load");
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Group_DropDown)).SelectByText(groupName);

            }

            //Click Save
            this._driver.FindElementById(GeneralMinistry.Assignments.Add_To_Group_Modal_Save).Click();
            //this._generalMethods.WaitForElementNotDisplayed(By.XPath("//div[@id='fancybox-content']/div/div/div/div/div[@class='modal_no_scroll modal_content']"));

            if (verifyGroup)
            {
                #region Verify
                //success message
                //Retry.WithPolling(50).WithTimeout(5000).WithFailureMessage("Did not detect the flyout in the specified time.")
                //    .Until(() => this._driver.FindElementById(GeneralMinistry.Assignments.Success_Message).Text.Contains(string.Format(" members have been added to {0}", groupName)));

                this._generalMethods.WaitForElementDisplayed(By.Id(GeneralMinistry.Assignments.Success_Message), 30, "Did not detect the flyout in the specified time.");

                string message = this._driver.FindElementById(GeneralMinistry.Assignments.Success_Message).FindElement(By.TagName("p")).Text;
                TestLog.WriteLine(message);
                int indxMem = message.IndexOf("member");

                //Make sure we have something to substring.
                if (indxMem > 0)
                { memCount = message.Substring(0, indxMem).Trim(); }
                else
                { throw new WebDriverException("Could not find member count"); }

                if (memCount == "1")
                {
                    Assert.AreEqual(string.Format("{0} member has been added to {1}.", memCount, groupName), message);
                }
                else
                {
                    Assert.AreEqual(string.Format("{0} members have been added to {1}.", memCount, groupName), message);
                }

                //Navigate to Group Page
                System.Threading.Thread.Sleep(5000);
                this._generalMethods.Navigate_Portal(Navigation.Groups.GroupsByGroupType.View_All);
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add a group"));

                //Verify Group was Created
                this._driver.FindElementById("name_toggle").Click();
                this._driver.FindElementById("group_name").SendKeys(groupName);
                this._driver.FindElementById("commit").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Cancel and view all"));

                IWebElement groupTable = this._driver.FindElementByXPath(TableIds.Groups_ViewAll_GroupList_SearchResults);
                int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Groups_ViewAll_GroupList_SearchResults, groupName, "Group");
                Assert.AreEqual(groupName, groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[0].Text, "Group Name Not Found");
                Assert.IsTrue(groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[0].FindElement(By.LinkText(groupName)).Displayed, "Group Name is not a link");

                //Change the group type to Temporary when it's a Temporary Group ... estupid
                if (groupType.Equals("Temporary Group"))
                {
                    groupType = "Temporary";
                }

                //Add the passed in member count from message
                if (!string.IsNullOrEmpty(memberCount))
                {
                    memCount = (Convert.ToInt32(memCount) + Convert.ToInt32(memberCount)).ToString();
                }

                Assert.AreEqual(groupType, groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[1].Text, "Group Type Not Found");
                Assert.AreEqual(memCount, groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[3].Text, "Member count does not match");

                if (groupType.Equals("Temporary") | groupType.Equals("People List"))
                {
                    Assert.AreEqual("–", groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[2].Text, "Leader count should be blank");
                    Assert.AreEqual("–", groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[4].Text, "Prospect count should be blank");
                    //
                }
                else
                {
                    Assert.AreEqual("0", groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[2].Text, "Leader count should be zero");
                    Assert.AreEqual("0", groupTable.FindElements(By.TagName("tr"))[row].FindElements(By.TagName("td"))[4].Text, "Prospect count should be zero");
                }
                #endregion Verify
            }

            return memCount;
        }
        #endregion Add To Group

        #region Delete
        /// <summary>
        /// Deletes all of the assignments for an activity from the assignments view all page
        /// </summary>
        /// <param name="ministryName">The name of the ministry</param>
        /// <param name="activityName">The name of the activity</param>
        /// <param name="hasRegistrations">[Optional] Do these assignments have registrations?</param>
        /// <param name="hasMinWrite">[Optional] Does the user have ministry "Write" permission to ministry?</param>
        public void Ministry_Assignments_ViewAll_Delete_All(string ministryName, string[] activityName, bool hasRegistrations = false, bool hasMinWrite = true)
        {
            // Navigate to the assignments view all page
            this.Ministry_Assignments_View_All_WebDriver();

            // Select the Ministry/Activity combo
            this.Ministry_Assignments_View_All_Filters_Ministry(ministryName, false);
            System.Threading.Thread.Sleep(2000);
            this.Ministry_Assignments_View_All_Filters_Activity(activityName, false);

            // Click apply
            this._generalMethods.WaitForElementEnabled(By.XPath(GeneralMinistry.Assignments.Apply_Button));
            this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
            this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
            this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));

            // Does the user have ministry "Write" permission to the selected ministry
            if (hasMinWrite)
            {
                // They do...continue on

                // Select all of the individuals to delete their assignments
                System.Threading.Thread.Sleep(5000);
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.Select_All_CheckBox).Click();
                this._generalMethods.WaitForElementEnabled(By.Id("DeleteButton"));

                // Click delete option from Actions bar
                this._driver.FindElementById("DeleteButton").Click();
                this._driver.FindElementByXPath("//ul[@id='deleteAssignments']/li/a").Click();
                this._generalMethods.WaitForElementDisplayed(By.Id("delete_assignments_modal"));
                System.Threading.Thread.Sleep(5000);

                // If there are registrations confirm you cannot delete those
                if (hasRegistrations)
                {
                    Assert.Contains(this._driver.FindElementById("cant_be_deleted").FindElements(By.TagName("p"))[0].Text, " assignment(s) that can not be deleted.");

                    if (!this._generalMethods.IsElementVisibleWebDriver(By.Id("confirm_delete")))
                    {
                        this._driver.FindElementByLinkText("Cancel").Click();
                        System.Threading.Thread.Sleep(5000);
                    }
                    else
                    {
                        // Click the understand button on confirm popup
                        this._driver.FindElementById("confirm_delete").Click();
                        System.Threading.Thread.Sleep(5000);

                        // Confirm there are still assignments listed for activity
                        IWebElement assignmentsTable = this._driver.FindElementByXPath(TableIds.Ministry_Assignments_ViewAll);
                        Assert.AreEqual("Name", assignmentsTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[1].Text, "Name Header Mismatch");
                        Assert.Contains(assignmentsTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[3].Text, "Roster (RLC) / Folder", "Rosters Header Mismatch");
                        Assert.AreEqual("Schedule / Time\r\nVol / Staff Schedule", assignmentsTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[4].Text, "Schedule/Time Header Mismatch");
                    }
                }
                else
                {
                    // Click the understand button on confirm popup
                    this._driver.FindElementById("confirm_delete").Click();
                    System.Threading.Thread.Sleep(5000);

                    // Verify assignments have been removed
                    //this._generalMethods.VerifyElementPresentWebDriver(By.XPath(GeneralMinistry.Assignments.No_Assignments_Found));
                    IWebElement assignmentGrid = this._driver.FindElementByXPath(TableIds.Ministry_Assignments_ViewAll);
                    Assert.AreEqual("No assignments found", assignmentGrid.FindElements(By.TagName("tbody"))[0].FindElements(By.TagName("tr"))[0].FindElements(By.TagName("td"))[0].Text, "Text not found");
                }
            }
            else
            {
                // Verify the option to delete is not present in the header bar
                System.Threading.Thread.Sleep(5000);
                this._generalMethods.VerifyElementNotDisplayedWebDriver(By.Id("DeleteButton"));

                // Verify the gear icon is not present on the individual assignments
                this._generalMethods.VerifyElementNotPresentWebDriver(By.XPath("//div[@class='pinch_left align_right']/div/a"));
            }

        }
        #endregion Delete

        #region Edit

        public void Ministry_Assignments_ViewAll_Edit_Participant(string individualName, string ministryName, string[] activityName, bool hasMinWrite, bool cancel = false, string newMinistryName = null, string newActivityName = null, string newRosterName = null,
            string newBreakoutRoster = null, string newActivitySchedule = null)
        {
            // Navigate to the assignments view all page
            this.Ministry_Assignments_View_All_WebDriver();

            // Select the Ministry/Activity combo
            this.Ministry_Assignments_View_All_Filters_Ministry(ministryName, false);
            System.Threading.Thread.Sleep(2000);
            this.Ministry_Assignments_View_All_Filters_Activity(activityName, false);

            // Click apply
            this._generalMethods.WaitForElementEnabled(By.XPath(GeneralMinistry.Assignments.Apply_Button));
            this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
            this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
            this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));

            // Does the user have ministry "Write" permission to the selected ministry
            if (hasMinWrite)
            {
                // They do...continue on

                // Select Edit Assignment from the gear for the individual
                System.Threading.Thread.Sleep(5000);
                decimal itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Assignments_ViewAll, individualName, "Name", null);
                this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[8]/div/a", TableIds.Ministry_Assignments_ViewAll, itemRow)).Click();
                System.Threading.Thread.Sleep(1000);
                this._driver.FindElementByLinkText("Edit assignment").Click();
                //this._generalMethods.SelectOptionFromGearWebDriver(Convert.ToInt16(itemRow), "Edit assignment");
                //System.Threading.Thread.Sleep(5000);
                //this._driver.FindElement(By.TagName("body")).SendKeys("Keys.ESCAPE");
                //this._generalMethods.WaitForElement(By.LinkText("Cancel"));

                // Make edits

                // Select Ministry
                if (!string.IsNullOrEmpty(newMinistryName))
                {
                    new SelectElement(this._driver.FindElementById("show_ministry")).SelectByText(newMinistryName);
                    System.Threading.Thread.Sleep(5000);
                }

                // Select Activity
                if (!string.IsNullOrEmpty(newActivityName))
                {
                    new SelectElement(this._driver.FindElementById("show_activity")).SelectByText(newActivityName);
                }

                // Select Roster
                if (!string.IsNullOrEmpty(newRosterName))
                {
                    this._generalMethods.WaitForElement(this._driver, By.XPath("//select[@id='select_roster']/optgroup"));
                    new SelectElement(this._driver.FindElementById("select_roster")).SelectByText(newRosterName);
                }

                // Select a Breakout roster
                if (!string.IsNullOrEmpty(newBreakoutRoster))
                {
                    this._generalMethods.WaitForElement(this._driver, By.Id("select_breakout_group"), 60);
                    new SelectElement(this._driver.FindElementById("select_breakout_group")).SelectByText(newBreakoutRoster);
                }

                // Select Schedule/Time
                if (!string.IsNullOrEmpty(newActivitySchedule))
                {
                    this._generalMethods.WaitForElement(this._driver, By.Id("select_schedule"), 100, "Schedule taking too long Yo!");
                    new SelectElement(this._driver.FindElementById("select_schedule")).SelectByText(newActivitySchedule);
                }

                // Save or Cancel
                if (cancel)
                {
                    this._driver.FindElementByLinkText("Cancel").Click();
                    this._generalMethods.WaitForElement(By.LinkText("Add assignment"));

                    // Verify changes not made
                    Assert.AreEqual("HIDE SIDEBAR", this._driver.FindElementByCssSelector("[style=''][data-hide-on-expand='yes']").Text, "Hide Sidebar not displayed");
                    this._driver.FindElementById("expand_collapse").Click();
                    Assert.AreEqual("SHOW SIDEBAR", this._driver.FindElementByCssSelector("[style='display: inline;'][data-show-on-expand='yes']").Text, "Show Sidebar not displayed");
                    Assert.AreNotEqual(newMinistryName, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/span", TableIds.Ministry_Assignments_ViewAll, itemRow + 1)).Text, "Ministry name changed");
                    Assert.AreNotEqual(newActivityName, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[3]/span", TableIds.Ministry_Assignments_ViewAll, itemRow)).Text, "Activity name changed");
                    Assert.AreNotEqual(newRosterName, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[4]/span", TableIds.Ministry_Assignments_ViewAll, itemRow)).Text, "Roster name changed");
                    Assert.AreNotEqual(newBreakoutRoster, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]", TableIds.Ministry_Assignments_ViewAll, itemRow + 1)).Text, "Breakout Group name changed");
                    Assert.AreNotEqual(newActivitySchedule, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[5]", TableIds.Ministry_Assignments_ViewAll, itemRow)).Text, "Activity Schedule name changed");
                }
                else
                {
                    this._driver.FindElementById("add_button").Click();
                    this._generalMethods.WaitForElement(By.LinkText(individualName));

                    // Verify changes were made
                    Assert.AreEqual("SHOW SIDEBAR", this._driver.FindElementByCssSelector("[data-show-on-expand='yes']").Text, "Show Sidebar not displayed");
                    //this._driver.FindElementById("expand_collapse").Click();
                    //Assert.AreEqual("SHOW SIDEBAR", this._driver.FindElementByCssSelector("[style='display: inline;'][data-show-on-expand='yes']").Text, "Show Sidebar not displayed");
                    if (!string.IsNullOrEmpty(newMinistryName))
                    {
                        Assert.AreEqual(newMinistryName, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[1]/span", TableIds.Ministry_Assignments_ViewAll, itemRow + 1)).Text, "Ministry name was not changed");
                    }
                    if (!string.IsNullOrEmpty(newActivityName))
                    {
                        Assert.AreEqual(newActivityName, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[3]/span", TableIds.Ministry_Assignments_ViewAll, itemRow)).Text, "Activity name was not changed");
                    }
                    if (!string.IsNullOrEmpty(newRosterName))
                    {
                        Assert.AreEqual(newRosterName, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[4]/span", TableIds.Ministry_Assignments_ViewAll, itemRow)).Text, "Roster name was not changed");
                    }
                    if (!string.IsNullOrEmpty(newBreakoutRoster))
                    {
                        Assert.AreEqual(newBreakoutRoster, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/span", TableIds.Ministry_Assignments_ViewAll, itemRow + 1)).Text, "Breakout Group name was not changed");
                    }
                    if (!string.IsNullOrEmpty(newActivitySchedule))
                    {
                        Assert.AreEqual(newActivitySchedule, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[5]/span", TableIds.Ministry_Assignments_ViewAll, itemRow)).Text, "Activity Schedule name was not changed");
                    }
                }

            }
            else
            {
                // Verify the gear icon is not present on the individual assignments
                this._generalMethods.VerifyElementNotPresentWebDriver(By.XPath("//div[@class='pinch_left align_right']/div/a"));
            }
        }
        #endregion Edit

        #endregion Actions

        #region Filters
        /// <summary>
        /// This method uses the ministry filters on the assignments page
        /// </summary>
        /// <param name="ministryName"></param>
        /// <param name="apply">Click apply?</param>
        public void Ministry_Assignments_View_All_Filters_Ministry(string ministryName, bool apply = true)
        {
            //Is Ministry Tab open?
            //if (this._driver.FindElementById(GeneralMinistry.Assignments.Ministry).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
            //    this._driver.FindElementById(GeneralMinistry.Assignments.Ministry).Click();

            //Select Ministry
            //for (int min = -1; min < ministryName.Length; min++)
            //{
            this._generalMethods.WaitForElement(By.Id(string.Format("{0}-1", GeneralMinistry.Assignments.Ministry_DropDown)));
            //Force the pop over to go away by clicking on Ministry Drop Down 
            this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Ministry_DropDown)).Click();
            this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Ministry_DropDown)).Click();

            new SelectElement(this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.Ministry_DropDown))).SelectByText(ministryName);
            //this._generalMethods.WaitForElementNotDisplayed(By.Id(GeneralMinistry.Assignments.Ministry_Loading_Image));
            //}
            //Click Apply button
            if (apply)
            {
                this._generalMethods.WaitForElementEnabled(By.XPath(GeneralMinistry.Assignments.Apply_Button));
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }
        }
        /// <summary>
        /// This method uses the activity filters on the assignments page
        /// </summary>
        /// <param name="activityName"></param>
        /// <param name="apply">Click apply?</param>
        public void Ministry_Assignments_View_All_Filters_Activity(string[] activityName, bool apply = true)
        {
            //Is the Activity tab open?
            //if (this._driver.FindElementById(GeneralMinistry.Assignments.Activity).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
            //    this._driver.FindElementById(GeneralMinistry.Assignments.Activity).Click();

            System.Threading.Thread.Sleep(3000);
            this._generalMethods.WaitForElementEnabled(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Activity_Dropdown, "-1")), 30, "Activity Drop Down not Enabled");


            //Select Activity
            for (int act = -1; act < (activityName.Length - 1); act++)
            {
                //this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Activity_Dropdown, act.ToString())));
                new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.Activity_Dropdown, act.ToString()))).SelectByText(activityName[act + 1]);
                this._generalMethods.WaitForElement(By.Id(string.Format("{0}-1", GeneralMinistry.Assignments.Activity_Dropdown)));
            }

            //Click Apply button
            if (apply)
            {
                this._generalMethods.WaitForElementEnabled(By.XPath(GeneralMinistry.Assignments.Apply_Button), 30, "Apply Button Not Enabled");
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }
        }
        /// <summary>
        /// This method uses the roster filters on the assignment page.
        /// </summary>
        /// <param name="folderName"></param>
        /// <param name="rosterName"></param>
        /// <param name="breakoutGroupName"></param>
        /// <param name="apply">Click apply?</param>
        public void Ministry_Assignments_View_All_Filters_Rosters(string[] folderName, string[] rosterName, string[] breakoutGroupName, bool apply = true)
        {
            //Is the Roster tab open?
            if (this._driver.FindElementByXPath(GeneralMinistry.Assignments.Rosters).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.Rosters).Click();

            if (folderName != null)
            {
                //Folder 
                for (int fol = -1; fol < (folderName.Length - 1); fol++)
                {
                    this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Roster_Folders_Dropdown, fol.ToString())));
                    new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.Roster_Folders_Dropdown, fol.ToString()))).SelectByText(folderName[fol + 1]);
                    this._generalMethods.WaitForElementNotDisplayed(By.Id(GeneralMinistry.Assignments.Roster_Folder_Loading_Image));
                }
            }
            if (rosterName != null)
            {
                //Folder 
                for (int rst = -1; rst < (rosterName.Length - 1); rst++)
                {
                    this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Roster_DropDown, rst.ToString())));
                    new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.Roster_DropDown, rst.ToString()))).SelectByText(rosterName[rst + 1]);
                    this._generalMethods.WaitForElementDisplayed(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Roster_DropDown, (rst + 1).ToString())));
                }
            }

            if (breakoutGroupName != null)
            {
                //Folder 
                for (int brk = -1; brk < (breakoutGroupName.Length - 1); brk++)
                {
                    this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Breakout_Group_DropDown, brk.ToString())));
                    new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.Breakout_Group_DropDown, brk.ToString()))).SelectByText(breakoutGroupName[brk + 1]);
                    this._generalMethods.WaitForElementDisplayed(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Breakout_Group_DropDown, (brk + 1).ToString())));
                }
            }
            //Click Apply button
            if (apply)
            {
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }
        }

        /// <summary>
        /// Method to select the Schedules filters on the Assignment listing page 
        /// </summary>
        /// <param name="activityScheduleName"></param>
        /// <param name="apply">Click Apply?</param>
        public void Ministry_Assignments_View_All_Filters_Schedules(string[] activityScheduleName, bool apply = true)
        {
            //Is the Date time tab open?
            if (this._driver.FindElementByXPath(GeneralMinistry.Assignments.Activity_Schedules).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.Activity_Schedules).Click();

            //Select Activity
            for (int act = -1; act < (activityScheduleName.Length - 1); act++)
            {
                this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Activity_Schedules_DropDown, act.ToString())));
                new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.Activity_Schedules_DropDown, act.ToString()))).SelectByText(activityScheduleName[act + 1]);
                this._generalMethods.WaitForElementNotDisplayed(By.Id(GeneralMinistry.Assignments.Activity_Schedules_Loading_Image));
            }

            //Click Apply button
            if (apply)
            {
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }
        }

        /// <summary>
        /// This Method selects the Date time filter options on the assignments listing page
        /// </summary>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="dateTimeName"></param>
        /// <param name="apply">Click Apply?</param>
        public void Ministry_Assignments_View_All_Filters_Date_Time(string startDate, string endDate, string[] dateTimeName, bool apply = true)
        {
            //Is the Date Time tab open?
            if (this._driver.FindElementByXPath(GeneralMinistry.Assignments.Date_Time).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.Date_Time).Click();
            //Start Date 
            this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Date_From));
            this._driver.FindElementById(GeneralMinistry.Assignments.Date_From).SendKeys(startDate);
            //End Date
            this._driver.FindElementById(GeneralMinistry.Assignments.Date_To).SendKeys(endDate);
            this._driver.FindElementById(string.Format("{0}-1", GeneralMinistry.Assignments.DateTime_DropDown)).Click();
            this._generalMethods.WaitForElement(By.XPath("//select[@id='activityInstance_dropdown_-1']/option[2]"));

            //Date time selection
            if (dateTimeName != null)
            {
                for (int act = -1; act < (dateTimeName.Length - 1); act++)
                {
                    this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.DateTime_DropDown, act.ToString())));
                    new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.DateTime_DropDown, act.ToString()))).SelectByText(dateTimeName[act + 1]);
                    this._generalMethods.WaitForElementDisplayed(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.DateTime_DropDown, (act + 1).ToString())));
                }
            }
            //Click Apply button
            if (apply)
            {
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }

        }

        /// <summary>
        /// Method selects the Volunteer schedule filters on the Assignments listing page. 
        /// </summary>
        /// <param name="staffScheduleName"></param>
        /// <param name="apply">Click Apply?</param>
        public void Ministry_Assignments_View_All_Filters_VolunteerSchedule(string[] staffScheduleName, bool apply = true)
        {
            //Is the Date time tab open?
            if (this._driver.FindElementByXPath(GeneralMinistry.Assignments.Staff_Schedule).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.Staff_Schedule).Click();

            //Select Activity
            for (int act = -1; act < (staffScheduleName.Length - 1); act++)
            {
                this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Staff_Schedule_DropDown, act.ToString())));
                new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.Staff_Schedule_DropDown, act.ToString()))).SelectByText(staffScheduleName[act + 1]);
                this._generalMethods.WaitForElementDisplayed(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Staff_Schedule_DropDown, (act + 1).ToString())));
            }

            //Click Apply button
            if (apply)
            {
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElementEnabled(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }
        }

        /// <summary>
        /// This Method selects the Job filter options on the Assignment listing page.
        /// </summary>
        /// <param name="jobName"></param>
        /// <param name="apply">Click Apply?</param>
        public void Ministry_Assignments_View_All_Filters_Jobs(string[] jobName, bool apply = true)
        {
            //Is the Date time tab open?
            if (this._driver.FindElementByXPath(GeneralMinistry.Assignments.Jobs).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.Jobs).Click();

            //Select Activity
            for (int act = -1; act < (jobName.Length - 1); act++)
            {
                this._generalMethods.WaitForElement(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Jobs_DropDown, act.ToString())));
                new SelectElement(this._driver.FindElementById(string.Format("{0}{1}", GeneralMinistry.Assignments.Jobs_DropDown, act.ToString()))).SelectByText(jobName[act + 1]);
                this._generalMethods.WaitForElementDisplayed(By.Id(string.Format("{0}{1}", GeneralMinistry.Assignments.Jobs_DropDown, (act + 1).ToString())));
            }

            //Click Apply button
            if (apply)
            {
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }
        }

        /// <summary>
        /// This method selects either the date range or age options for the DOB filter on the Assignments listing page.
        /// </summary>
        /// <param name="startDateOrAge"></param>
        /// <param name="endDateOrAge"></param>
        /// <param name="ageOrDate">Select either age or date range by the radio button options</param>
        /// <param name="yearsOrMonths">Use only if age is selected</param>
        /// <param name="apply">Click apply?</param>
        public void Ministry_Assignments_View_All_Filters_DOB(string startDateOrAge, string endDateOrAge, string ageOrDate, string yearsOrMonths = "Years", bool apply = true)
        {
            //Is the Date time tab open?
            if (this._driver.FindElementByXPath(GeneralMinistry.Assignments.DateOfBirth).GetAttribute("class").Equals(GeneralMinistry.Assignments.UI_Collapsed))
                this._driver.FindElementByXPath(GeneralMinistry.Assignments.DateOfBirth).Click();

            //Select modal options
            if (ageOrDate.Equals(GeneralMinistry.Assignments.DateOfBirth_Date_Radio))
            {
                this._driver.FindElementById(GeneralMinistry.Assignments.DateOfBirth_Start_Date).SendKeys(startDateOrAge);
                this._driver.FindElementById(GeneralMinistry.Assignments.DateOfBirth_End_Date).SendKeys(endDateOrAge);
            }

            else
            {
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.DateOfBirth_Age_Start));
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.DateOfBirth_Age_Start)).SelectByText(startDateOrAge);
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.DateOfBirth_Age_End)).SelectByText(endDateOrAge);
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Assignments.DateOfBirth_Age_Type)).SelectByText(yearsOrMonths);
            }

            //Click Apply button
            if (apply)
            {
                this._driver.FindElement(By.XPath(GeneralMinistry.Assignments.Apply_Button)).Click();
                this._generalMethods.WaitForElement(By.Id(GeneralMinistry.Assignments.Table_Results));
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Assignments_ViewAll));
            }

        }
        #endregion Filters

        #region Verify
        /// <summary>
        /// Verifies user is redirected to Assignments page from assignment pill button or another view assignment link
        /// </summary>
        public void Ministry_Assignments_VerifyPageLoad()
        {
            // Verify you are on the Assignments page
            IWebElement assignmentsTable = this._driver.FindElementByXPath(TableIds.Ministry_Assignments_ViewAll);
            Assert.AreEqual("Name", assignmentsTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[1].Text, "Name Header Mismatch");
            Assert.AreEqual("Activity\r\nMinistry", assignmentsTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[2].Text, "Activity Header Mismatch");
            Assert.Contains(assignmentsTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[3].Text, "Roster (RLC) / Folder", "Rosters Header Mismatch");
            Assert.AreEqual("Schedule / Time\r\nVol / Staff Schedule", assignmentsTable.FindElements(By.TagName("tr"))[0].FindElements(By.TagName("th"))[4].Text, "Schedule/Time Header Mismatch");

        }
        #endregion Verify

        #endregion Assignments


        #endregion Ministry

        #region People
        public class AddressData
        {
            private string _householdPerson;
            private string _addressType;
            private string _country;
            private string _address1;
            private string _address2;
            private string _city;
            private string _province;
            private string _state;
            private string _postalCode;
            private string _county;
            private string _comment;

            public string Household_Person { get { return _householdPerson; } set { _householdPerson = value; } }
            public string Address_type { get { return _addressType; } set { _addressType = value; } }
            public string Country { get { return _country; } set { _country = value; } }
            public string Address_1 { get { return _address1; } set { _address1 = value; } }
            public string Address_2 { get { return _address2; } set { _address2 = value; } }
            public string City { get { return _city; } set { _city = value; } }
            public string State { get { return _state; } set { _state = value; } }
            public string Province { get { return _province; } set { _province = value; } }
            public string Postal_code { get { return _postalCode; } set { _postalCode = value; } }
            public string County { get { return _county; } set { _county = value; } }
            public string Comment { get { return _comment; } set { _comment = value; } }
        }


        public string People_Duplicate_Finder_Merge(string duplicate, string submittedBy = "Matthew Sneeden")
        {

            int numOfDuplicates = 0;
            int rows = 0;

            // Navigate to people->duplicate finder
            this._generalMethods.Navigate_Portal(Navigation.People.Data_Integrity.Duplicate_Finder);
            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_txtFindPerson"));
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFindPerson").SendKeys(duplicate);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnFindPerson").Click();

            //See if we have results
            try
            {
                this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_dgIndividualResults"));
                rows = this._generalMethods.GetTableRowCountWebDriver("//table[@id='ctl00_ctl00_MainContent_content_dgIndividualResults']");
            }
            catch (Exception e)
            {
                //No results, else something is wrong
                TestLog.WriteLine("No Records Found");
                this._generalMethods.VerifyTextPresentWebDriver("No records found");
            }


            TestLog.WriteLine(string.Format("Item Rows: {0}", rows));

            if (rows > 2)
            {

                IWebElement table = this._driver.FindElementById("ctl00_ctl00_MainContent_content_dgIndividualResults");

                for (int i = 1; i < rows; i++)
                {

                    // //*[@id="ctl00_ctl00_MainContent_content_dgIndividualResults"]/tbody/tr[2]/td[1]
                    // //*[@id="ctl00_ctl00_MainContent_content_dgIndividualResults"]/tbody/tr[4]/td[1]
                    // //*[@id="ctl00_ctl00_MainContent_content_dgIndividualResults_ctl04_lnkMatch"]
                    var daText = table.FindElements(By.TagName("tr"))[i].FindElements(By.TagName("td"))[1].Text;
                    TestLog.WriteLine(string.Format("Text[{1}]: {0}", table.FindElements(By.TagName("tr"))[i].FindElements(By.TagName("td"))[1].Text, i));
                    TestLog.WriteLine(string.Format("Text[{1}]: {0}", daText, i));

                    //Is it a match
                    if (daText.ToString().Trim().Equals(duplicate))
                    {
                        //We Found a match merge it
                        table.FindElements(By.TagName("tr"))[i].FindElements(By.TagName("td"))[0].FindElements(By.TagName("a"))[0].Click();

                        try
                        {
                            this._generalMethods.WaitForElement(this._driver, By.LinkText("Skip match"), 90);
                        }
                        catch (Exception e)
                        {
                            //We don't have anything else to merge
                            this._generalMethods.VerifyTextPresentWebDriver("No potential duplicates found.");
                            TestLog.WriteLine("No potential duplicates found.");
                            break;

                        }

                        numOfDuplicates = 0;
                        string checkboxXPath = "//input[contains(@id, 'ctl00_ctl00_MainContent_content_matchChoiceContainer_matchChoice')]";
                        var allCheckboxes = this._driver.FindElements(By.XPath(checkboxXPath));

                        //Click all Check boxes
                        foreach (IWebElement checkbox in allCheckboxes)
                        {
                            checkbox.Click();
                            numOfDuplicates++;
                        }

                        //Click Submit
                        this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnMatchSelections").Click();
                        this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_btnCancel"), 90);
                        this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnMergeRecords").Click();

                        DateTime currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

                        this.People_Verify_Merge_Complete(duplicate, submittedBy, currentTime, numOfDuplicates.ToString());

                        //Wait Two Minutes
                        //System.Threading.Thread.Sleep(120000);

                        //Go Back to merge some more
                        this._generalMethods.Navigate_Portal(Navigation.People.Data_Integrity.Duplicate_Finder);
                        this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_txtFindPerson"));
                        this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFindPerson").SendKeys(duplicate);
                        this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnFindPerson").Click();

                        try
                        {
                            //Get New Row count and table object
                            this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_dgIndividualResults"));
                            rows = this._generalMethods.GetTableRowCountWebDriver("//table[@id='ctl00_ctl00_MainContent_content_dgIndividualResults']");
                            TestLog.WriteLine(string.Format("Updated Item Rows: {0}", rows));

                            //Reset table object
                            table = this._driver.FindElementById("ctl00_ctl00_MainContent_content_dgIndividualResults");
                            i = 1;
                        }
                        catch (Exception e)
                        {
                            //No results, else something is wrong
                            this._generalMethods.VerifyTextPresentWebDriver("No records found");
                            break;

                        }
                    }
                }
            }
            else
            {
                TestLog.WriteLine("No need to try to merge anything since there is only one instance of {0}", duplicate);
                if (rows == 0)
                {
                    numOfDuplicates = 0;
                }
                else
                {
                    numOfDuplicates = 1;
                }
            }

            return numOfDuplicates.ToString();

        }

        /// <summary>
        /// This method merges an individual via the user interface.
        /// </summary>
        /// <param name="master">The master individual.</param>
        /// <param name="duplicate">The duplicate individual.</param>
        /// <param name="hhCommValueBullet">OPTIONAL: Defaulted to false, enter true if testing the removal of HH Comm Values</param>
        /// <param name="hhCommValueText">OPTIONAL: Defaulted to null, enter phone value for new HH Phone</param>
        public void People_MergeIndividual(string master, string duplicate, string submittedBy = "FT Tester", string numOfDuplicates = "1", bool hhCommValueBullet = false, string hhCommValueText = null)
        {

            //If we don't have duplicates why even merge
            if (numOfDuplicates == "0")
            {
                //No need to merge individual
                TestLog.WriteLine("No need to merge individual");
            }
            else
            {

                TestLog.WriteLine("Merge individual {0} to {1}", duplicate, master);

                // Navigate to people->merge individual
                this._generalMethods.Navigate_Portal(Navigation.People.Data_Integrity.Merge_Individual);

                // Select the master record
                this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(master, "//a[@id='ctl00_ctl00_MainContent_content_ucMasterMergeIndividualInfo_ctlFindPerson_lnkFindPerson']");

                // Select the duplicate record
                this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(duplicate, "//a[@id='ctl00_ctl00_MainContent_content_ucDuplicateMergeIndividualInfo_ctlFindPerson_lnkFindPerson']");

                // Continue with the merge
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnMergeRecords").Click();

                // If "hhCommValueBullet" is True then select the bullet in the third column of the merge screen
                if (hhCommValueBullet)
                {
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_rbOverrideHomePhone").Click();
                }

                // If "hhCommValueText" is NOT null then enter phone number in text box
                if (!string.IsNullOrEmpty(hhCommValueText))
                {
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtOverrideHomePhone").SendKeys(hhCommValueText);
                }

                // Complete the merge
                DateTime currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
                this._generalMethods.WaitForElement(this._driver, By.XPath("//input[@id='ctl00_ctl00_MainContent_content_btnMergeRecords' and @value='Merge records']"), 60);
                this._driver.FindElementByXPath("//input[@id='ctl00_ctl00_MainContent_content_btnMergeRecords' and @value='Merge records']").Click();

                //is the giving waring displayed?
                if (this._driver.WindowHandles.Count > 1)
                {
                    this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);

                    //Click Yes
                    if (this._generalMethods.IsElementPresentWebDriver(By.Id("btnYes")))
                    {
                        this._driver.FindElementById("btnYes").Click();
                    }

                    this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);
                }

                // Verify the merge was completed
                this.People_Verify_Merge_Complete(master, submittedBy, currentTime, numOfDuplicates);
            }
        }

        public void People_Verify_Merge_Complete(string master, string submittedBy, DateTime currentTime, string numOfDuplicates = "1")
        {

            int refresh = 0;
            bool completed = false;

            // Verify the merge was completed
            this._generalMethods.Navigate_Portal(Navigation.People.Data_Integrity.Duplicate_Queue);

            int itemRowCompleted = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.People_DuplicateQueue, master, "Name", null);
            completed = this._driver.FindElementById(TableIds.Portal.People_DuplicateQueue).FindElements(By.TagName("tr"))[itemRowCompleted].FindElements(By.TagName("td"))[4].Text.Equals("Completed");


            do
            {
                Thread.Sleep(30000);
                this._generalMethods.Navigate_Portal(Navigation.People.Data_Integrity.Duplicate_Queue);
                itemRowCompleted = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.People_DuplicateQueue, master, "Name", null);
                completed = this._driver.FindElementById(TableIds.Portal.People_DuplicateQueue).FindElements(By.TagName("tr"))[itemRowCompleted].FindElements(By.TagName("td"))[4].Text.Equals("Completed");
                TestLog.WriteLine("{0} Merge Status: {1}", master, completed);

                refresh++;

                TestLog.WriteLine("Refresh: {0}", refresh);

            } while ((refresh <= 10) && (completed == false));

            //Retry.Repeat(60).WithFailureMessage(string.Format("Individual Merge for [{0}] was not completed", master))
            //     .DoBetween(() => this._driver.Navigate().Refresh())
            //     .Until(() => this._driver.FindElementById(TableIds.Portal.People_DuplicateQueue).FindElements(By.TagName("tr"))[itemRowCompleted].FindElements(By.TagName("td"))[4].Text.Equals("Completed"));

            itemRowCompleted = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.People_DuplicateQueue, master, "Name", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.People_DuplicateQueue);
            IWebElement row = table.FindElements(By.TagName("tr"))[itemRowCompleted];

            if (this._driver.FindElementById("brand_name").Text == "QA Enterprise Unlimited #6")
            {
                Assert.Between(row.FindElements(By.TagName("td"))[1].Text, string.Format("{0:dd/MM/yyyy HH:mm}", currentTime.AddHours(5).AddMinutes(-1)), string.Format("{0:dd/MM/yyyy HH:mm}", currentTime.AddHours(6).AddMinutes(1)));
            }
            else if (this._driver.FindElementById("brand_name").Text == "QA Enterprise Unlimited #2")
            {
                Assert.Between(row.FindElements(By.TagName("td"))[1].Text, string.Format("{0:g}", currentTime.AddHours(-2).AddMinutes(-1)), string.Format("{0:g}", currentTime.AddHours(-2).AddMinutes(1)));
            }
            else
            {
                Assert.Between(row.FindElements(By.TagName("td"))[1].Text, string.Format("{0:g}", currentTime.AddMinutes(-1)), string.Format("{0:g}", currentTime.AddMinutes(1)));
            }

            Assert.AreEqual(submittedBy, row.FindElements(By.TagName("td"))[2].Text);
            Assert.AreEqual(numOfDuplicates, row.FindElements(By.TagName("td"))[3].Text);
            Assert.AreEqual("Completed", row.FindElements(By.TagName("td"))[4].Text, "Merge Not Completed");


        }

        public void People_ContactItems_Create(string contactForm, string serviceTime, string initialNote, string interest, string note)
        {
            // Make the selection from the gear
            this._selenium.Click(GeneralLinks.Options);
            this._selenium.ClickAndWaitForPageToLoad("link=Enter a contact form");

            // Select the form
            if (!string.IsNullOrEmpty(contactForm))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlForms", contactForm);
            }
            if (!string.IsNullOrEmpty(serviceTime))
            {
                this._selenium.SelectAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_ddlServiceTimes", serviceTime);
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");

            // Fill out the form
            if (!string.IsNullOrEmpty(initialNote))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_ucContactItems_txtInitialNote", initialNote);
            }
            if (!string.IsNullOrEmpty(interest))
            {
                this._selenium.Click("//label[text()=' Test Contact Item - CF ']");
            }
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");

            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");
        }

        public void People_VerifyPeopleSearchResults(string columnHeader, string parameters)
        {
            // Find the column
            decimal itemColumn = this._selenium.GetElementIndex(string.Format("{0}/*[self::tbody or self::thead]/tr[*]/*[self::td or self::th][normalize-space(string(.))='{1}']", TableIds.People_Individuals, columnHeader));

            if (this._selenium.IsElementPresent("//ul[@class='grid_pagination']/li[1]/a[text()='1']"))
            {
                for (int pageIndex = 1; pageIndex < this._selenium.GetXpathCount("//ul[@class='grid_pagination']/li"); pageIndex++)
                {
                    this._selenium.ClickAndWaitForPageToLoad(string.Format("link={0}", pageIndex));
                    for (int row = 1; row < this._generalMethods.GetTableRowCount(TableIds.People_Individuals); row++)
                    {
                        if (this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn)) != null)
                        {
                            //string value = this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn));

                            if (columnHeader == "Name")
                            {
                                Assert.IsTrue(this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[{0}]/td[{1}]", row + 1, itemColumn + 1)).Contains("\n " + parameters));
                                //Assert.IsTrue(this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn)).Contains("\n " + parameters));
                            }
                            else if (columnHeader == "Address")
                            {
                                Assert.IsTrue(this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[{0}]/td[{1}]", row + 1, itemColumn + 1)).Contains(parameters));
                                //Assert.IsTrue(this._selenium.GetTable(string.Format("{0}.{1}.{2}", "ctl00_ctl00_MainContent_content_grdIndividuals", row, itemColumn)).Contains(parameters));
                            }
                            else if (columnHeader == "Phone")
                            {
                                Assert.IsTrue(this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[{0}]/td[{1}]", row + 1, itemColumn + 1)).Contains("homepref" + parameters));
                                //Assert.IsTrue(this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn)).Contains("homepref" + parameters));
                            }
                            else
                            {
                                Assert.AreEqual(parameters, this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn)));
                            }
                        }
                    }
                }
            }
            else
            {
                for (int row = 1; row < this._generalMethods.GetTableRowCount(TableIds.People_Individuals); row++)
                {
                    if (this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn)) != null)
                    {
                        if (columnHeader == "Name")
                        {
                            Assert.IsTrue(this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[{0}]/td[{1}]", row + 1, itemColumn + 1)).Contains("\n " + parameters));
                        }
                        else if (columnHeader == "Address")
                        {
                            Assert.IsTrue(this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[{0}]/td[{1}]", row + 1, itemColumn + 1)).Contains(parameters));
                            //Assert.IsTrue(this._selenium.GetTable(string.Format("{0}.{1}.{2}", "ctl00_ctl00_MainContent_content_grdIndividuals", row, itemColumn)).Contains(parameters));
                        }
                        else if (columnHeader == "Phone")
                        {
                            Assert.IsTrue(this._selenium.GetText(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[{0}]/td[{1}]", row + 1, itemColumn + 1)).Contains("homepref" + parameters));
                            //Assert.IsTrue(this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn)).Contains("homepref" + parameters));
                        }
                        else
                        {
                            Assert.AreEqual(parameters, this._selenium.GetTable(string.Format("{0}.{1}.{2}", TableIds.People_Individuals, row, itemColumn)));
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Adds an individual to a people list via their individual detail page.
        /// </summary>
        /// <param name="test"></param>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="peopleList">The name of the people list.</param>
        public void People_AddToPeopleList(string individualName, string peopleList)
        {
            // View an individual
            this.People_ViewIndividual(individualName);

            // Add them to a people list
            this._selenium.ClickAndWaitForCondition("link=Add to list", this._javascript.IsElementPresent("people_list"), "5000");

            // Select the people list
            this._selenium.Select("people_list", peopleList);

            // Add
            this._selenium.ClickAndWaitForPageToLoad("value=Add to list");
        }

        public void People_AddToGroup(string individualName, string groupType, string groupName)
        {
            // View an individual
            this.People_ViewIndividual(individualName);

            // Add them to a group
            this._selenium.ClickAndWaitForCondition("//img[@alt='Add to group']", this._javascript.IsElementPresent("ddlGroupTypes"), "5000");

            // Specify the group type, the group, and might as well click submit because we are creating a group up in here.
            this._selenium.Select("ddlGroupTypes", groupType);
            this._selenium.Select("ddlGroups", groupName);
            this._selenium.Click("Add to group");
        }

        /// <summary>
        /// Makes an invalid email valid for an individual and verifies the values are updated correctly in the database.
        /// </summary>
        /// <param name="individualName">The individual name.</param>
        /// <param name="emailCommunicationType">The communication type to be made valid.</param>
        /// <param name="communicationValue">The current value of the communication type.</param>
        /// <param name="churchId">The church id.  Default value is 15.</param>
        public void People_FindAPerson_Individual_EditCommuncations_Make_Email_Valid(string individualName, GeneralEnumerations.CommunicationTypes emailCommunicationType, string communicationValue, [Optional, DefaultParameterValueAttribute(15)] int churchId)
        {
            // View the individual
            this.People_ViewIndividual(individualName);

            // Edit their communication values
            this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, 'communications/edit')]");

            // Click "Why not" for the invalid communication type.  Store the communication value.
            switch (emailCommunicationType)
            {
                case GeneralEnumerations.CommunicationTypes.Home:
                    this._selenium.Click("//table[@id='' and @class='grid full'][2]/tbody/tr[4]/td[3]/small/a");
                    break;
                case GeneralEnumerations.CommunicationTypes.Personal:
                    this._selenium.Click("//table[@id='' and @class='grid full'][2]/tbody/tr[3]/td[3]/small/a");
                    break;
                case GeneralEnumerations.CommunicationTypes.InFellowship:
                    this._selenium.Click("//table[@id='' and @class='grid full'][2]/tbody/tr[2]/td[3]/small/a");
                    break;
                default:
                    throw new SeleniumException(string.Format("{0} is not a valid email communication type.", emailCommunicationType));
            }

            // Reactivate
            this._selenium.ClickAndWaitForPageToLoad("//input[@id='submitQuery' and @value='Reactivate address']");

            // Verify the email address is active and listed and the comment is null
            var communicationInformation = this._sql.People_GetCommunicationValueInformation(churchId, individualName, communicationValue).Rows[0];
            Assert.AreEqual(true, communicationInformation["Listed"], "Communication was made valid but the value was still unlisted.");
            Assert.AreEqual(DBNull.Value, communicationInformation["COMMUNICATION_COMMENT"], "Communication was made valid but the comment was not set to null.");
            Assert.AreEqual(DBNull.Value, communicationInformation["VALIDATION_STATUS_ID"], "Communication was made valid but the validation status id was not set to null.");
        }

        #region Privacy Settings
        /// <summary>
        /// Edits the Address Privacy Setting levels for an individual.
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="desiredLevel">The highest church role that can view this setting</param>
        public void People_FindAPerson_PrivacySettings_Update_AddressSettings(string individualName, GeneralEnumerations.PrivacyLevels desiredLevel)
        {
            // View the individual
            this.People_FindAPerson_PrivacySettings_View(individualName);

            // Adjust the setting for Address to specified level
            this.People_PrivacySettings_SetPrivacyLevel(GeneralEnumerations.PrivacySettingTypes.Address, desiredLevel);

            // Click Save
            this._selenium.ClickAndWaitForPageToLoad("submitPrivacy");

        }
        /// <summary>
        /// Navigates to the Privacy settings page for an individual
        /// </summary>
        /// <param name="individualName"></param>
        public void People_FindAPerson_PrivacySettings_View(string individualName)
        {
            // View the individual
            this.People_ViewIndividual(individualName);

            // Click to edit their privacy settings
            this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/privacysettings/edit')]");
        }

        /// <summary>
        /// Edits the Birthdate Privacy Settings for an individual.
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="desiredLevel">The highest church role that can view this setting</param>
        public void People_FindAPerson_PrivacySettings_Update_BirthdateSettings(string individualName, GeneralEnumerations.PrivacyLevels desiredLevel)
        {
            // View the individual
            this.People_FindAPerson_PrivacySettings_View(individualName);

            // Adjust the setting for Address to specified level
            this.People_PrivacySettings_SetPrivacyLevel(GeneralEnumerations.PrivacySettingTypes.Birthdate, desiredLevel);

            // Click Save
            this._selenium.ClickAndWaitForPageToLoad("submitPrivacy");

        }

        /// <summary>
        /// Edits the Email Privacy Settings for an individual.
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="desiredLevel">The highest church role that can view this setting</param>
        public void People_FindAPerson_PrivacySettings_Update_EmailSettings(string individualName, GeneralEnumerations.PrivacyLevels desiredLevel)
        {
            // View the individual
            this.People_FindAPerson_PrivacySettings_View(individualName);

            // Adjust the setting for Address to specified level
            this.People_PrivacySettings_SetPrivacyLevel(GeneralEnumerations.PrivacySettingTypes.Email, desiredLevel);

            // Click Save
            this._selenium.ClickAndWaitForPageToLoad("submitPrivacy");

        }

        /// <summary>
        /// Edits the Phone Privacy Settings for an individual.
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="desiredLevel">The highest church role that can view this setting</param>
        public void People_FindAPerson_PrivacySettings_Update_PhoneSettings(string individualName, GeneralEnumerations.PrivacyLevels desiredLevel)
        {
            // View the individual
            this.People_FindAPerson_PrivacySettings_View(individualName);

            // Adjust the setting for Address to specified level
            this.People_PrivacySettings_SetPrivacyLevel(GeneralEnumerations.PrivacySettingTypes.Phone, desiredLevel);

            // Click Save
            this._selenium.ClickAndWaitForPageToLoad("submitPrivacy");

        }

        /// <summary>
        /// Edits the Websites Privacy Settings for an individual.
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="desiredLevel">The highest church role that can view this setting</param>
        public void People_FindAPerson_PrivacySettings_Update_WebsitesSettings(string individualName, GeneralEnumerations.PrivacyLevels desiredLevel)
        {
            // View the individual
            this.People_FindAPerson_PrivacySettings_View(individualName);

            // Adjust the setting for Address to specified level
            this.People_PrivacySettings_SetPrivacyLevel(GeneralEnumerations.PrivacySettingTypes.Websites, desiredLevel);

            // Click Save
            this._selenium.ClickAndWaitForPageToLoad("submitPrivacy");

        }

        /// <summary>
        /// Edits the Social Networks Privacy Settings for an individual.
        /// </summary>
        /// <param name="individualName">The name of the individual.</param>
        /// <param name="desiredLevel">The highest church role that can view this setting</param>
        public void People_FindAPerson_PrivacySettings_Update_SocialNetworksSettings(string individualName, GeneralEnumerations.PrivacyLevels desiredLevel)
        {
            // View the individual
            this.People_FindAPerson_PrivacySettings_View(individualName);

            // Adjust the setting for Address to specified level
            this.People_PrivacySettings_SetPrivacyLevel(GeneralEnumerations.PrivacySettingTypes.Social, desiredLevel);

            // Click Save
            this._selenium.ClickAndWaitForPageToLoad("submitPrivacy");

        }


        /// <summary>
        /// Attemps to set the privacy setting for a value.
        /// </summary>
        /// <param name="privacySettingType">The setting you wish to set a privacy level for (Address, birthdate, etc).</param>
        /// <param name="desiredLevel">The desired privacy level.</param>
        public void People_PrivacySettings_SetPrivacyLevel(GeneralEnumerations.PrivacySettingTypes privacySettingType, GeneralEnumerations.PrivacyLevels desiredLevel)
        {

            // Privacy settings have 4 levels for the slider control. Each tick has a certain percentage set at the style attribute.
            // 0% is Church Staff, 33% is Leaders, 66% is members, 100% is everyone.  These four values will be used to calculate how to move the slider.

            // The target privacy percentage is what the new privacy setting will be set at.
            var targetPrivacyPercentage = 0;

            // The adjustment value is what will be used to move the slider.  It is calculated by subtracting the target value from the current value.
            double adjustmentValue;

            // First, set the target privacy percentage based on the highest role for the privacy setting.
            switch (desiredLevel)
            {
                case GeneralEnumerations.PrivacyLevels.ChurchStaff:
                    targetPrivacyPercentage = 0;
                    break;
                case GeneralEnumerations.PrivacyLevels.Leaders:
                    targetPrivacyPercentage = 33;
                    break;
                case GeneralEnumerations.PrivacyLevels.Members:
                    targetPrivacyPercentage = 66;
                    break;
                case GeneralEnumerations.PrivacyLevels.Everyone:
                    targetPrivacyPercentage = 100;
                    break;
                default:
                    break;
            }

            // Figure out the adjustment value
            adjustmentValue = PrivacySettings_CalculateAdjustmentValue(targetPrivacyPercentage, privacySettingType);

            // Set the slider position based on the adjustment value.  If negative is returned, we are moving backwards. Otherwise, we are moving forward.  If 0 is returned,
            // we aren't moving anywhere.
            switch (privacySettingType)
            {
                case GeneralEnumerations.PrivacySettingTypes.Address:
                    this._selenium.DragAndDrop(Navigation.People.FindAPerson.PrivacySettings.Slider_Address, string.Format("{0},0", adjustmentValue.ToString()));
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Birthdate:
                    this._selenium.DragAndDrop(Navigation.People.FindAPerson.PrivacySettings.Slider_Birthdate, string.Format("{0},0", adjustmentValue.ToString()));
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Email:
                    this._selenium.DragAndDrop(Navigation.People.FindAPerson.PrivacySettings.Slider_Email, string.Format("{0},0", adjustmentValue.ToString()));
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Phone:
                    this._selenium.DragAndDrop(Navigation.People.FindAPerson.PrivacySettings.Slider_Phone, string.Format("{0},0", adjustmentValue.ToString()));
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Websites:
                    this._selenium.DragAndDrop(Navigation.People.FindAPerson.PrivacySettings.Slider_Websites, string.Format("{0},0", adjustmentValue.ToString()));
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Social:
                    this._selenium.DragAndDrop(Navigation.People.FindAPerson.PrivacySettings.Slider_Social, string.Format("{0},0", adjustmentValue.ToString()));
                    break;
                default:
                    break;
            }
        }

        /// <summary>
        /// Calculates the adjustment value.
        /// </summary>
        /// <param name="targetPrivacyPercentage">The target privacy percentage.</param>
        /// <param name="privacySettingType">The privacy setting type that will gain the new privacy setting value.</param>
        /// <returns></returns>
        private double PrivacySettings_CalculateAdjustmentValue(double targetPrivacyPercentage, GeneralEnumerations.PrivacySettingTypes privacySettingType)
        {

            // Based on the target privacy percentage, we can calculate how much we need to adjust the slider.

            // The current percentage of the slider control based on the GetAttribute method.  This will return in the format of left: xxx%;
            string currentPrivacySettingPercentage = null;

            // Based on the the current privacy setting percentage style value, we can map this to an numerical value.
            var currentPrivacyPercentage = 0.0;

            // The adjustment value
            var adjustmentValue = 0.0;

            // The difference between the current position and the target position of the slider.
            var differenceBetweenCurrentAndTargetPercentage = 0.0;

            // A multiplier used for moving between large gaps in privacy (I.e from Church staff only to everyone).
            var multiplier = 0;

            // Based on the data getting a new privacy setting, figure out the percentage based on the style attribute.
            switch (privacySettingType)
            {
                case GeneralEnumerations.PrivacySettingTypes.Address:
                    currentPrivacySettingPercentage = this._selenium.GetAttribute(Navigation.People.FindAPerson.PrivacySettings.Slider_Address + "@style");
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Birthdate:
                    currentPrivacySettingPercentage = this._selenium.GetAttribute(Navigation.People.FindAPerson.PrivacySettings.Slider_Birthdate + "@style");
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Email:
                    currentPrivacySettingPercentage = this._selenium.GetAttribute(Navigation.People.FindAPerson.PrivacySettings.Slider_Email + "@style");
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Phone:
                    currentPrivacySettingPercentage = this._selenium.GetAttribute(Navigation.People.FindAPerson.PrivacySettings.Slider_Phone + "@style");
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Websites:
                    currentPrivacySettingPercentage = this._selenium.GetAttribute(Navigation.People.FindAPerson.PrivacySettings.Slider_Websites + "@style");
                    break;
                case GeneralEnumerations.PrivacySettingTypes.Social:
                    currentPrivacySettingPercentage = this._selenium.GetAttribute(Navigation.People.FindAPerson.PrivacySettings.Slider_Social + "@style");
                    break;
                default:
                    currentPrivacySettingPercentage = "left: 0%;";
                    break;
            }


            // Map this percentage to a numerical value.
            switch (currentPrivacySettingPercentage)
            {
                case "left: 0%;":
                    currentPrivacyPercentage = 0;
                    break;
                case "left: 33.3333%;":
                    currentPrivacyPercentage = 33;
                    break;
                case "left: 66.6667%;":
                    currentPrivacyPercentage = 66;
                    break;
                case "left: 100%;":
                    currentPrivacyPercentage = 100;
                    break;
                default:
                    break;
            }

            // Calculate the difference between current privacy value and the target privacy value.  We use absolute values to ignore negatives.
            differenceBetweenCurrentAndTargetPercentage = Math.Abs((currentPrivacyPercentage - targetPrivacyPercentage));

            // We also need to add an arbitrary amount of pixels to help adjust the silder.  Since we are multiplying the target privacy percentage, this pixel value might have to adjust. 
            // The distance between each tick is about 196 pixels.
            int arbitraryAmountOfPixels = 200;

            // Figure out the mulitplier.  Note, the values assigned are arbitrary and offer the most accurate results of moving the slider.
            // If it is 33% , that is only moving one position left or right, set the mulitplier to 1.
            if (differenceBetweenCurrentAndTargetPercentage == 33 || differenceBetweenCurrentAndTargetPercentage == 34)
            {
                multiplier = 1;
                // The amount of pixels we will be traveling will be 33 * 1 + 200 pixels, which equates to 233. That is enough to move the slider one tick.
            }
            // If it is 66% , that is only moving two positions left or right, set the mulitplier to 2.
            else if (differenceBetweenCurrentAndTargetPercentage == 66 || differenceBetweenCurrentAndTargetPercentage == 67)
            {
                multiplier = 2;
                arbitraryAmountOfPixels = 260; // When moving two places over, the amount of pixels is about 390 pixels. 2 * 66 + 200 will move the slider about 332 pixels which isn't enough. Change 200 pixels to about 260 pixels. This should bump the slider enough.
            }
            // If it is 100% , that is only all the way to the left or all the way to the right, set the mulitplier to 3..
            else if (differenceBetweenCurrentAndTargetPercentage == 100)
            {
                multiplier = 3;
                // When moving from one end to the other, the amount of pixels is about 588 pixels. 100 * 3 + 200 pixels will move the slider about 533 pixels, which is well over the amount it takes to move two places over (390 pixels). As a result, the slider should move enough ticks.
            }

            // Figure out if we are moving left or right.
            // If the current equals the target, we aren't moving anywhere.
            if (currentPrivacyPercentage == targetPrivacyPercentage)
                adjustmentValue = 0.0;
            // If the current is greater than the target, we are moving backwards. Multiply the target percentage and the multiplier, add 250 pixels (arbitrary)
            // and multipy it all -1.  This sets the direction backwards
            else if (currentPrivacyPercentage > targetPrivacyPercentage)
            {
                if (targetPrivacyPercentage == 0)
                    targetPrivacyPercentage = 100;
                adjustmentValue = (targetPrivacyPercentage * multiplier + arbitraryAmountOfPixels) * -1;
            }
            // If the current is less than the target, we are moving forward. Multiply the target percentage and the multiplier, add 200 pixels (arbitrary)
            else if (currentPrivacyPercentage < targetPrivacyPercentage)
            {
                if (targetPrivacyPercentage == 0)
                    targetPrivacyPercentage = 100;
                adjustmentValue = targetPrivacyPercentage * multiplier + arbitraryAmountOfPixels;
            }
            // Can't figure it out.  Throw an exception.
            else
                throw new Exception("Cannot calculate adjustment value for privacy setting.");

            // Return the adjustment value
            return adjustmentValue;
        }
        #endregion Privacy Settings

        #region People Query
        /// <summary>
        /// Creates a saved query.
        /// </summary>
        /// <param name="queryName">The name of the saved query.</param>
        /// <param name="queryDescription">The description of the saved query.</param>
        public void People_PeopleQuery_CreateSaved(string queryName, string queryDescription)
        {
            // If we are on the query's result's page, just click this link.
            string linkText = "Save this query";
            if (this._driver.FindElementsByLinkText(linkText).Count > 0)
            {
                this._driver.FindElementByLinkText(linkText).Click();

                // Name
                if (!string.IsNullOrEmpty(queryName))
                {
                    this._driver.FindElementById("query_name").SendKeys(queryName);
                }

                // Description
                if (!string.IsNullOrEmpty(queryDescription))
                {
                    this._driver.FindElementById("query_desc").SendKeys(queryDescription);
                }
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveQuery").Click();
            }
            else
            {
                throw new WebDriverException(string.Format("Could not find the '{0}' link.", linkText));
            }
        }

        /// <summary>
        /// Deletes a saved query.
        /// </summary>
        /// <param name="queryName">The name of the query.</param>
        public void People_PeopleQuery_DeleteSaved(string queryName)
        {
            // Navigate to the saved if not already on the page
            if (!this._driver.Url.Contains("/PeopleQuery/Index.aspx"))
            {
                this._generalMethods.Navigate_Portal(Navigation.Portal.People.Search.My_Saved_Queries);
            }

            // Delete the saved query
            int row = this._generalMethods.GetTableRowNumberWebDriver("//table[@class='grid']", queryName, "Name", null);
            this._driver.FindElementByXPath(string.Format("//table[@class='grid']/tbody/tr[{0}]/td[5]/form/input[3]", row + 1)).Click();
            Assert.IsTrue(Regex.IsMatch(this._driver.SwitchTo().Alert().Text, "^Are you sure you want to delete this query[\\s\\S]$"));
            this._driver.SwitchTo().Alert().Accept();
        }

        public void People_PeopleQuery(SearchByConstants searchBy, FieldConstants field, ComparisonConstants comparison, string[] values)
        {
            // Convert the enum to a string
            string searchByFormatted = searchBy.ToString().Replace("_", " ");
            string fieldFormatted = field.ToString().Replace("_", " ");
            string comparisonFormatted = comparison.ToString().Replace("_", " ");

            if (fieldFormatted == "State Province")
            {
                fieldFormatted = "State / Province";
            }
            else if (fieldFormatted == "Staff Pastor")
            {
                fieldFormatted = "Staff / Pastor";
            }
            else if (fieldFormatted == "Date Time")
            {
                fieldFormatted = "Date / Time";
            }
            else if (fieldFormatted == "NULL")
            {
                fieldFormatted = null;
            }

            if (comparisonFormatted == "NULL")
            {
                comparisonFormatted = null;
            }

            // Navigate to people->people query
            this._generalMethods.Navigate_Portal(Navigation.Portal.People.Search.People_Query);

            string option = string.Empty;

            switch (searchBy)
            {
                case SearchByConstants.Household_Address:
                case SearchByConstants.Individual_Address:
                    option = "Address";
                    break;
                case SearchByConstants.Household_Communication:
                case SearchByConstants.Individual_Communication:
                    option = "Type";
                    break;
                case SearchByConstants.Individual_Attributes:
                    option = "Attribute";
                    break;
                case SearchByConstants.Individual_Information:
                    option = "Bar Code";
                    break;
                case SearchByConstants.Participant_Assignment:
                case SearchByConstants.Participant_Attendance:
                case SearchByConstants.Staff_Assignment:
                case SearchByConstants.Staff_Attendance:
                    option = "Activity";
                    break;
                case SearchByConstants.NULL:
                    break;
                default:
                    break;
            }

            // Populate the fields with the provided data
            if (!string.IsNullOrEmpty(searchByFormatted))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlSearchBy_dropDownList")).SelectByText(searchByFormatted);
                this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(2500));

                try
                {
                    this._driver.FindElement(By.XPath(string.Format("//select[@id='ctl00_ctl00_MainContent_content_ddlField_dropDownList']/option[text()='{0}']", option)));
                    //this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlSearchBy_dropDownList", searchByFormatted, string.Format("selenium.isElementPresent(\"xpath=//select[@id='ctl00_ctl00_MainContent_content_ddlField_dropDownList']/option[text()='{0}']\");", option), "10000");
                }
                catch (OpenQA.Selenium.NoSuchElementException) { }
                
            }

            if (!string.IsNullOrEmpty(fieldFormatted))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlField_dropDownList")).SelectByText(fieldFormatted);
                this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(2500));

                try
                {
                    this._driver.FindElement(By.XPath(string.Format("//select[@id='ctl00_ctl00_MainContent_content_ddlComparison_dropDownList']/option[text()='{0}']", comparisonFormatted)));
                    //this._selenium.SelectAndWaitForCondition("ctl00_ctl00_MainContent_content_ddlField_dropDownList", fieldFormatted, this._javascript.OptionExistsInSelect("ctl00_ctl00_MainContent_content_ddlComparison_dropDownList", comparisonFormatted), "15000");
                }
                catch (OpenQA.Selenium.NoSuchElementException) { }
                
            }

            if (!string.IsNullOrEmpty(comparisonFormatted))
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlComparison_dropDownList")).SelectByText(comparisonFormatted);
            }
            if (values != null)
            {
                foreach (string value in values)
                {
                    if (field == FieldConstants.Date_Of_Birth)
                    {
                        this._driver.FindElementById("ctl00_ctl00_MainContent_content_ucDateTextBox_ctl00_DateTextBox").SendKeys(value.ToString());
                    }
                    else
                    {
                        this._driver.FindElementById("ctl00_ctl00_MainContent_content_ucTextBox_txtValue_textBox").SendKeys(value.ToString());
                    }
                }
            }

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnRunSearchField").Click();
        }
        #endregion People Query

        #region People Search
        public void People_AddAddress(string householdPerson, string addressType, string country, string address1, string address2, string city, string state, string postalCode, string county, string comment)
        {

            this._generalMethods.WaitForElement(this._driver, By.LinkText("Add another"), 30);

            // Click to add an address
            this._driver.FindElementByLinkText("Add another").Click();
            this._generalMethods.WaitForElement(this._driver, By.Id("address_for"), 20);

            // Populate the fields
            if (householdPerson != null)
            {
                new SelectElement(this._driver.FindElementById("address_for")).SelectByText(householdPerson);
            }

            if (addressType != null)
            {
                new SelectElement(this._driver.FindElementById("address_type")).SelectByText(addressType);
            }

            if (country != null)
            {
                new SelectElement(this._driver.FindElementById("country")).SelectByText(country);
            }
            if (address1 != null)
            {
                this._driver.FindElementById("street_1").SendKeys(address1);
            }

            if (address2 != null)
            {
                this._driver.FindElementById("street_2").SendKeys(address2);
            }

            if (city != null)
            {
                this._driver.FindElementById("city").SendKeys(city);
            }

            if (state != null)
            {
                if (country != null)
                {
                    this._driver.FindElementById("province").SendKeys(state);
                }
                else
                {
                    new SelectElement(this._driver.FindElementById("state")).SelectByText(state);
                }
            }

            if (postalCode != null)
            {
                this._driver.FindElementById("postal_code").SendKeys(postalCode);
            }

            if (county != null)
            {
                this._driver.FindElementById("county").SendKeys(county);
            }

            if (comment != null)
            {
                this._driver.FindElementById("comment").SendKeys(comment);
            }
            this._driver.FindElementById("save_address_button").Click();
        }

        public void People_ViewHousehold(string fullName)
        {
            // Search for a household
            this._selenium.Type("header_search", fullName);
            this._selenium.ClickAndWaitForPageToLoad("header_button");

            // Select the user
            this._selenium.ClickAndWaitForPageToLoad("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[2]/td[2]/a");

            // View the household
            this._selenium.ClickAndWaitForPageToLoad("link=View the household");
        }

        public void People_ViewHousehold_WebDriver(string fullName)
        {
            // Search for a household
            this._driver.FindElementById("header_search").SendKeys(fullName);
            this._driver.FindElementById("header_button").Click();
            this._generalMethods.WaitForElement(this._driver, By.XPath("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[2]/td[2]/a"));

            // Select the user
            this._driver.FindElementByXPath("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[2]/td[2]/a").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View the household"));

            // View the household
            this._driver.FindElementByLinkText("View the household").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Edit household/individuals"));

        }

        public void People_SearchIndividual(string fullName)
        {
            // Search for a household
            this._selenium.Type("header_search", fullName);
            this._selenium.ClickAndWaitForPageToLoad("header_button");
        }

        /// <summary>
        /// This method performs a people search in portal.
        /// </summary>
        /// <param name="searchBy">Enum for search by.</param>
        /// <param name="parameter">The parameter to search by.</param>
        public void People_Search(SearchByConstants searchBy, string parameter)
        {
            // Convert the search constant to a string
            string searchByFormatted = searchBy == SearchByConstants.MemberEnv ? "link=Member/Env#" : string.Format("link={0}", searchBy.ToString().Replace("_", " "));

            // Navigate to people->find a person
            this._selenium.Navigate(Navigation.People.Search.Find_a_Person);

            // Select the type
            this._selenium.Click(searchByFormatted);

            // Enter the search parameter(s) and perform the search
            switch (searchBy)
            {
                case SearchByConstants.Individual:
                    {
                        this._selenium.Type("txtName", parameter);
                        this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
                        break;
                    }
                case SearchByConstants.MemberEnv:
                    {
                        this._selenium.Type("txtMemberEnvNo", parameter);
                        this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
                        break;
                    }
                case SearchByConstants.Date_of_birth:
                    {
                        if (string.IsNullOrEmpty(parameter))
                        {
                            this._errorText.Add("Date of birth is required.");
                        }
                        else
                        {
                            //this._selenium.TypeKeys("dob", parameter);
                            this._selenium.Type("dob", parameter);
                            TestLog.WriteLine("DOB typed {0}", this._selenium.GetText("dob"));
                        }
                        this._selenium.ClickAndWaitForPageToLoad("//form[@id='search_dob']/table/tbody/tr[2]/td[2]/span/input[@id='submitQuery']");
                        break;
                    }
                default:
                    break;
            }

            // Verify error message(s) if necessary
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessages(this._errorText);
            }
        }

        public void People_FindAPerson_Individual(string name, string address, string phoneWebEmail, bool includeInactive,
            string status, string subStatus, string attributeGroup, string attribute, bool includeDeceased)
        {
            // Navigate to people->find a person
            this._selenium.Navigate(Navigation.People.Search.Find_a_Person);

            if (!string.IsNullOrEmpty(name))
            {
                this._selenium.Type("txtName", name);
            }
            if (!string.IsNullOrEmpty(address))
            {
                this._selenium.Type("txtAddress", address);
            }
            if (!string.IsNullOrEmpty(phoneWebEmail))
            {
                this._selenium.Type("txtCommunication", phoneWebEmail);
            }
            if (!includeInactive)
            {
                this._selenium.Uncheck("chkIncludeInactive");
            }

            if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(subStatus) || !string.IsNullOrEmpty(attributeGroup) || !string.IsNullOrEmpty(attribute) ||
                includeDeceased)
            {
                this._selenium.ClickAndWaitForPageToLoad("link=More search options");
                this._selenium.Click("link=More search options");

                if (!string.IsNullOrEmpty(status))
                {
                    this._selenium.Select("status", status);
                }
                if (!string.IsNullOrEmpty(subStatus))
                {
                    this._selenium.Select("subStatus", subStatus);
                }
                if (!string.IsNullOrEmpty(attributeGroup))
                {
                    this._selenium.Select("attributeGroup", attributeGroup);
                }
                if (!string.IsNullOrEmpty(attribute))
                {
                    this._selenium.Select("attribute", attribute);
                }
                if (includeDeceased)
                {
                    this._selenium.Check("chkIncludeDeceased");
                }
            }

            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
        }

        /// <summary>
        /// Searches for an individual
        /// </summary>
        /// <param name="name">The individual's name</param>
        /// <param name="address">The individual's home address</param>
        /// <param name="phoneWebEmail">The individual's phone/web/email address</param>
        /// <param name="includeInactive">Include inactive status?</param>
        /// <param name="status">The individual's status</param>
        /// <param name="subStatus">The individual's substatus</param>
        /// <param name="attributeGroup">The attribute group</param>
        /// <param name="attribute">The attribute</param>
        /// <param name="includeDeceased">Include deceased?</param>
        public void People_FindAPerson_Individual_WebDriver(string name, string address, string phoneWebEmail, bool includeInactive,
            string status, string subStatus, string attributeGroup, string attribute, bool includeDeceased)
        {
            // Navigate to people->find a person
            this._generalMethods.Navigate_Portal(Navigation.People.Search.Find_a_Person);

            if (!string.IsNullOrEmpty(name))
            {
                this._driver.FindElementById("txtName").SendKeys(name);
            }
            if (!string.IsNullOrEmpty(address))
            {
                this._driver.FindElementById("txtAddress").SendKeys(address);
            }
            if (!string.IsNullOrEmpty(phoneWebEmail))
            {
                this._driver.FindElementById("txtCommunication").SendKeys(phoneWebEmail);
            }
            if (!includeInactive)
            {
                this._generalMethods.SelectCheckbox(By.Id("chkIncludeInactive"), false);
            }

            if (!string.IsNullOrEmpty(status) || !string.IsNullOrEmpty(subStatus) || !string.IsNullOrEmpty(attributeGroup) || !string.IsNullOrEmpty(attribute) ||
                includeDeceased)
            {
                this._driver.FindElementByLinkText("More search options").Click();

                if (!string.IsNullOrEmpty(status))
                {
                    new SelectElement(this._driver.FindElementById("status")).SelectByText(status);
                }
                if (!string.IsNullOrEmpty(subStatus))
                {
                    new SelectElement(this._driver.FindElementById("subStatus")).SelectByText(subStatus);
                }
                if (!string.IsNullOrEmpty(attributeGroup))
                {
                    new SelectElement(this._driver.FindElementById("attributeGroup")).SelectByText(attributeGroup);
                }
                if (!string.IsNullOrEmpty(attribute))
                {
                    new SelectElement(this._driver.FindElementById("attribute")).SelectByText(attribute);
                }
                if (includeDeceased)
                {
                    this._generalMethods.SelectCheckbox(By.Id("chkIncludeDeceased"), true);
                }
            }

            this._driver.FindElementById(GeneralButtons.submitQuery).Click();
        }

        /// <summary>
        /// Adds a household with one indiviudal.
        /// </summary>
        /// <param name="firstName">The first name of the individual.</param>
        /// <param name="lastName">The last name of the individual.</param>
        /// <param name="householdPosition">The household position of the individual.</param>
        /// <param name="status">The status date of the individual.</param>
        /// <param name="communications">The collection of communication values (home and email) for the indiviudal.</param>
        /// <param name="addData">The address data for the individual.</param>
        /// <param name="dateOfBirth">The date of the individual.</param>
        /// <param name="statusDate">The status date of the individual.</param>
        /// <param name="preferredPhone">The preferred phone communication type.</param>
        /// <param name="preferredEmail">The preferred email communication type.</param>
        public void People_AddHousehold(string firstName, string lastName, string householdPosition, string status, List<List<string>> communications, AddressData addData, [Optional, DefaultParameterValue("")] string dateOfBirth, [Optional, DefaultParameterValue("")] string statusDate, [Optional, DefaultParameterValue(GeneralEnumerations.CommunicationTypes.Mobile)] GeneralEnumerations.CommunicationTypes preferredPhone, [Optional, DefaultParameterValue(GeneralEnumerations.CommunicationTypes.Personal)] GeneralEnumerations.CommunicationTypes preferredEmail)
        {
            if (this._driver.Title == "Fellowship One :: Add Contributions")
            {
                this._driver.FindElementByLinkText("New individual").Click();
            }
            else
            {
                // Navigate to people->add household
                this._generalMethods.Navigate_Portal(Navigation.Portal.People.Search.Add_Household);

                // Click to add a household
                this._driver.FindElementByLinkText("Add a household").Click();
            }

            // Populate the data fields
            if (!string.IsNullOrEmpty(firstName))
            {
                this._driver.FindElementByXPath("//div[@id='individuals']/div/div[2]/table[1]/tbody/tr[2]/td[2]/input").SendKeys(firstName);
            }
            else
            {
                this._errorText.Add("The individual is missing the first name field.");
            }

            if (!string.IsNullOrEmpty(lastName))
            {
                this._driver.FindElementByXPath("//div[@id='individuals']/div/div[2]/table[1]/tbody/tr[2]/td[4]/input").SendKeys(lastName);
            }
            else
            {
                this._errorText.Add("The individual is missing the last name field.");
            }

            string householdPositionItem = !string.IsNullOrEmpty(householdPosition) ? householdPosition.ToString() : "";
            new SelectElement(this._driver.FindElementByXPath("//div[@id='individuals']/div/div[2]/table[2]/tbody/tr[2]/td[1]/select")).SelectByText(householdPositionItem);
            if (string.IsNullOrEmpty(householdPosition))
            {
                this._errorText.Add("The individual is missing the household position field.");
            }

            string statusItem = !string.IsNullOrEmpty(status) ? status : "";
            new SelectElement(this._driver.FindElementByXPath("//div[@id='individuals']/div/div[3]/table/tbody/tr[2]/td[1]/select")).SelectByText(statusItem);
            if (string.IsNullOrEmpty(status))
            {
                this._errorText.Add("The individual is missing the status field.");
            }

            if (!string.IsNullOrEmpty(statusDate))
            {
                this._driver.FindElementByXPath("//div[@id='individuals']/div/div[3]/table/tbody/tr[2]/td[3]/div/input").SendKeys(statusDate);
            }

            if (!string.IsNullOrEmpty(dateOfBirth))
            {
                this._driver.FindElementByXPath("//div[@id='individuals']/div/div[2]/table[2]/tbody/tr[2]/td[4]/div/input").SendKeys(dateOfBirth);
            }

            // Process the communications, if provided
            if (communications != null)
            {
                foreach (List<string> commValue in communications)
                {
                    string commType = commValue[0];
                    string type = commValue[1];
                    string value = commValue[2];

                    if (commType == "Phone")
                    {
                        if (type == "Home")
                        {
                            this._driver.FindElementByXPath("//input[contains(@id, 'ctl00_ctl00_MainContent_content_txtHsdHomePhone')]").SendKeys(value);
                        }
                        else if (type == "Mobile")
                        {
                            this._driver.FindElementByXPath("//input[contains(@id, 'ctl00_ctl00_MainContent_content_ctl01_ctlPhones_ctlNewPhone_txtPhoneNumber_phone_number_')]").SendKeys(value);
                        }
                        else if (type == "Work")
                        {
                            this._driver.FindElementByXPath("//input[contains(@id, 'ctl00_ctl00_MainContent_content_ctl01_ctlPhones_ctlNewPhone2_txtPhoneNumber_phone_number_')]").SendKeys(value);
                        }
                        else
                            throw new WebDriverException(string.Format("Unknown phone communication type {0}", type));
                    }
                    else
                    {
                        if (type == "Home")
                        {
                            this._driver.FindElementByXPath("//input[contains(@id, 'ctl00_ctl00_MainContent_content_txtHsdHomeEmail')]").SendKeys(value);
                        }
                        else if (type == "Email")
                        {
                            this._driver.FindElementByXPath("//input[contains(@id, 'ctl00_ctl00_MainContent_content_ctl01_ctlEmails_ctlNewEmail_txtEmailAddress_email_address_')]").SendKeys(value);
                        }
                        else
                            throw new WebDriverException(string.Format("Unknown email communication type {0}", type));
                    }
                }

                // Specify the preferred phone
                switch (preferredPhone)
                {
                    case GeneralEnumerations.CommunicationTypes.Home:
                        if (this._driver.FindElementsByXPath("//input[contains(@name, 'phone_priority') and @value=1]").Count > 0)
                        {
                            this._driver.FindElementByXPath("//input[contains(@name, 'phone_priority') and @value=1]").Click();
                        }
                        else
                        {
                            throw new WebDriverException("Home number could not be marked as preferred. Was a home number specified?");
                        }
                        break;
                    case GeneralEnumerations.CommunicationTypes.Mobile:
                        this._driver.FindElementByXPath("//input[contains(@name, 'phone_priority') and @value=3]").Click();
                        break;
                    case GeneralEnumerations.CommunicationTypes.Work:
                        this._driver.FindElementByXPath("//input[contains(@name, 'phone_priority') and @value=2]").Click();
                        break;
                    default:
                        throw new WebDriverException(string.Format("Phone type {0} is not valid for a preferred phone.", preferredPhone));
                }

                // Specify the preferred email
                switch (preferredEmail)
                {
                    case GeneralEnumerations.CommunicationTypes.Home:
                        if (this._driver.FindElementsByXPath("//input[contains(@name, 'email_priority') and @value=5]").Count > 0)
                        {
                            this._driver.FindElementByXPath("//input[contains(@name, 'email_priority') and @value=5]").Click();
                        }
                        else
                        {
                            throw new WebDriverException("Home email could not be marked as preferred. Was a home email specified?");
                        }
                        break;
                    case GeneralEnumerations.CommunicationTypes.Personal:
                        this._driver.FindElementByXPath("//input[contains(@name, 'email_priority') and @value=4]").Click();
                        break;
                    default:
                        throw new WebDriverException(string.Format("Email type {0} is not valid for a preferred email.", preferredEmail));
                }
            }

            // Save the household
            this._driver.FindElementByXPath("//input[@id='ctl00_content_btnSave' or @id='ctl00_ctl00_MainContent_content_btnSave']").Click();

            // Verify correct error(s) is/are present
            if (this._errorText.Count > 0)
            {
                this._generalMethods.VerifyErrorMessagesWebDriver(this._errorText);
            }
            else
            {
                // Process the address, if provided
                if (addData != null)
                {
                    // Enter an address
                    if (addData.Country != null)
                    {
                        new SelectElement(this._driver.FindElementById("country")).SelectByText(addData.Country);
                    }
                    if (addData.Address_1 != null)
                    {
                        this._driver.FindElementById("street_1").SendKeys(addData.Address_1);
                    }
                    if (addData.Address_2 != null)
                    {
                        this._driver.FindElementById("street_2").SendKeys(addData.Address_2);
                    }
                    if (addData.City != null)
                    {
                        this._driver.FindElementById("city").SendKeys(addData.City);
                    }
                    if (addData.State != null)
                    {
                        new SelectElement(this._driver.FindElementById("state")).SelectByText(addData.State);
                    }
                    if (addData.Province != null)
                    {
                        this._driver.FindElementById("province").SendKeys(addData.Province);
                    }
                    if (addData.Postal_code != null)
                    {
                        this._driver.FindElementById("postal_code").SendKeys(addData.Postal_code);
                    }
                    if (addData.County != null)
                    {
                        this._driver.FindElementById("county").SendKeys(addData.County);
                    }
                    if (addData.Comment != null)
                    {
                        this._driver.FindElementById("comment").SendKeys(addData.Comment);
                    }

                    // Save the address
                    this._driver.FindElementById("submitQuery").Click();
                }
                else
                {
                    this._driver.FindElementByLinkText("Skip this step").Click();
                }
            }
        }

        /// <summary>
        /// Views an individual.
        /// </summary>
        /// <param name="fullName">The individual you want to view. </param>
        public void People_ViewIndividual(string fullName)
        {

            log.Debug("People View Individual: " + fullName);

            string modifiedName = string.Empty;

            // Search for a household
            if (fullName.Contains(","))
            {
                modifiedName = fullName.Split(',')[0];
                this._selenium.Type("header_search", modifiedName);
            }
            else
            {
                this._selenium.Type("header_search", fullName);
            }

            log.Debug("Header Search Modified Name [" + modifiedName + "] or FullName [" + fullName + "]");
            this._selenium.ClickAndWaitForPageToLoad("header_button");

            // Select the user
            int tableRows = this._generalMethods.GetTableRowCount(TableIds.People_Individuals);

            for (int i = 1; i < tableRows; i++)
            {
                string link = this._selenium.GetText(TableIds.People_Individuals + "/tbody/tr[" + (i + 1) + "]/td[2]/a/span[1]") + " " +
                    this._selenium.GetText(TableIds.People_Individuals + "/tbody/tr[" + (i + 1) + "]/td[2]/a/span[2]");

                log.Debug("People Individual Links: " + link);

                //if( (this._selenium.GetText(TableIds.People_Individuals + "/tbody/tr[" + (i + 1) + "]/td[2]/a/span[1]") + " " +
                //    this._selenium.GetText(TableIds.People_Individuals + "/tbody/tr[" + (i + 1) + "]/td[2]/a/span[2]")).Equals(fullName) // == fullName) 
                //  )
                if (link.Equals(fullName))
                {
                    log.Debug("Found " + fullName + " click and Wait For Page");
                    this._selenium.ClickAndWaitForPageToLoad("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[" + (i + 1) + "]/td[2]/a");
                    break;
                }
            }
        }

        /// <summary>
        /// Views an individual.
        /// </summary>
        /// <param name="fullName">The individual you want to view. </param>
        public void People_ViewIndividual_WebDriver(string fullName)
        {
            string modifiedName = string.Empty;

            this._generalMethods.WaitForElement(this._driver, By.Id("header_button"));

            // Search for a household
            if (fullName.Contains(","))
            {
                modifiedName = fullName.Split(',')[0];
                this._driver.FindElementById("header_search").SendKeys(modifiedName);
            }
            else
            {
                this._driver.FindElementById("header_search").SendKeys(fullName);
            }

            this._driver.FindElementById("header_button").Click();
            this._generalMethods.WaitForElement(this._driver, By.XPath(TableIds.People_Individuals), 40);

            // Select the user
            IWebElement table = this._driver.FindElementByXPath(TableIds.People_Individuals);
            int tableRows = table.FindElements(By.TagName("tr")).Count;


            if (tableRows <= 1)
            {
                throw new SeleniumException(string.Format("User {0} was not found", fullName));

            }

            System.Collections.ObjectModel.ReadOnlyCollection<IWebElement> spans;
            for (int i = 1; i < tableRows; i++)
            {
                spans = table.FindElements(By.TagName("tr"))[i].FindElements(By.TagName("td"))[1].FindElement(By.TagName("a")).FindElements(By.TagName("span"));
                string link = string.Format("{0} {1}", spans[0].Text, spans[1].Text);

                if (link == fullName)
                {
                    this._driver.FindElementByXPath(string.Format("//table[@id='ctl00_ctl00_MainContent_content_grdIndividuals']/tbody/tr[{0}]/td[2]/a", i + 1)).Click();
                    break;
                }
            }
        }
        /// <summary>
        /// Edit Individual Name in Portal
        /// </summary>
        /// <param name="individualName"></param>
        /// <param name="firstNameEdit"></param>
        /// <param name="lastNameEdit"></param>
        /// <param name="middleName"></param>
        /// <param name="prefix"></param>
        /// <param name="suffix"></param>
        public void People_Edit_Individual_Name(string individualName, string firstNameEdit, string lastNameEdit, string middleName = null, string prefix = null, string suffix = null)
        {
            //Navigate to individual edit page
            this.People_Individual_Edit_GearOption(individualName);

            //Edit First Name and Last Name
            this._driver.FindElementById(GeneralPeople.IndividualEdit.FirstName).Clear();
            this._driver.FindElementById(GeneralPeople.IndividualEdit.FirstName).SendKeys(firstNameEdit);
            this._driver.FindElementById(GeneralPeople.IndividualEdit.LastName).Clear();
            this._driver.FindElementById(GeneralPeople.IndividualEdit.LastName).SendKeys(lastNameEdit);

            if (prefix != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Prefix).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Prefix).SendKeys(prefix);
            }
            if (middleName != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.MiddleName).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.MiddleName).SendKeys(middleName);
            }
            if (suffix != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Suffix).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Suffix).SendKeys(suffix);
            }
            //Save
            this._driver.FindElementById(GeneralPeople.IndividualEdit.SaveButton).Click();
            this._generalMethods.WaitForElement(By.Id("household_individual_name"));
            //Verify Name was changed
            Assert.Contains(this._driver.FindElementById("household_individual_name").Text, firstNameEdit + " " + lastNameEdit);
        }
        /// <summary>
        /// Edit Individual Status in portal 
        /// </summary>
        /// <param name="individualName"></param>
        /// <param name="status"></param>
        /// <param name="subStatus"></param>
        /// <param name="statusDate"></param>
        /// <param name="statusComment"></param>
        public void People_Edit_Individual_Status(string individualName, string status, string subStatus = null, string statusDate = null, string statusComment = null)
        {
            this.People_Individual_Edit_GearOption(individualName);
            new SelectElement(this._driver.FindElementById(GeneralPeople.IndividualEdit.StatusDropdown)).SelectByText(status);
            if (subStatus != null)
            {
                new SelectElement(this._driver.FindElementById(GeneralPeople.IndividualEdit.SubStatusDropDown)).SelectByText(subStatus);
            }
            if (statusDate != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.StatusDate).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.StatusDate).SendKeys(statusDate);
            }
            if (statusComment != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.StatusComment).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.StatusComment).SendKeys(statusComment);
            }
            //Save
            this._driver.FindElementById(GeneralPeople.IndividualEdit.SaveButton).Click();
            this._generalMethods.WaitForElement(By.Id("household_individual_name"));
        }
        /// <summary>
        /// Edit Individual info in portal
        /// </summary>
        /// <param name="individualName"></param>
        /// <param name="householdPosition"></param>
        /// <param name="gender"></param>
        /// <param name="maritalStatus"></param>
        /// <param name="birthDate"></param>
        public void People_Edit_Individual_Info(string individualName, string householdPosition = null, string gender = null, string maritalStatus = null, string birthDate = null)
        {
            this.People_Individual_Edit_GearOption(individualName);

            if (householdPosition != null)
            {
                new SelectElement(this._driver.FindElementById(GeneralPeople.IndividualEdit.HouseholdPosition)).SelectByText(householdPosition);
            }
            if (gender != null)
            {
                new SelectElement(this._driver.FindElementById(GeneralPeople.IndividualEdit.GenderDropDown)).SelectByValue(gender);
            }
            if (maritalStatus != null)
            {
                new SelectElement(this._driver.FindElementById(GeneralPeople.IndividualEdit.MaritalStatusDropDown)).SelectByText(maritalStatus);
            }
            if (birthDate != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.BirthDate).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.BirthDate).SendKeys(birthDate);
            }

            //Save
            this._driver.FindElementById(GeneralPeople.IndividualEdit.SaveButton).Click();
            this._generalMethods.WaitForElement(By.Id("household_individual_name"));
        }
        /// <summary>
        /// Edit individual social media fields in Portal
        /// </summary>
        /// <param name="individualName"></param>
        /// <param name="facebook"></param>
        /// <param name="linkedIn"></param>
        /// <param name="twitter"></param>
        public void People_Edit_Individual_SocialMedia(string individualName, string facebook = null, string linkedIn = null, string twitter = null)
        {
            this.People_Individual_Edit_GearOption(individualName);

            if (facebook != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.FaceBook).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.FaceBook).SendKeys(facebook);
            }
            if (linkedIn != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Linkedin).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Linkedin).SendKeys(linkedIn);
            }
            if (twitter != null)
            {
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Twitter).Clear();
                this._driver.FindElementById(GeneralPeople.IndividualEdit.Twitter).SendKeys(twitter);
            }
            //Save
            this._driver.FindElementById(GeneralPeople.IndividualEdit.SaveButton).Click();
            this._generalMethods.WaitForElement(By.Id("household_individual_name"));
        }
        /// <summary>
        /// Edit individual More Fields in Portal 
        /// </summary>
        /// <param name="individualName"></param>
        /// <param name="barcode"></param>
        /// <param name="tagComment"></param>
        /// <param name="title"></param>
        /// <param name="goesByName"></param>
        /// <param name="formerName"></param>
        /// <param name="employer"></param>
        /// <param name="occupation"></param>
        /// <param name="occupationDescription"></param>
        /// <param name="formerDenomination"></param>
        /// <param name="formerChurch"></param>
        /// <param name="school"></param>
        /// <param name="memberEnvNumber"></param>
        //public void People_Edit_Individual_MoreFields(string individualName, string barcode = null, string tagComment = null, string title = null, string goesByName = null, string formerName = null, string employer = null, string occupation = null, string occupationDescription = null,
        //    string formerDenomination = null, string formerChurch = null, string school = null, string memberEnvNumber = null)
        //{
        //    this.People_Individual_Edit_GearOption(individualName);
        //    this._driver.FindElementByLinkText(GeneralPeople.IndividualEdit.MoreFieldsLink).Click();

        //}

        #region Involvement
        /// <summary>
        /// Verifies Involvement Graph Group Details
        /// </summary>
        /// <param name="attendanceDate"></param>
        /// <param name="attendanceTime"></param>
        /// <param name="groupName"></param>
        /// <param name="groupType"></param>
        public void People_Verify_Involvement_Graph_GroupDetails(string attendanceDate, string attendanceTime, string groupName, string groupType)
        {

            //View involvement grapth details
            this._generalMethods.WaitForElementDisplayed(By.Id("involvement_graph"), 45, "Involvement Graph not fully displayed");

            TestLog.WriteLine("Involvement Graph Point");
            IWebElement webElement = this._driver.FindElement(By.Id("involvement_graph"));
            // string groupName = "Assign Schedule Level";


            //IList<IWebElement> groupNameDisplay = webElement.FindElements(By.ClassName("involvement_callout_details"));
            //IList<IWebElement> groupNameDisplay = webElement.FindElements(By.XPath("//ul[@class='involvement_callout_details']"));
            IList<IWebElement> groupNameDisplay = webElement.FindElements(By.XPath("//ul[@class='involvement_callout_details']"));

            //int rowCount = webElement.FindElements(By.ClassName("involvement_callout_details")).Count;
            int rowCount = webElement.FindElements(By.XPath("//ul[@class='involvement_callout_details']")).Count;
            //            int elementCount = webElement.FindElements(By.XPath("li//[contains(text(), 'Attendance Group')]")).Count;


            //              int rowCount = webElement.FindElements(By.ClassName("//ul[@id='involvement_callout_details'/li")).Count;
            TestLog.WriteLine("rowcount {0}", rowCount);
            //TestLog.WriteLine("elementcount {0}", elementCount);
            //int rowFound = 0;
            /* for (int i = 0; i < rowCount; i++)
              {
                  // Verify the "Group Name exisits"
                  TestLog.WriteLine("Text : {0}", groupNameDisplay[i].GetAttribute("innerHtml").Trim());
              }

                  IList<IWebElement> groupList = groupNameDisplay[i].FindElements(By.TagName("li"));
                  //foreach (IWebElement list in groupList)
                      //if (list.FindElement(By.TagName("li")).Text == groupName)
                        
                  int listCount = groupNameDisplay[i].FindElements(By.TagName("li")).Count;
                
                  TestLog.WriteLine("List Count {0}", listCount); */

            //Having white space in the middle since we can't replace white space due posibility of group name being more than one word
            //Yes, I can split and split some more but I don't want to over split.
            //Besides, splits are hard!
            //<span>1:00 PM</span>                                     Automation Activity
            string groupNameInfo = string.Format("{0} {1}", attendanceTime, groupName);
            string groupNameEncInfo = string.Format("<span>{0}</span>                                     {1}", attendanceTime, groupName);
            int rowGroupTypeFound = 0;
            int rowGroupDateFound = 0;
            bool groupTypeFound = false;
            bool groupDateFound = false;
            bool groupNameInfoFound = false;

            //Search for Group Type
            #region Search Group Type
            IList<IWebElement> grpTypes = this._driver.FindElements(By.XPath("//div[@class='graph_labels']"));

            foreach (IWebElement grpType in grpTypes)
            {
                string grpTypeText = grpType.Text;
                log.DebugFormat("Group Types Found: {0}", grpTypeText);
                if (grpTypeText == groupType)
                {
                    log.DebugFormat("Group Type [{0}] Found: {1}", groupType, rowGroupTypeFound);
                    groupTypeFound = true;
                    break;
                }

                rowGroupTypeFound++;
            }

            #endregion Search Group Type

            if (groupTypeFound)
            {
                #region Search Group Date

                //Get Pill Count
                int pillCount = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div", rowGroupTypeFound + 1))).FindElements(By.TagName("img")).Count;
                log.Debug(string.Format("Pill Count {0}", pillCount));

                //DATE    /html/body/div/div[4]/div/div/div/div[2]/div/div[2]/div/ul/li/div/div/div/div
                //DETAILS /html/body/div/div[4]/div/div/div/div[2]/div/div[2]/div/ul/li/div/div/div/ul
                for (int gi = 0; gi < pillCount; gi++)
                {

                    // /html/body/div/div[4]/div/div/div/div[2]/div/div[2]/div/ul/li[3]/div/img[9]
                    // Click on Image so we can get the Text
                    // Forcing a sleep since a wait causes the text not to be displayed
                    this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/img[{1}]", rowGroupTypeFound + 1, gi + 1))).Click();
                    this._generalMethods.WaitForElementEnabled(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/div", rowGroupTypeFound + 1, gi + 1)), 1, "Tooltip not displayed");
                    Thread.Sleep(500);

                    //Get Tool Tip Date 
                    string grpDateEnc = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/div", rowGroupTypeFound + 1, gi + 1))).GetAttribute("innerHTML").Trim();
                    log.DebugFormat("Group Date Enc: {0}", HttpUtility.HtmlDecode(grpDateEnc).Trim());

                    if (attendanceDate == grpDateEnc)
                    {
                        groupDateFound = true;
                        rowGroupDateFound = gi;
                        break;
                    }

                }

                #endregion Search Group Date

                #region Search Group Name Info

                if (groupDateFound)
                {
                    //click on tool tip found
                    //Click on first instance then the actual one we want to view
                    //this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/img[{1}]", 1, 1))).Click();
                    Actions builder = new Actions(this._driver);
                    builder.MoveToElement(this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/img[{1}]", rowGroupTypeFound + 1, rowGroupDateFound + 1))))
                                     .Click().Build().Perform();
                    this._generalMethods.WaitForElementEnabled(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/div", rowGroupTypeFound + 1, rowGroupDateFound + 1)), 1, "Tooltip not displayed");
                    Thread.Sleep(500);

                    //Find out how many grp names are displayed
                    int grpNameRows = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/ul", rowGroupTypeFound + 1, rowGroupDateFound + 1))).FindElements(By.TagName("li")).Count;
                    log.DebugFormat("Group Name Count: {0}", grpNameRows);

                    //Go through all grp names found and get info
                    for (int gnr = 0; gnr < grpNameRows; gnr++)
                    {
                        string grpNameInfoTxt = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/ul", rowGroupTypeFound + 1, rowGroupDateFound + 1))).FindElements(By.TagName("li"))[gnr].Text;
                        string grpNameInfoEnc = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/ul", rowGroupTypeFound + 1, rowGroupDateFound + 1))).FindElements(By.TagName("li"))[gnr].GetAttribute("innerHTML");
                        var grpNameInfoEnc1 = Regex.Replace(grpNameInfoEnc, "(<span>|<'/'span>, )", string.Empty);

                        //string grpNameDate = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/ul", rowGroupTypeFound + 1, rowGroupDateFound + 1))).FindElements(By.TagName("li"))[gnr].FindElement(By.TagName("span")).GetAttribute("innerHTML");
                        //log.DebugFormat("Group Info Enc: {0}", grpNameInfoEnc.Trim());
                        //log.DebugFormat("Group Info Enc: {0}", HttpUtility.HtmlDecode(grpNameInfoEnc).Trim());
                        log.DebugFormat("Group Info Text 1: {0}", grpNameInfoTxt.Trim());
                        log.DebugFormat("Group NameInfo Text 2: {0}", groupNameInfo.Trim());

                        //if we got text then verify using text, else use innter html
                        //We can't remove emtpy white spaces because group name might be two words
                        //string groupNameInfoTxt = HttpUtility.HtmlDecode(grpNameInfoEnc).Trim().Replace(" ", "");
                        log.DebugFormat("Group grpNameInfoEnc : {0} ", grpNameInfoEnc);
                        string groupNameInfoTxt = HttpUtility.HtmlDecode(grpNameInfoEnc).Trim().Replace("\r\n", " ");
                        log.DebugFormat("Group Info EncTxt 3: {0} ", groupNameInfoTxt.Trim());
                        log.DebugFormat("Group ENC : {0} ", groupNameEncInfo);
                        log.DebugFormat("Group Info EncTxt 3+: {0} ", grpNameInfoEnc1.Trim());
                        log.DebugFormat("Group NameInfo Text 4: {0}", groupNameInfo.Trim());


                        if (grpNameInfoTxt != "")
                        {
                            if (grpNameInfoTxt == groupNameInfo)
                            {
                                groupNameInfoFound = true;
                                break;
                            }
                        }
                        else
                        {
                            if (groupNameInfoTxt == groupNameEncInfo)
                            {
                                groupNameInfoFound = true;
                                break;
                            }
                        }

                    }
                }
                else
                {
                    throw new WebDriverException(string.Format("Group Attendance Date [{0}] was not found.", attendanceDate));
                }

                #endregion Search Group Name Info


                if (!groupNameInfoFound)
                {
                    throw new WebDriverException(string.Format("Group Name Info [{0}] was not found.", groupNameInfo));
                }
                else
                {
                    throw new WebDriverException(string.Format("Group Type [{0}] was not found", groupType));
                }

            }
        }


        /// <summary>
        /// Same as People_Verify_Involvement_Graph_GroupDetails execpt getting all data first and then searching for what we are looking for.
        /// </summary>
        /// <param name="attendanceDate"></param>
        /// <param name="attendanceTime"></param>
        /// <param name="groupName"></param>
        /// <param name="groupType"></param>
        public void _People_Verify_Involvement_Graph_GroupDetails(string attendanceDate, string attendanceTime, string groupName, string groupType)
        {

            //View involvement grapth details
            this._generalMethods.WaitForElementDisplayed(By.Id("involvement_graph"), 45, "Involvement Graph not fully displayed");

            //Having white space in the middle since we can't replace white space due posibility of group name being more than one word 
            //<span>1:00 PM</span>                                     Automation Activity
            string groupNameInfo = string.Format("{0} {1}", attendanceTime, groupName);
            string groupNameEncInfo = string.Format("<span>{0}</span>                                     {1}", attendanceTime, groupName);
            int rowGroupTypeFound = 0;
            bool groupNameInfoFound = false;

            Dictionary<string, List<string>> groupDateNames = new Dictionary<string, List<string>>();

            //Search for Group Type           
            rowGroupTypeFound = this.People_Involvement_Get_Group_Type_Location(groupType);

            //Get Group Type Graph Data
            groupDateNames = this.People_Involvement_Get_Group_Graph_Data(rowGroupTypeFound);

            //Verify Date and Group Names found
            if (groupDateNames.Count > 0)
            {
                List<string> groupTimeName = new List<string>();
                log.DebugFormat("Group Date Name: {0}", groupDateNames);
                //Suchitra Notes - Group DAtes name doesn't contain Date info so this control is always going to else condition
                if (groupDateNames.ContainsKey(Convert.ToString(attendanceDate)))
                {
                    groupDateNames.TryGetValue(Convert.ToString(attendanceDate), out groupTimeName);
                }
                else
                {
                    throw new WebDriverException(string.Format("No groups with attendance date [{0}] were found for [{1}]", attendanceDate, groupName));
                }

                foreach (string groupDateName in groupTimeName)
                {
                    //groupDateName.Trim().Replace("\r\n", " ");
                    //log.DebugFormat("Group Date Name: {0}", groupDateName);
                    //log.DebugFormat("Group Date NameEnc: {0}", groupNameEncInfo);

                    if (groupDateName == groupNameEncInfo)
                    {
                        groupNameInfoFound = true;

                    }
                }

                if (!groupNameInfoFound)
                {
                    throw new WebDriverException(string.Format("Group Name Info [{0}] was not found in group type [{1}]", groupNameInfo, groupType));
                }

            }
            else
            {
                throw new WebDriverException(string.Format("No groups attendance time date found"));
            }

        }

        public int People_Involvement_Get_Group_Type_Location(string groupType)
        {
            int rowGroupTypeFound = 0;
            Boolean groupTypeFound = false;

            IList<IWebElement> grpTypes = this._driver.FindElements(By.XPath("//div[@class='graph_labels']"));
            foreach (IWebElement grpType in grpTypes)
            {
                string grpTypeText = grpType.Text;
                log.DebugFormat("Group Types Found: {0}", grpTypeText);


                if (grpTypeText == groupType)
                {
                    log.DebugFormat("Group Type [{0}] Found: {1}", groupType, rowGroupTypeFound);
                    groupTypeFound = true;
                    break;
                }

                rowGroupTypeFound++;
            }

            if (groupTypeFound)
            {
                return rowGroupTypeFound;
            }
            else
            {
                throw new WebDriverException(string.Format("Group Type [{0}] was not found", groupType));
            }

        }

        public Dictionary<string, List<string>> People_Involvement_Get_Group_Graph_Data(int rowGroupTypeFound)
        {
            Dictionary<string, List<string>> groupDateNames = new Dictionary<string, List<string>>();

            //Actions builder = new Actions(this._driver);

            //Get Pill Count
            int pillCount = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div", rowGroupTypeFound + 1))).FindElements(By.TagName("img")).Count;
            log.Debug(string.Format("Pill Count {0}", pillCount));

            //DATE    /html/body/div/div[4]/div/div/div/div[2]/div/div[2]/div/ul/li/div/div/div/div
            //DETAILS /html/body/div/div[4]/div/div/div/div[2]/div/div[2]/div/ul/li/div/div/div/ul
            for (int gi = 0; gi < pillCount; gi++)
            {
                //TODO Not stable enough
                // /html/body/div/div[4]/div/div/div/div[2]/div/div[2]/div/ul/li[3]/div/img[9]
                // Click on Image so we can get the Text within tip tool
                // Forcing a sleep since a wait causes the text not to be displayed
                //this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/img[{1}]", rowGroupTypeFound + 1, gi + 1))).Click();                                        
                //builder.MoveToElement(this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/img[{1}]", rowGroupTypeFound + 1, gi + 1))))
                //                 .ClickAndHold().Build().Perform();
                //this._generalMethods.WaitForElementEnabled(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/div", rowGroupTypeFound + 1, gi + 1)), 1, "Tooltip not displayed");
                //Thread.Sleep(500);

                //Get Tool Tip Date 
                string grpDateEnc = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/div", rowGroupTypeFound + 1, gi + 1))).GetAttribute("innerHTML").Trim();
                log.DebugFormat("Group Date Enc: {0}", HttpUtility.HtmlDecode(grpDateEnc).Trim());


                //Find out how many grp names are displayed
                int grpNameRows = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/ul", rowGroupTypeFound + 1, gi + 1))).FindElements(By.TagName("li")).Count;
                log.DebugFormat("Group Name Count: {0}", grpNameRows);
                List<string> groupTimeName = new List<string>();

                //Go through all grp names found and get info
                for (int gnr = 0; gnr < grpNameRows; gnr++)
                {
                    //Can't get text consistently due to mouse over action
                    //string grpNameInfoTxt = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/ul", rowGroupTypeFound + 1, gi + 1))).FindElements(By.TagName("li"))[gnr].Text;
                    string grpNameInfoEnc = this._driver.FindElement(By.XPath(string.Format("//div[@id='involvement_graph']/ul/li[{0}]/div/div[{1}]/div/ul", rowGroupTypeFound + 1, gi + 1))).FindElements(By.TagName("li"))[gnr].GetAttribute("innerHTML");

                    //log.DebugFormat("Group Info Text: {0}", grpNameInfoTxt.Trim());
                    //log.DebugFormat("Group Info Enc: {0}", grpNameInfoEnc.Trim().Replace("\r\n", " "));
                    log.DebugFormat("Group Info Enc: {0}", HttpUtility.HtmlDecode(grpNameInfoEnc).Trim().Replace("\r\n", " "));

                    //Add To list
                    groupTimeName.Add(HttpUtility.HtmlDecode(grpNameInfoEnc).Trim().Replace("\r\n", " "));

                }

                //Add to List
                groupDateNames.Add(grpDateEnc, groupTimeName);

            }

            return groupDateNames;
        }

        public void People_ViewIndividual_Involvement_DateDetails(string displayDate)
        {

            //string member, string groupName, string attendanceDate

            //View Individuals details in Portal
            //this.People_ViewIndividual_WebDriver("FT tester");

            this._generalMethods.WaitForElementDisplayed(By.Id("involvement_graph"), 45, "Involvement Graph not fully displayed");
            TestLog.WriteLine("Involvement Graph Point");
            IWebElement webElement = this._driver.FindElement(By.Id("involvement_graph"));


            //IList<IWebElement> groupNameDisplay = webElement.FindElements(By.ClassName("involvement_callout_details"));
            IList<IWebElement> groupDateDisplay = webElement.FindElements(By.XPath("//div[@class='involvement_callout_date']"));

            //int rowCount = webElement.FindElements(By.ClassName("involvement_callout_details")).Count;
            int rowCount = webElement.FindElements(By.XPath("//div[@class='involvement_callout_date']")).Count;
            // int rowCount = webElement.FindElements(By.XPath("//div[contains(text(), '5/16/2014']")).Count;
            TestLog.WriteLine("rowcount {0}", rowCount);

            //int rowCount = webElement.FindElements(By.ClassName("//ul[@id='involvement_callout_details'/li")).Count;
            TestLog.WriteLine("rowcount {0}", rowCount);
            int rowFound = 0;
            TestLog.WriteLine("DAte : {0}", displayDate);
            for (int i = 0; i < rowCount; i++)
            {
                // Verify the "Group Name exisits"


                //TestLog.WriteLine(string.Format("Date {0} ", groupDateDisplay[i].FindElement(By.XPath("//div[@class='involvement_callout_date']")).Text.Trim()));
                //              TestLog.WriteLine(string.Format("Date {0} ", groupDateDisplay[i].FindElement(By.ClassName("involvement_callout_date")).Text.Trim()));

                //if (groupDateDisplay[i].FindElement(By.TagName("div")).Text.Trim() == string.Format(displayDate))
                if (groupDateDisplay[i].GetAttribute("innerHtml") == string.Format(displayDate))
                {
                    TestLog.WriteLine("Text found");
                    TestLog.WriteLine(string.Format("Date {0} ", groupDateDisplay[i].Text.Trim()));
                    rowFound = rowFound + 1;
                    //break;
                }
            }


            if (rowCount > 0)
            {

                TestLog.WriteLine("{0} Date  Found", displayDate);
            }
            else
            {
                throw new WebDriverException("date not Found");
            }

        }

        public void People_ViewIndividual_Involvement_GroupTypeDetails(string groupType)
        {
            this._generalMethods.WaitForElementDisplayed(By.Id("involvement_graph"), 45, "Involvement Graph not fully displayed");
            TestLog.WriteLine("Involvement Graph Point");
            IWebElement webElement = this._driver.FindElement(By.Id("involvement_graph"));
            IList<IWebElement> groupTypeDisplay = webElement.FindElements(By.XPath("//div[@class='graph_labels']"));


            int rowCount = webElement.FindElements(By.XPath("//div[contains(text(), 'Automation Tests'")).Count;
            TestLog.WriteLine("rowcount {0}", rowCount);
            if (rowCount > 0)
            {

                TestLog.WriteLine("{0} Date  Found", groupTypeDisplay);
            }
            else
            {
                throw new WebDriverException("date not Found");
            }

        }

        #endregion Involvement


        /// <summary>
        /// Edits the phone communication value for an individuals based on the type specified.
        /// </summary>
        /// <param name="individualname">The name of the individual.</param>
        /// <param name="communicationType">The communication type you wish to edit.</param>
        /// <param name="value">The value of the communication type.</param>
        /// <param name="comment">The comment for this communication value.</param>
        /// <param name="preferred">Specifies if this value is prefererd.</param>
        public void People_FindAPerson_Individual_Edit_Communications_Phone(string individualName, GeneralEnumerations.CommunicationTypes communicationType, string value, string comment, bool preferred)
        {
            // View the individual
            this.People_ViewIndividual(individualName);

            // Edit their communication values
            this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, 'communications/edit')]");

            switch (communicationType)
            {
                case GeneralEnumerations.CommunicationTypes.Mobile:
                    this._selenium.Type("mobile_phone", value);
                    this._selenium.Type("mobile_phone_comment", comment);
                    break;
                case GeneralEnumerations.CommunicationTypes.Home:
                    this._selenium.Type("home_phone", value);
                    this._selenium.Type("home_phone_comment", comment);
                    break;
                case GeneralEnumerations.CommunicationTypes.Work:
                    this._selenium.Type("work_phone", value);
                    this._selenium.Type("work_phone_comment", comment);
                    break;
                case GeneralEnumerations.CommunicationTypes.Emergency:
                    this._selenium.Type("emergency_phone", value);
                    this._selenium.Type("emergency_phone_comment", comment);
                    break;
                default:
                    throw new Exception("Invalid communication type for Phone");
            }

            // If we want to mark the number as preferred, click it
            if (preferred)
            {
                switch (communicationType)
                {
                    case GeneralEnumerations.CommunicationTypes.Mobile:
                        this._selenium.Click("//input[@value='mobile']");
                        break;
                    case GeneralEnumerations.CommunicationTypes.Home:
                        this._selenium.Click("//input[@value='home']");
                        break;
                    case GeneralEnumerations.CommunicationTypes.Work:
                        this._selenium.Click("//input[@value='work']");
                        break;
                    default:
                        throw new Exception("Invalid preferred communication type for Phone");
                }

            }

            // Submit
            this._selenium.ClickAndWaitForPageToLoad("//input[@value='Save changes']");
        }


        /// <summary>
        /// Edits the email communication value for an individuals based on the type specified.
        /// </summary>
        /// <param name="individualname">The name of the individual.</param>
        /// <param name="communicationType">The communication type you wish to edit.</param>
        /// <param name="value">The value of the communication type.</param>
        /// <param name="comment">The comment for this communication value.</param>
        /// <param name="preferred">Specifies if this value is prefererd.</param>
        public void People_FindAPerson_Individual_Edit_Communications_Email(string individualName, GeneralEnumerations.CommunicationTypes communicationType, string value, string comment, bool preferred)
        {
            // View the individual
            this.People_ViewIndividual(individualName);

            // Edit their communication values
            this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, 'communications/edit')]");

            switch (communicationType)
            {
                case GeneralEnumerations.CommunicationTypes.Personal:
                    this._selenium.Type("alternate_email", value);
                    this._selenium.Type("alternate_email_comment", comment);
                    break;
                case GeneralEnumerations.CommunicationTypes.Home:
                    this._selenium.Type("home_email", value);
                    this._selenium.Type("home_email_comment", comment);
                    break;
                default:
                    throw new Exception("Invalid communication type for Email");
            }

            // If we want to mark the number as preferred, click it
            if (preferred)
            {
                switch (communicationType)
                {
                    case GeneralEnumerations.CommunicationTypes.Personal:
                        this._selenium.Click("//input[@value='personal']");
                        break;
                    case GeneralEnumerations.CommunicationTypes.Home:
                        this._selenium.Click("email_two");
                        break;
                    default:
                        throw new Exception("Invalid preferred communication type for Phone");
                }
            }

            // Submit
            this._selenium.ClickAndWaitForPageToLoad("//input[@value='Save changes']");
        }

        /// <summary>
        /// Accesses the new HH/IND edit page through the gear options on the individal profile page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name</param>
        public void People_FindAPerson_Household_Edit_HouseholdIndividualValues_GearOptions(int churchId, string individualName)
        {
            // View the individual
            log.Debug("Enter 'People_FindAPerson_Household_Edit_HouseholdIndividualValues_GearOptions' method.");
            this.People_ViewIndividual(individualName);

            // Use the Gear icon to navigate to the HH/IND edit page
            log.Debug("Navigate to the HH/IND edit page through the Gear idon");
            this._selenium.Click(GeneralLinks.Options);
            this._selenium.ClickAndWaitForPageToLoad("link=Edit household");

            // Verify the edit HH/IND page appears
            log.Debug("Verify HH/IND edit page appears.");
            this._selenium.VerifyTextPresent("Household Members");

        }
        /// <summary>
        /// Navigates to the Individual Edit page from Gear
        /// </summary>
        /// <param name="individualName"></param>
        public void People_Individual_Edit_GearOption(string individualName)
        {
            //Navigate to individual page 
            this.People_ViewIndividual_WebDriver(individualName);

            //Click Edit in Gear DropDown
            this._driver.FindElementByXPath("//a[@class='gear_trigger gear_large']").Click();
            this._driver.FindElementByLinkText("Edit individual").Click();
            this._generalMethods.WaitForElement(By.Id(GeneralPeople.IndividualEdit.FirstName));
        }

        /// <summary>
        /// Accesses the new HH/IND edit page through the gear options on the individal profile page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name</param>
        public void People_FindAPerson_Household_Edit_HouseholdIndividualValues_GearOptions_WebDriver(int churchId, string individualName)
        {
            // View the individual
            log.Debug("Enter 'People_FindAPerson_Household_Edit_HouseholdIndividualValues_GearOptions' method.");
            this.People_ViewIndividual_WebDriver(individualName);

            // Use the Gear icon to navigate to the HH/IND edit page
            log.Debug("Navigate to the HH/IND edit page through the Gear idon");
            this._driver.FindElementByXPath("//a[@class='gear_trigger gear_large']").Click();
            this._driver.FindElementByLinkText("Edit household").Click();

            // Verify the edit HH/IND page appears
            log.Debug("Verify HH/IND edit page appears.");
            this._generalMethods.VerifyTextPresentWebDriver("Household Members");

        }


        /// <summary>
        /// Edits the Household/Individual values through the new HH Edit Full View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="householdPhone">The household phone number.</param>
        /// <param name="householdEmail">The household email address.</param>
        /// <param name="individualMobilePhone">The individual's mobile phone number.</param>
        /// <param name="individualWorkPhone">The individual's work phone number.</param>
        /// <param name="individualEmergencyPhone">The individual's emergency phone number.</param>
        /// <param name="individualAlternateEmail">The individual's alternate email address.</param>
        /// <param name="individualStatus">The individual's status.</param>
        /// <param name="individualSubStatus">The individual's sub status.</param>
        /// <param name="statusDate">The status date.</param>
        /// <param name="statusComment">The status comment.</param>
        /// <param name="individualHouseholdPosition">The individual's household position.</param>
        /// <param name="individualMaritalStatus">The individual's marital status.</param>
        public void People_FindAPerson_Household_Edit_HouseholdIndividualValues_FullView(int churchId, string individualName, string householdPhone, string householdEmail, string individualMobilePhone, string individualWorkPhone, string individualEmergencyPhone, string individualAlternateEmail, string individualStatus, string individualSubStatus, DateTime? statusDate, string statusComment, string individualHouseholdPosition, string individualMaritalStatus, string individualGender)
        {
            // Store culture for currency/date settings
            log.Debug("Enter 'People_FindAPerson_Household_Edit_HouseholdIndividualValues_FullView' method.");
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);
            // Store household ID
            var householdId = this._sql.People_Households_FetchID(churchId, individualId);

            // View the household
            log.Debug("View the selected HH.");
            this.People_ViewHousehold(individualName);

            // Click to edit the household
            log.Debug("Click to edit the HH/IND values.");
            //TO DO *REVISIT*
            // this._selenium.ClickAndWaitForPageToLoad("//div[@class='aside']/ul/li[2]/a");
            this._selenium.WaitForPageToLoad("5000");
            this._selenium.ClickAndWaitForPageToLoad("link=Edit household/individuals");
            this._selenium.WaitForPageToLoad("5000");

            // Update household phone and email
            log.Debug("Update HH phone/email");
            this._selenium.Type("home_phone", householdPhone);
            this._selenium.Type("home_email", householdEmail);

            // Update individual mobile, work, and emergency phone numbers
            log.Debug("Update IND phone/email");
            this._selenium.Type("Mobile_phone_" + individualId, individualMobilePhone);
            this._selenium.Type("Work_phone_" + individualId, individualWorkPhone);
            this._selenium.Type("Emergency_phone_" + individualId, individualEmergencyPhone);

            // Update alternate email address
            this._selenium.Type("Alternate_email_" + individualId, individualAlternateEmail);

            // Update individual status, sub status, status date, and status comment
            if (!string.IsNullOrEmpty(individualSubStatus))
            {
                log.Debug("Update IND status and sub status");
                this._selenium.Select("status_" + individualId, individualStatus);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Sub Status was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='sub_status_" + individualId + "']/option"));
                this._selenium.Select("sub_status_" + individualId, individualSubStatus);
            }
            else
            {
                log.Debug("Update IND status only");
                this._selenium.Select("status_" + individualId, individualStatus);
            }
            log.Debug("Update status date");
            if (statusDate != null)
            {
                if (statusDate.HasValue)
                {
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    var dateStatus = statusDate.Value.ToShortDateString();
                    this._selenium.Type("//*[@id='status_date_" + individualId + "']", dateStatus);
                }
            }
            else
            {
                this._selenium.Focus("//*[@id='status_date_" + individualId + "']");
                this._selenium.Highlight("//*[@id='status_date_" + individualId + "']");
                this._selenium.Type("//*[@id='status_date_" + individualId + "']", "");
            }
            this._selenium.Type("comment_" + individualId, statusComment);

            // Update individual housheold position and marital status
            log.Debug("Update HH position/marital status");
            this._selenium.Select("position_" + individualId, individualHouseholdPosition);
            this._selenium.Select("marital_status_" + individualId, individualMaritalStatus);

            // Save changes
            log.Debug("Save changes");
            this._selenium.ClickAndWaitForPageToLoad("//form[@id='edit_form']/p/input");

            // Unless there is validation on Status and/or HH Position, continue with save
            if (!this._selenium.IsElementPresent("error_message"))
            {

                // Verify changes were made
                log.Debug("Verify changes were made");
                // Housheold Phone
                if (!string.IsNullOrEmpty(householdPhone))
                {
                    this._selenium.VerifyTextPresent(householdPhone);
                }
                else
                {
                    this._selenium.VerifyElementNotPresent("//table[@id='household_communications_" + householdId + "']/tbody/tr/td/em[@class='mute'> Home </em]");
                }
                // Household Email
                //int count = (int) this._selenium.GetXpathCount("//table");
                //log.Debug("Tables: " + count);

                // ** REVISIT **
                try
                {
                    this._selenium.VerifyElementNotPresent("//table[@id='household_communications_" + householdId + "']/tbody/tr/td/em[@class='mute'> Email </em]");
                }
                catch (Exception e)
                {
                    TestLog.WriteLine("Email not first column ... checking second column");
                    this._selenium.VerifyElementNotPresent("//[@class='info']/tbody/tr(2)/td/em[@class='mute'> Email </em]");
                }

                if (!string.IsNullOrEmpty(householdEmail))
                {
                    this._selenium.VerifyTextPresent(householdEmail);
                }
                // Individual Mobile Phone
                if (!string.IsNullOrEmpty(individualMobilePhone))
                {
                    this._selenium.VerifyTextPresent(individualMobilePhone);
                }
                // else {
                //     this._selenium.VerifyElementNotPresent("//p[@class='bold text_black minimize'> FT HouseholdEdit </p] and em[@class='mute'> Mobile </em]");
                // }

            }

            // Validation
            else
            {
                if (string.IsNullOrEmpty(individualStatus))
                {
                    log.Debug("Validation on status");
                    this._selenium.VerifyTextPresent(string.Format("{0} requires a status", individualName));
                }
                if (string.IsNullOrEmpty(individualHouseholdPosition))
                {
                    log.Debug("Validation on Position");
                    this._selenium.VerifyTextPresent(string.Format("{0} requires a household position", individualName));
                }
            }
        }

        /// <summary>
        /// Edits the Household/Individual values through the new HH Edit Full View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="householdPhone">The household phone number.</param>
        /// <param name="householdEmail">The household email address.</param>
        /// <param name="individualMobilePhone">The individual's mobile phone number.</param>
        /// <param name="individualWorkPhone">The individual's work phone number.</param>
        /// <param name="individualEmergencyPhone">The individual's emergency phone number.</param>
        /// <param name="individualAlternateEmail">The individual's alternate email address.</param>
        /// <param name="individualStatus">The individual's status.</param>
        /// <param name="individualSubStatus">The individual's sub status.</param>
        /// <param name="statusDate">The status date.</param>
        /// <param name="statusComment">The status comment.</param>
        /// <param name="individualHouseholdPosition">The individual's household position.</param>
        /// <param name="individualMaritalStatus">The individual's marital status.</param>
        public void People_FindAPerson_Household_Edit_HouseholdIndividualValues_FullView_WebDriver(int churchId, string individualName, string householdPhone,
            string householdEmail, string individualMobilePhone, string individualWorkPhone, string individualEmergencyPhone,
            string individualAlternateEmail, string individualStatus, string individualSubStatus, DateTime? statusDate,
            string statusComment, string individualHouseholdPosition, string individualMaritalStatus, string individualGender)
        {
            // Store culture for currency/date settings
            log.Debug("Enter 'People_FindAPerson_Household_Edit_HouseholdIndividualValues_FullView' method.");
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);
            // Store household ID
            var householdId = this._sql.People_Households_FetchID(churchId, individualId);

            // View the household
            log.Debug("View the selected HH.");
            this.People_ViewHousehold_WebDriver(individualName);

            // Click to edit the household
            log.Debug("Click to edit the HH/IND values.");
            //TO DO *REVISIT*
            this._driver.FindElementByLinkText("Edit household/individuals").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Switch to tabbed view"));

            // Update household phone and email
            log.Debug("Update HH phone/email");
            this._driver.FindElementById("home_phone").Clear();
            this._driver.FindElementById("home_phone").SendKeys(householdPhone);
            this._driver.FindElementById("home_email").Clear();
            this._driver.FindElementById("home_email").SendKeys(householdEmail);

            // Update individual mobile, work, and emergency phone numbers
            log.Debug("Update IND phone/email");
            this._driver.FindElementById("Mobile_phone_" + individualId).Clear();
            this._driver.FindElementById("Mobile_phone_" + individualId).SendKeys(individualMobilePhone);
            this._driver.FindElementById("Work_phone_" + individualId).Clear();
            this._driver.FindElementById("Work_phone_" + individualId).SendKeys(individualWorkPhone);
            this._driver.FindElementById("Emergency_phone_" + individualId).Clear();
            this._driver.FindElementById("Emergency_phone_" + individualId).SendKeys(individualEmergencyPhone);

            // Update alternate email address
            this._driver.FindElementById("Alternate_email_" + individualId).Clear();
            this._driver.FindElementById("Alternate_email_" + individualId).SendKeys(individualAlternateEmail);

            // Update individual status, sub status, status date, and status comment
            if (!string.IsNullOrEmpty(individualSubStatus))
            {
                log.Debug("Update IND status and sub status");
                new SelectElement(this._driver.FindElementById("status_" + individualId)).SelectByText(individualStatus);
                this._generalMethods.WaitForElement(this._driver, By.XPath("//select[@id='sub_status_" + individualId + "']/option"));
                new SelectElement(this._driver.FindElementById("sub_status_" + individualId)).SelectByText(individualSubStatus);
            }
            else
            {
                log.Debug("Update IND status only");
                new SelectElement(this._driver.FindElementById("status_" + individualId)).SelectByText(individualStatus);
            }
            log.Debug("Update status date");
            if (statusDate != null)
            {
                if (statusDate.HasValue)
                {
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    var dateStatus = statusDate.Value.ToShortDateString();
                    this._driver.FindElementByXPath("//*[@id='status_date_" + individualId + "']").Clear();
                    this._driver.FindElementByXPath("//*[@id='status_date_" + individualId + "']").SendKeys(dateStatus);
                }
            }
            else
            {
                this._driver.FindElementByXPath("//*[@id='status_date_" + individualId + "']").Clear();
            }
            this._driver.FindElementById("comment_" + individualId).Clear();
            this._driver.FindElementById("comment_" + individualId).SendKeys(statusComment);

            // Update individual housheold position and marital status
            log.Debug("Update HH position/marital status");

            //this._selenium.Select("position_" + individualId, individualHouseholdPosition);
            new SelectElement(this._driver.FindElementById("position_" + individualId)).SelectByText(individualHouseholdPosition);

            //this._selenium.Select("marital_status_" + individualId, individualMaritalStatus);
            if (individualMaritalStatus != null)
                new SelectElement(this._driver.FindElementById("marital_status_" + individualId)).SelectByText(individualMaritalStatus);

            //this._selenium.Select("gender_" + individualId, individualGender);
            if (individualGender != null)
                new SelectElement(this._driver.FindElementById("gender_" + individualId)).SelectByText(individualGender);

            // Save changes
            log.Debug("Save changes");
            this._driver.FindElementByXPath("//form[@id='edit_form']/p/input").Click();

            // Unless there is validation on Status and/or HH Position, continue with save
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {

                // Verify changes were made
                log.Debug("Verify changes were made");
                // Housheold Phone
                if (!string.IsNullOrEmpty(householdPhone))
                {
                    this._generalMethods.VerifyTextPresentWebDriver(householdPhone);
                }
                else
                {
                    this._generalMethods.VerifyElementNotPresentWebDriver(By.XPath("//table[@id='household_communications_" + householdId + "']/tbody/tr/td/em[@class='mute'> Home </em]"));
                }
                // Household Email
                //int count = (int) this._selenium.GetXpathCount("//table");
                //log.Debug("Tables: " + count);

                // ** REVISIT **
                try
                {
                    this._generalMethods.VerifyElementNotPresentWebDriver(By.XPath("//table[@id='household_communications_" + householdId + "']/tbody/tr/td/em[@class='mute'> Email </em]"));
                }
                catch (Exception e)
                {
                    TestLog.WriteLine("Email not first column ... checking second column");
                    this._generalMethods.VerifyElementNotPresentWebDriver(By.XPath("//table[@class='info']/tbody/tr(2)/td/em[@class='mute'> Email </em]"));
                }

                if (!string.IsNullOrEmpty(householdEmail))
                {
                    this._generalMethods.VerifyTextPresentWebDriver(householdEmail);
                }
                // Individual Mobile Phone
                if (!string.IsNullOrEmpty(individualMobilePhone))
                {
                    this._generalMethods.VerifyTextPresentWebDriver(individualMobilePhone);
                }
                // else {
                //     this._selenium.VerifyElementNotPresent("//p[@class='bold text_black minimize'> FT HouseholdEdit </p] and em[@class='mute'> Mobile </em]");
                // }

            }

            // Validation
            else
            {
                if (string.IsNullOrEmpty(individualStatus))
                {
                    log.Debug("Validation on status");
                    this._generalMethods.VerifyTextPresentWebDriver(string.Format("{0} requires a status", individualName));
                }

                if (string.IsNullOrEmpty(individualHouseholdPosition))
                {
                    log.Debug("Validation on Position");
                    this._generalMethods.VerifyTextPresentWebDriver(string.Format("{0} requires a household position", individualName));
                }
            }
        }

        /// <summary>
        /// Edits the Household/Individual communication values through the new HH Edit Tabbed View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="householdPhone">The household phone number.</param>
        /// <param name="householdEmail">The household email address.</param>
        /// <param name="individualMobilePhone">The individual's mobile phone number.</param>
        /// <param name="individualWorkPhone">The individual's work phone number.</param>
        /// <param name="individualEmergencyPhone">The individual's emergency phone number.</param>
        /// <param name="individualAlternateEmail">The individual's alternate email address.</param>
        public void People_FindAPerson_Household_Edit_HouseholdIndividualCommunications_TabbedView(int churchId, string individualName, string householdPhone, string householdEmail, string individualMobilePhone, string individualWorkPhone, string individualEmergencyPhone, string individualAlternateEmail)
        {
            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);

            // View the household
            this.People_ViewHousehold(individualName);

            // Click to edit the household
            this._selenium.ClickAndWaitForPageToLoad("//div[@class='aside']/ul/li[2]/a");
            this._selenium.WaitForPageToLoad("5000");

            // Click to switch to tabbed view
            this._selenium.ClickAndWaitForPageToLoad("link=Switch to tabbed view");

            // Update household phone and email
            this._selenium.Type("home_phone", householdPhone);
            this._selenium.Type("home_email", householdEmail);

            // Update individual mobile, work, and emergency phone numbers
            this._selenium.Type("Mobile_phone_" + individualId, individualMobilePhone);
            this._selenium.Type("Work_phone_" + individualId, individualWorkPhone);
            this._selenium.Type("Emergency_phone_" + individualId, individualEmergencyPhone);

            // Update alternate email address
            this._selenium.Type("Alternate_email_" + individualId, individualAlternateEmail);

            // Save changes
            this._selenium.ClickAndWaitForPageToLoad("//form[@id='edit_form']/p/input");

            // Verify changes were made

        }

        /// <summary>
        /// Edits the Household/Individual communication values through the new HH Edit Tabbed View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="householdPhone">The household phone number.</param>
        /// <param name="householdEmail">The household email address.</param>
        /// <param name="individualMobilePhone">The individual's mobile phone number.</param>
        /// <param name="individualWorkPhone">The individual's work phone number.</param>
        /// <param name="individualEmergencyPhone">The individual's emergency phone number.</param>
        /// <param name="individualAlternateEmail">The individual's alternate email address.</param>
        public void People_FindAPerson_Household_Edit_HouseholdIndividualCommunications_TabbedView_WebDriver(int churchId, string individualName, string householdPhone, string householdEmail, string individualMobilePhone, string individualWorkPhone, string individualEmergencyPhone, string individualAlternateEmail)
        {
            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);

            // View the household
            this.People_ViewHousehold_WebDriver(individualName);

            // Click to edit the household
            log.Debug("Click to edit the HH/IND values.");
            //TO DO *REVISIT*
            this._driver.FindElementByLinkText("Edit household/individuals").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Switch to tabbed view"));

            // Click to switch to tabbed view
            this._driver.FindElementByLinkText("Switch to tabbed view").Click();

            // Update household phone and email
            log.Debug("Update HH phone/email");
            this._driver.FindElementById("home_phone").Clear();
            this._driver.FindElementById("home_phone").SendKeys(householdPhone);
            this._driver.FindElementById("home_email").Clear();
            this._driver.FindElementById("home_email").SendKeys(householdEmail);

            // Update individual mobile, work, and emergency phone numbers
            log.Debug("Update IND phone/email");
            this._driver.FindElementById("Mobile_phone_" + individualId).Clear();
            this._driver.FindElementById("Mobile_phone_" + individualId).SendKeys(individualMobilePhone);
            this._driver.FindElementById("Work_phone_" + individualId).Clear();
            this._driver.FindElementById("Work_phone_" + individualId).SendKeys(individualWorkPhone);
            this._driver.FindElementById("Emergency_phone_" + individualId).Clear();
            this._driver.FindElementById("Emergency_phone_" + individualId).SendKeys(individualEmergencyPhone);

            // Update alternate email address
            this._driver.FindElementById("Alternate_email_" + individualId).Clear();
            this._driver.FindElementById("Alternate_email_" + individualId).SendKeys(individualAlternateEmail);

            // Save changes
            this._driver.FindElementByXPath("//form[@id='edit_form']/p/input").Click();
            //this._generalMethods.WaitForElement(By.XPath("//div[@id='success_wrapper'][style='overflow: visible']"));

            // Verify changes were made

        }


        /// <summary>
        /// Edits the Individual statuses through the new HH Edit Tabbed View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="individualStatus">The individual's status.</param>
        /// <param name="individualSubStatus">The individual's sub status.</param>
        /// <param name="statusDate">The status date.</param>
        /// <param name="statusComment">The status comment.</param>
        public void People_FindAPerson_Household_Edit_IndividualStatus_TabbedView(int churchId, string individualName, string individualStatus, string individualSubStatus, DateTime? statusDate, string statusComment)
        {
            log.Debug("Enter 'People_FindAPerson_Household_Edit_IndividualStatus_TabbedView' method");
            // Store culture for date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);

            // View the household
            log.Debug("View the HH");
            this.People_ViewHousehold(individualName);

            // Click to edit the household
            log.Debug("Edit the HH");
            this._selenium.ClickAndWaitForPageToLoad("//div[@class='aside']/ul/li[2]/a");
            this._selenium.WaitForPageToLoad("5000");

            // Click to switch to tabbed view
            log.Debug("Switch to tabbed view");
            this._selenium.ClickAndWaitForPageToLoad("link=Switch to tabbed view");

            // Click on the Stats/Sub Status tab
            log.Debug("Click on the Status/Sub Status tab");
            this._selenium.Click("//ul[@class='criteria_tabs uiTabs']/li[2]/a");

            // Update individual status, sub status, status date, and status comment
            if (!string.IsNullOrEmpty(individualSubStatus))
            {
                log.Debug("Update IND status and sub status");
                this._selenium.Select("status_" + individualId, individualStatus);
                Retry.WithPolling(500).WithTimeout(20000).WithFailureMessage("Sub Status was not present")
                    .Until(() => this._selenium.IsElementPresent("//select[@id='sub_status_" + individualId + "']/option"));
                this._selenium.Select("sub_status_" + individualId, individualSubStatus);
            }
            else
            {
                log.Debug("Update IND status only");
                this._selenium.Select("status_" + individualId, individualStatus);
            }
            log.Debug("Update status date");
            if (statusDate != null)
            {
                if (statusDate.HasValue)
                {
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    var dateStatus = statusDate.Value.ToShortDateString();
                    this._selenium.Type("//*[@id='status_date_" + individualId + "']", dateStatus);
                }
            }
            else
            {
                this._selenium.Focus("//*[@id='status_date_" + individualId + "']");
                this._selenium.Highlight("//*[@id='status_date_" + individualId + "']");
                this._selenium.Type("//*[@id='status_date_" + individualId + "']", "");
            }
            this._selenium.Type("comment_" + individualId, statusComment);

            // Save changes
            log.Debug("Save changes");
            this._selenium.ClickAndWaitForPageToLoad("//form[@id='edit_form']/p/input");

            // Unless there is validation on Status, continue with save
            if (!this._selenium.IsVisible("error_message"))
            {
                // Tab back to HH view
                log.Debug("Tab back to HH view");
                this._selenium.ClickAndWaitForPageToLoad("tab_back");

                // Verify changes were made
                log.Debug("Verify changes were made");
                // Status
                this._selenium.VerifyTextPresent(individualStatus);
                // Sub Status
                if (!string.IsNullOrEmpty(individualSubStatus))
                {
                    this._selenium.VerifyTextPresent(individualSubStatus);
                }
                // Status Date
                if (statusDate.HasValue)
                {
                    this._selenium.ClickAndWaitForPageToLoad("//table[@class='grid']/tbody/tr/td[2]/a");
                    this._selenium.VerifyTextPresent(statusDate.Value.ToShortDateString()); //M/dd/yyyy
                    this._selenium.ClickAndWaitForPageToLoad("link=View the household");
                }
                // Status Comment
                if (!string.IsNullOrEmpty(statusComment))
                {
                    this._selenium.ClickAndWaitForPageToLoad("//table[@class='grid']/tbody/tr/td[2]/a");
                    this._selenium.VerifyTextPresent(statusComment);
                }
            }

            // Validation
            else
            {
                log.Debug("Validation on status");
                this._selenium.VerifyTextPresent(string.Format("{0} requires a status", individualName));
            }

        }

        /// <summary>
        /// Edits the Individual statuses through the new HH Edit Tabbed View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="individualStatus">The individual's status.</param>
        /// <param name="individualSubStatus">The individual's sub status.</param>
        /// <param name="statusDate">The status date.</param>
        /// <param name="statusComment">The status comment.</param>
        public void People_FindAPerson_Household_Edit_IndividualStatus_TabbedView_WebDriver(int churchId, string individualName, string individualStatus, string individualSubStatus, DateTime? statusDate, string statusComment)
        {
            log.Debug("Enter 'People_FindAPerson_Household_Edit_IndividualStatus_TabbedView' method");
            // Store culture for date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);

            // View the household
            this.People_ViewHousehold_WebDriver(individualName);

            // Click to edit the household
            log.Debug("Click to edit the HH/IND values.");
            //TO DO *REVISIT*
            this._driver.FindElementByLinkText("Edit household/individuals").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Switch to tabbed view"));

            // Click to switch to tabbed view
            this._driver.FindElementByLinkText("Switch to tabbed view").Click();

            // Click on the Stats/Sub Status tab
            log.Debug("Click on the Status/Sub Status tab");
            this._driver.FindElementByXPath("//ul[@class='criteria_tabs uiTabs']/li[2]/a").Click();

            // Update individual status, sub status, status date, and status comment
            if (!string.IsNullOrEmpty(individualSubStatus))
            {
                log.Debug("Update IND status and sub status");
                new SelectElement(this._driver.FindElementById("status_" + individualId)).SelectByText(individualStatus);
                this._generalMethods.WaitForElement(this._driver, By.XPath("//select[@id='sub_status_" + individualId + "']/option"));
                new SelectElement(this._driver.FindElementById("sub_status_" + individualId)).SelectByText(individualSubStatus);
            }
            else
            {
                log.Debug("Update IND status only");
                new SelectElement(this._driver.FindElementById("status_" + individualId)).SelectByText(individualStatus);
            }
            log.Debug("Update status date");
            if (statusDate != null)
            {
                if (statusDate.HasValue)
                {
                    System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                    var dateStatus = statusDate.Value.ToShortDateString();
                    this._driver.FindElementByXPath("//*[@id='status_date_" + individualId + "']").Clear();
                    this._driver.FindElementByXPath("//*[@id='status_date_" + individualId + "']").SendKeys(dateStatus);
                }
            }
            else
            {
                this._driver.FindElementByXPath("//*[@id='status_date_" + individualId + "']").Clear();
            }
            this._driver.FindElementById("comment_" + individualId).Clear();
            this._driver.FindElementById("comment_" + individualId).SendKeys(statusComment);

            // Save changes
            this._driver.FindElementByXPath("//form[@id='edit_form']/p/input").Click();
            //this._generalMethods.WaitForElement(By.XPath("//div[@id='success_wrapper'][style='overflow: visible']"));

            // Unless there is validation on Status, continue with save
            if (!this._generalMethods.IsElementPresentWebDriver(By.XPath("//dl[@id='error_message'][style='display: none']")))
            {
                // Tab back to HH view
                log.Debug("Tab back to HH view");
                this._driver.FindElementById("tab_back").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Edit household/individuals"));

                // Verify changes were made
                log.Debug("Verify changes were made");
                // Status
                this._generalMethods.VerifyTextPresentWebDriver(individualStatus);

                // Sub Status
                if (!string.IsNullOrEmpty(individualSubStatus))
                {
                    this._generalMethods.VerifyTextPresentWebDriver(individualSubStatus);
                }

                // Click to view the individual detail
                this._driver.FindElementByXPath("//table[@class='grid']/tbody/tr/td[2]/a").Click();                
                this._generalMethods.WaitForElement(By.Id("household_individual_name"));

                // Status Date
                if (statusDate.HasValue)
                {
                    this._generalMethods.VerifyTextPresentWebDriver(statusDate.Value.ToString("M/dd/yyyy"));
                }
                else
                {
                    this._driver.FindElementByLinkText("Household members").Click();
                    this._generalMethods.IsTextPresentWebDriver("(New)");
                }
                // Status Comment
                if (!string.IsNullOrEmpty(statusComment))
                {
                    this._generalMethods.VerifyTextPresentWebDriver(statusComment);
                }
            }

            // Validation
            else
            {
                log.Debug("Validation on status");
                this._generalMethods.VerifyTextPresentWebDriver(string.Format("{0} requires a status", individualName));
            }

        }


        /// <summary>
        /// Edits the Individual position and marital status through the new HH Edit Tabbed View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="individualHouseholdPosition">The individual's household position.</param>
        /// <param name="individualMaritalStatus">The individual's marital status.</param>
        public void People_FindAPerson_Household_Edit_PositionMaritalStatus_TabbedView(int churchId, string individualName, string individualHouseholdPosition, string individualMaritalStatus, string individualGender)
        {
            log.Debug("Enter 'People_FindAPerson_Household_Edit_PositionMaritalStatus_TabbedView' method");
            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);

            // View the household
            log.Debug("View the HH");
            this.People_ViewHousehold(individualName);

            // Click to edit the household
            log.Debug("Edit the HH");
            //this._selenium.ClickAndWaitForPageToLoad("link=Edit household/individuals");
            this._selenium.ClickAndWaitForPageToLoad("//div[@class='aside']/ul/li[2]/a");
            this._selenium.WaitForPageToLoad("5000");

            // Click to switch to tabbed view
            log.Debug("Switch to tabbed view");
            this._selenium.ClickAndWaitForPageToLoad("link=Switch to tabbed view");

            // Click on the Position/Marital Status tab
            log.Debug("Click on the Position/Marital Status tab");
            this._selenium.Click("//ul[@class='criteria_tabs uiTabs']/li[3]/a");

            // Update individual housheold position and marital status
            log.Debug("Update household position and marital status");
            this._selenium.Select("position_" + individualId, individualHouseholdPosition);
            this._selenium.Select("marital_status_" + individualId, individualMaritalStatus);
            this._selenium.Select("gender_" + individualId, individualGender);

            // Save changes
            log.Debug("Save changes");
            this._selenium.ClickAndWaitForPageToLoad("//form[@id='edit_form']/p/input");

            // Unless there is validation on Position, continue with save
            if (!this._selenium.IsVisible("error_message"))
            {
                // Tab back to HH view
                log.Debug("Tab back to HH view");
                this._selenium.ClickAndWaitForPageToLoad("tab_back");

                // Verify changes were made
                log.Debug("Verify changes were saved");
                this._selenium.ClickAndWaitForPageToLoad("//table[@class='grid']/tbody/tr/td[2]/a");
                this._selenium.VerifyTextPresent(individualHouseholdPosition);
                this._selenium.VerifyTextPresent(individualMaritalStatus);
            }

            // Validation
            else
            {
                log.Debug("Validation on Position");
                this._selenium.VerifyTextPresent(string.Format("{0} requires a household position", individualName));
            }

        }

        //Suchitra changes to Gender drop down in Tabbed View */

        public void People_FindAPerson_Household_Edit_PositionGender_TabbedView(int churchId, string individualName, string individualHouseholdPosition, string individualMaritalStatus, string individualGender = null)
        {
            log.Debug("Enter 'People_FindAPerson_Household_Edit_PositionGender_TabbedView' method");
            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);

            // View the household
            log.Debug("View the HH");
            this.People_ViewHousehold(individualName);

            // Click to edit the household
            log.Debug("Edit the HH");
            this._selenium.ClickAndWaitForPageToLoad("//div[@class='aside']/ul/li[2]/a");
            this._selenium.WaitForPageToLoad("5000");

            // Click to switch to tabbed view
            log.Debug("Switch to tabbed view");
            this._selenium.ClickAndWaitForPageToLoad("link=Switch to tabbed view");

            // Click on the Position/Marital Status tab
            log.Debug("Click on the Position/Marital Status tab");
            this._selenium.Click("//ul[@class='criteria_tabs']/li[3]/a");


            // Update individual housheold position, marital status and Gender
            log.Debug("Update household position and marital status");
            this._selenium.Select("position_" + individualId, individualHouseholdPosition);
            this._selenium.Select("marital_status_" + individualId, individualMaritalStatus);
            this._selenium.Select("gender_" + individualId, individualGender);

            // Save changes
            log.Debug("Save changes");
            this._selenium.ClickAndWaitForPageToLoad("//form[@id='edit_form']/p/input");

            // Unless there is validation on Position, continue with save
            if (!this._selenium.IsVisible("error_message"))
            {
                // Tab back to HH view
                log.Debug("Tab back to HH view");
                this._selenium.ClickAndWaitForPageToLoad("tab_back");

                // Verify changes were made
                log.Debug("Verify changes were saved");
                this._selenium.ClickAndWaitForPageToLoad("//table[@class='grid']/tbody/tr/td[2]/a");
                this._selenium.VerifyTextPresent(individualHouseholdPosition);
                this._selenium.VerifyTextPresent(individualMaritalStatus);
                this._selenium.VerifyTextPresent(individualGender);
            }

            // Validation
            else
            {
                log.Debug("Validation on Position");
                this._selenium.VerifyTextPresent(string.Format("{0} requires a household position", individualName));
            }

        }

        /// <summary>
        /// Edits the Individual position and marital status through the new HH Edit Tabbed View page.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="individualName">The individual's name.</param>
        /// <param name="individualHouseholdPosition">The individual's household position.</param>
        /// <param name="individualMaritalStatus">The individual's marital status.</param>
        public void People_FindAPerson_Household_Edit_PositionMaritalStatus_TabbedView_WebDriver(int churchId, string individualName, string individualHouseholdPosition, string individualMaritalStatus, string individualGender)
        {
            log.Debug("Enter 'People_FindAPerson_Household_Edit_PositionMaritalStatus_TabbedView' method");
            // Store the individual ID
            var individualId = this._sql.People_Individuals_FetchID(churchId, individualName);

            // View the household
            log.Debug("View the HH");
            this.People_ViewHousehold_WebDriver(individualName);

            // Click to edit the household
            log.Debug("Click to edit the HH/IND values.");
            //TO DO *REVISIT*
            this._driver.FindElementByLinkText("Edit household/individuals").Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("Switch to tabbed view"));

            // Click to switch to tabbed view
            this._driver.FindElementByLinkText("Switch to tabbed view").Click();

            // Click on the Position/Marital Status tab
            log.Debug("Click on the Position/Marital Status tab");
            this._driver.FindElementByXPath("//ul[@class='criteria_tabs uiTabs']/li[3]/a").Click();

            // Update individual housheold position and marital status
            log.Debug("Update HH position/marital status");
            new SelectElement(this._driver.FindElementById("position_" + individualId)).SelectByText(individualHouseholdPosition);

            if (!string.IsNullOrEmpty(individualMaritalStatus))
                new SelectElement(this._driver.FindElementById("marital_status_" + individualId)).SelectByText(individualMaritalStatus);


            if (!string.IsNullOrEmpty(individualGender))
                new SelectElement(this._driver.FindElementById("gender_" + individualId)).SelectByText(individualGender);


            // Save changes
            this._driver.FindElementByXPath("//form[@id='edit_form']/p/input").Click();

            // Unless there is validation on Status, continue with save
            if (!this._generalMethods.IsElementPresentWebDriver(By.XPath("//dl[@id='error_message'][style='display: none']")))
            //if (!this._generalMethods.IsElementPresentWebDriver(By.Id("error_message")))
            {
                // Tab back to HH view
                log.Debug("Tab back to HH view");
                //this._generalMethods.WaitForElement(By.XPath("//div[@id='success_wrapper'][style='overflow: visible']"));
                this._driver.FindElementById("tab_back").Click();
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Edit household/individuals"));

                // Verify changes were made
                log.Debug("Verify changes were saved");
                this._driver.FindElementByXPath("//table[@class='grid']/tbody/tr/td[2]/a").Click();
                this._generalMethods.VerifyTextPresentWebDriver(individualHouseholdPosition);
                if (!string.IsNullOrEmpty(individualMaritalStatus))
                    this._generalMethods.VerifyTextPresentWebDriver(individualMaritalStatus);
                if (!string.IsNullOrEmpty(individualGender))
                    this._generalMethods.VerifyTextPresentWebDriver(individualGender);
            }
            // Validation
            else
            {
                log.Debug("Validation on Position");
                this._generalMethods.VerifyTextPresentWebDriver(string.Format("{0} requires a household position", individualName));
            }

        }


        /// <summary>
        /// Adds/Edits the communication values for a household.
        /// </summary>
        /// <param name="individualName">The individual's household.</param>
        /// <param name="householdPhone">The value for the household phone.</param>
        /// <param name="householdPhoneComment">The comment for the phone.</param>
        /// <param name="householdEmail">The value for the household email.</param>
        /// <param name="householdEmailComment">The comment for the email.</param>
        /// <param name="supplementalCommunicationValue">The value of the supplemental communication.</param>
        /// <param name="supplementalCommunicationComment">The comment for the supplemental communication.</param>
        public void People_FindAPerson_Household_Edit_Communications(string individualName, string householdPhone, string householdPhoneComment, string householdEmail, string householdEmailComment, string supplementalCommunicationValue, string supplementalCommunicationComment)
        {
            // View the household
            this.People_ViewHousehold(individualName);

            // Edit communications
            this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/communications/edit')]");

            // Store the old comm values
            // var currentHouseholdPhone = this._selenium.GetValue("home_phone");
            // var currentHouseholdEmail = this._selenium.GetValue("home_email");

            // Specify the phone information
            this._selenium.Type("home_phone", householdPhone);
            this._selenium.Type("home_phone_comment", householdPhoneComment);

            // Specify the email information
            this._selenium.Type("home_email", householdEmail);
            this._selenium.Type("home_email_comment", householdEmailComment);

            // Specify any supplemental communication values
            this._selenium.Click("add_extra_comm_line");
            this._selenium.Type("number", supplementalCommunicationValue);
            this._selenium.Type("comment", supplementalCommunicationComment);

            // Submit
            this._selenium.ClickAndWaitForPageToLoad("btn");

            // Verify the updated home phone
            // if (!string.IsNullOrEmpty(householdPhone)) {
            // this._selenium.VerifyTextPresent(householdPhone);
            // }
            // else {
            Assert.IsFalse(!this._selenium.IsTextPresent(householdPhone), "Home phone was not saved.");
            // }

            // Verify the updated home email
            // if (!string.IsNullOrEmpty(householdEmail)) {
            // this._selenium.VerifyTextPresent(householdEmail);
            // }
            // else {
            Assert.IsFalse(!this._selenium.IsTextPresent(householdEmail), "Home email was not saved.");
            // }

            // Verify supplemental values if added
            // if (!string.IsNullOrEmpty(supplementalCommunicationValue)) {
            // this._selenium.VerifyTextPresent(supplementalCommunicationValue);
            // }
            // else {
            Assert.IsFalse(!this._selenium.IsTextPresent(supplementalCommunicationValue), "The supplemental value was not saved.");
            // }
        }

        /// <summary>
        /// Adds a requirement to an individual through the Individual View page
        /// </summary>
        /// <param name="fullName">The name of the individual</param>
        /// <param name="requirement">The name of the requirement</param>
        /// <param name="status">The status of the requirement</param>
        /// <param name="date">The date of the requirement</param>
        /// <param name="portalUser">The name of the portal user</param>
        /// <param name="isLinked">Is portal user linked (true/false)</param>
        public void People_FindAPerson_Individual_Add_Requirement(string fullName, string requirement, string status, string date, string portalUser, [Optional, DefaultParameterValue(true)] bool isLinked)
        {
            // Search/view individual
            this.People_ViewIndividual(fullName);

            // Click the plus sign to add a requirement
            this._selenium.ClickAndWaitForPageToLoad("//img/parent::a[contains(@href, '/people/Requirements/New.aspx')]");

            // Select the requirement
            this._selenium.Select("requirement_id", requirement);

            // Select status
            this._selenium.Select("requirement_status", status);

            // Enter date
            this._selenium.Type("requirement_date", date);

            // Select portal user
            if (isLinked == false)
            {
                Assert.IsFalse(this._selenium.GetSelectedIds("IndividualRequirement[UserID]").Contains<string>("Unlinkedtester, FT"));

                // Cancel out of page
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            else
            {
                this._selenium.Select("IndividualRequirement[UserID]", portalUser);
            }

            // Click Save this requirement
            this._selenium.ClickAndWaitForPageToLoad("submitQuery");

        }

        /// <summary>
        /// Deletes a requirement to an individual through the Individual View page
        /// </summary>
        /// <param name="fullName">The name of the individual</param>
        /// <param name="requirement">The name of the requirement</param>
        public void People_FindAPerson_Individual_Delete_Requirement(string fullName, string requirement)
        {
            // Search/view individual
            this.People_ViewIndividual(fullName);

            // Verify requirement is present
            var row = this._generalMethods.GetTableRowNumber(TableIds.People_Individual_Requirements, requirement, "Background Checks") + 1;
            Assert.AreEqual(requirement, this._selenium.GetText(string.Format("//table[@id='ind_requirements']/tbody/tr[2]/td[1]", row)), "The requirement did not match.");

            // Delete requirement
            this._selenium.ClickAndWaitForPageToLoad("//table[@id='ind_requirements']/tbody/tr[2]/td[6]/form/input[3]");

            // Confirm in pop-up
            this._selenium.GetConfirmation();
            this._selenium.ChooseOkOnNextConfirmation();

        }
        #endregion People Search

        #region Mass Action
        /// <summary>
        /// This method performs a mass action.
        /// </summary>
        /// <param name="individuals">Individuals to perform the action against.</param>
        /// <param name="action">The action to perform.</param>
        /// <param name="actionName">The name of the mass action.</param>
        /// <param name="actionParameters">The parameters for the mass action.</param>
        public void People_MassAction(string[] individuals, string action, string actionName, System.Collections.Hashtable actionParameters)
        {
            string tableId = this._driver.FindElementsById(TableIds.Portal.People_Individuals).Count > 0 ? TableIds.Portal.People_Individuals : TableIds.Portal.Groups_Group_Members;
            int individualsCount = individuals.Length;

            DateTime currentTimeName = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            TestLog.WriteLine("Mass Action Current Time: " + currentTimeName.ToString("M/d/yyyy"));
            actionName += " " + currentTimeName.ToString("M/d/yyyy") + " " + currentTimeName.ToShortTimeString();
            TestLog.WriteLine("Mass Action Name: " + actionName);

            // Select the individuals
            foreach (string individual in individuals)
            {
                int row = this._generalMethods.GetTableRowNumberWebDriver(tableId, individual, "D.O.B.", null);
                IWebElement tableInd = this._driver.FindElementById(tableId);
                tableInd.FindElement(By.XPath(string.Format("tbody/tr[{0}]/td[1]/input", row + 1))).Click();
            }

            // Select the gear, mass action
            this._driver.FindElementByLinkText("Actions").Click();
            this._driver.FindElementByLinkText("Perform a mass action").Click();

            // Verify the number of individuals effected is correct
            string individualCheck = individualsCount == 1 ? string.Format("You have selected {0} person", individualsCount.ToString()) : string.Format("You have selected {0} people", individualsCount.ToString());
            Assert.AreEqual(individualCheck, this._driver.FindElementByXPath("//div[@class='section']/h2").Text);

            // Populate the fields
            new SelectElement(this._driver.FindElementById("MassActionType")).SelectByText(action);
            this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(5000));
            IWebElement myDynamicElement = this._driver.FindElementById("MassActionName");

            if (!string.IsNullOrEmpty(actionName))
            {
                this._driver.FindElementById("MassActionName").Clear();
                this._driver.FindElementById("MassActionName").SendKeys(actionName);
            }

            switch (action)
            {
                case "Change individual status":
                    if (actionParameters.ContainsKey("Status"))
                    {
                        this._driver.FindElementById("chkStatus").Click();
                        this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(5000));
                        IWebElement statusSelectList = this._driver.FindElementById("Status");
                        new SelectElement(statusSelectList).SelectByText(actionParameters["Status"].ToString());

                        if (actionParameters.ContainsKey("Sub status"))
                        {
                            new SelectElement(this._driver.FindElementById("SubStatus")).SelectByText(actionParameters["Sub status"].ToString());
                        }
                    }
                    if (actionParameters.ContainsKey("Status date"))
                    {
                        this._driver.FindElementById("chkStatusDate").Click();
                        this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(5000));
                        IWebElement chkStatusDate = this._driver.FindElementById("chkStatusDate");
                        chkStatusDate.SendKeys(actionParameters["Status date"].ToString());
                    }
                    if (actionParameters.ContainsKey("Status comment"))
                    {
                        this._driver.FindElementById("chkStatusComment").Click();
                        this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(2500));
                        IWebElement chkStatusComment = this._driver.FindElementById("StatusComment");

                        if (actionParameters["Status comment"].ToString() != "Delete")
                        {
                            this._driver.FindElementById("rdbtnReplaceStatusComment").Click();
                            this._driver.FindElementById("StatusComment").SendKeys(actionParameters["Status comment"].ToString());
                        }
                        else
                        {
                            this._driver.FindElementById("rdbtnOverwriteStatusComment").Click();
                        }
                    }
                    break;
                case "Create a participant assignment":
                    if (actionParameters.ContainsKey("Activity"))
                    {
                        new SelectElement(this._driver.FindElementById("Activity")).SelectByText(actionParameters["Activity"].ToString());
                    }
                    if (actionParameters.ContainsKey("Schedule/Instance"))
                    {
                        if ((bool)actionParameters["Schedule/Instance"])
                        {
                            this._driver.FindElementById("chkSchedule").Click();
                        }
                    }
                    if (actionParameters.ContainsKey("RLC"))
                    {
                        if ((bool)actionParameters["RLC"])
                        {
                            this._driver.FindElementById("chkActivityGroup").Click();
                        }
                    }
                    if (actionParameters.ContainsKey("Breakout group"))
                    {
                        if ((bool)actionParameters["Breakout group"])
                        {
                            this._driver.FindElementById("chkBreakout").Click();
                        }
                    }
                    break;
                case "Add an attribute":
                    if (actionParameters.ContainsKey("Attribute Group"))
                    {
                        new SelectElement(this._driver.FindElementById("ddlAttributeGroup")).SelectByText(actionParameters["Attribute Group"].ToString());
                        this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(5000));
                        IWebElement ddlAttribute = this._driver.FindElementById("ddlAttribute").FindElement(By.XPath(string.Format("option[text()='{0}']", actionParameters["Attribute"].ToString())));
                    }
                    if (actionParameters.ContainsKey("Attribute"))
                    {
                        new SelectElement(this._driver.FindElementById("ddlAttribute")).SelectByText(actionParameters["Attribute"].ToString());
                        this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromMilliseconds(2500));
                        IWebElement ddlAttribute = this._driver.FindElementByXPath("//select[@id='ddlAttribute' and not(@disabled)]");
                    }
                    if (actionParameters.ContainsKey("Staff"))
                    {
                        new SelectElement(this._driver.FindElementByXPath("//select[@id='individual_attribute_staffPastor']")).SelectByText(actionParameters["Staff"].ToString());
                    }
                    if (actionParameters.ContainsKey("Start Date"))
                    {
                        this._driver.FindElementById("individual_attribute_start_date").SendKeys(actionParameters["Start Date"].ToString());
                    }
                    if (actionParameters.ContainsKey("End Date"))
                    {
                        this._driver.FindElementById("individual_attribute_end_date").SendKeys(actionParameters["End Date"].ToString());
                    }
                    if (actionParameters.ContainsKey("Comment"))
                    {
                        this._driver.FindElementById("individual_attribute_comment_txt").SendKeys(actionParameters["Comment"].ToString());
                    }
                    break;
                case "Change demographics":
                    if (actionParameters.ContainsKey("Gender"))
                    {
                        new SelectElement(this._driver.FindElementById("gender")).SelectByText(actionParameters["Gender"].ToString());
                    }
                    if (actionParameters.ContainsKey("Household position"))
                    {
                        new SelectElement(this._driver.FindElementById("household_member_type")).SelectByText(actionParameters["Household position"].ToString());
                    }
                    if (actionParameters.ContainsKey("Marital status"))
                    {
                        new SelectElement(this._driver.FindElementById("marital_status")).SelectByText(actionParameters["Marital status"].ToString());
                    }
                    if (actionParameters.ContainsKey("School"))
                    {
                        new SelectElement(this._driver.FindElementById("school")).SelectByText(actionParameters["School"].ToString());
                    }
                    break;
            }
            this._driver.FindElementByXPath("//input[@value='Review and save']").Click();

            // Verify the changes before submitting the mass action
            Assert.AreEqual(string.Format("The following changes will effect {0} people.", individualsCount), this._driver.FindElementByXPath("//div[@class='section']/h2").Text);
            Assert.AreEqual(actionName, this._driver.FindElementByXPath("//div[@class='box']/p").Text);

            if (action == "Add an attribute")
            {
                if (actionParameters.ContainsKey("Attribute Group"))
                {
                    Assert.AreEqual(actionParameters["Attribute Group"].ToString(), this._driver.FindElementByXPath("//table[@id='mass_action_confirmation_changes']/tbody/tr[1]/td").Text);
                }
                if (actionParameters.ContainsKey("Attribute"))
                {
                    Assert.AreEqual(actionParameters["Attribute"].ToString(), this._driver.FindElementByXPath("//table[@id='mass_action_confirmation_changes']/tbody/tr[2]/td").Text);
                }
                if (actionParameters.ContainsKey("Staff"))
                {
                    string[] rawReversedArray = actionParameters["Staff"].ToString().Replace(" ", "").Split(',');
                    string nameFormatted = string.Format("{0} {1}", rawReversedArray.GetValue(1), rawReversedArray.GetValue(0));
                    Assert.AreEqual(nameFormatted, this._driver.FindElementByXPath("//table[@id='mass_action_confirmation_changes']/tbody/tr[3]/td").Text);
                }
                if (actionParameters.ContainsKey("Start Date"))
                {
                    Assert.AreEqual(actionParameters["Start Date"].ToString(), this._driver.FindElementByXPath("//table[@id='mass_action_confirmation_changes']/tbody/tr[4]/td").Text);
                }
                if (actionParameters.ContainsKey("Comment"))
                {
                    Assert.AreEqual(actionParameters["Comment"].ToString(), this._driver.FindElementByXPath("//table[@id='mass_action_confirmation_changes']/tbody/tr[5]/td").Text);
                }
            }


            this._driver.FindElementByXPath("//input[@type='submit']").Click();

            // Submit and capture the current time
            DateTime currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            TestLog.WriteLine("Mass Action Current Time: " + currentTime.ToString("M/d/yyyy"));

            // View the mass action queue
            this._driver.FindElementByLinkText("Go to the mass action queue to see if your mass action is finished.").Click();

            // Allow 30 refreshes for the mass action to be completed
            string tableIdMassActionQueue = "//table[@id='mass_action_list']";

            /* OLD WAY OF CHECKING CAUSES SOME TIME MISMATCH EVEN WITH IN BETWEEN TIMES
                        Retry.Repeat(40).WithFailureMessage("The mass action was not completed in the alloted time.")
                            .DoBetween(() => this._driver.FindElementByLinkText("Refresh to update the list").Click())
                            .Until(() => this._driver.FindElementsByXPath(string.Format("{0}/tbody/tr[2]/td[1]/img[contains(@src, '/images/status_complete.png?') and ancestor::tr/td[2]/a/text()='{1}' and (ancestor::tr/td[3]/text()='{2}' or ancestor::tr/td[3]/text()='{3}' or ancestor::tr/td[3]/text()='{4}')]", 
                                tableIdMassActionQueue, actionName, string.Format("Today at {0:t}", 
                                currentTime.AddMinutes(-2)), string.Format("Today at {0:t}", currentTime), 
                                string.Format("Today at {0:t}", currentTime.AddMinutes(2)))).Count > 0);
            */

            Retry.Repeat(40).WithFailureMessage("The mass action was not completed in the alloted time.")
                 .DoBetween(() => this._driver.FindElementByLinkText("Refresh to update the list").Click())
                 .Until(() => this._driver.FindElementsByXPath(string.Format("{0}/tbody/tr[2]/td[1]/img[contains(@src, '/images/status_complete.png?') and ancestor::tr/td[2]/a/text()='{1}']",
                    tableIdMassActionQueue, actionName)).Count > 0);

            // Verify the data in the queue table
            //int rowMassActionQueue = this._generalMethods.GetTableRowNumberWebDriver(tableIdMassActionQueue, string.Format("Today at {0:t}", currentTime), "Submitted", null);
            int rowMassActionQueue = this._generalMethods.GetTableRowNumberWebDriver(tableIdMassActionQueue, actionName, "Action", null);

            IWebElement table = this._driver.FindElementByXPath(tableIdMassActionQueue);
            Assert.IsTrue(table.FindElements(By.XPath(string.Format("tbody/tr[{0}]/td[1]/img[contains(@src, '/images/status_complete.png?')]", rowMassActionQueue + 1))).Count > 0);
            Assert.AreEqual(actionName, table.FindElements(By.TagName("tr"))[rowMassActionQueue].FindElements(By.TagName("td"))[1].Text);
            Assert.Between(table.FindElements(By.TagName("tr"))[rowMassActionQueue].FindElements(By.TagName("td"))[2].Text, string.Format("Today at {0:t}", currentTime.AddMinutes(-1)), string.Format("Today at {0:t}", currentTime.AddMinutes(1)));
            Assert.AreEqual("Matthew Sneeden", table.FindElements(By.TagName("tr"))[rowMassActionQueue].FindElements(By.TagName("td"))[3].Text);

            // View the details of the mass action
            this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/a", tableIdMassActionQueue, rowMassActionQueue + 1)).Click();

            // Verify the breadcrumb on the page
            Assert.AreEqual("People › Data Integrity › Mass Action Queue › View Mass Action Details", this._driver.FindElementByXPath("//p[@id='breadcrumb']").Text);

            // Verify the details of the mass action
            Assert.AreEqual(actionName, this._driver.FindElementByXPath("//div[@id='main_content']/div[1]/div[2]/h2").Text);
            Assert.AreEqual(individualsCount, (this._driver.FindElementsByXPath("//table[@id='ctl00_ctl00_MainContent_content_grdMassActionIndividuals']/tbody/tr").Count - 1));
            Assert.IsTrue(this._driver.FindElementsByLinkText("Export to CSV").Count > 0);
            Assert.IsTrue(this._driver.FindElementsByXPath("//div[@id='main_content']/div[2]/div/img[contains(@src, '/images/status_complete.png?')]").Count > 0);
        }
        #endregion Mass Action

        #region Group Email
        #region Compose
        /// <summary>
        /// Generates a group email in portal.
        /// </summary>>
        /// <param name="subject">The email subject</param>
        /// <param name="from">The from address</param>
        /// <param name="replyTo">The reply to address</param>
        /// <param name="recipients">The array of recipients</param>
        /// <param name="emailBody">The body of the email</param>
        /// <param name="sendTestEmail">Flag for sending a test email</param>
        /// <param name="confirmationAddress">The confirmation address</param>
        /// <param name="contactItem">Flag to generate a closed contact item</param>
        public string People_GroupEmail_Compose(string subject, string from, string replyTo, string[] recipients, string emailBody, bool sendTestEmail, string confirmationAddress, bool contactItem)
        {

            log.Debug("Enter People Group Email Compose");

            string emailTimeStamp = "";

            //Adding a rand number so we can use that for searching e-mail through e-mail clients
            //string emailRand = Guid.NewGuid().ToString().Substring(0, 7);
            //emailBody = string.Format("{0} {1}", emailBody, emailRand);

            // Navigate to people->compose
            log.Info("Gof to People --> Compose");
            this._selenium.Navigate(Navigation.People.GroupEmail.Compose);

            // Populate the fields with the supplied data
            log.Info("Type: " + subject);

            if (!string.IsNullOrEmpty(subject))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtSubject", string.Format("{0} {1}", this._f1Environment, subject));
            }

            log.Info("Type: " + from);

            if (!string.IsNullOrEmpty(from))
            {
                log.Info("Type: " + from);
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlFrom", from);
            }
            if (!string.IsNullOrEmpty(replyTo))
            {
                log.Info("Type: " + replyTo);
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtReplyToAddress", replyTo);
            }

            // If a list of recipients is provided, navigate and select the designated recipients
            if (recipients != null)
            {
                log.Info("Go to Add recipients ");
                // Add the recipients
                this._selenium.ClickAndWaitForPageToLoad("link=Add recipients");

                // Verify title, text
                log.Debug("Verify that we are in Add recipients");
                this._selenium.VerifyTitle(this.TitleFormat("Email Recipients"));
                this._selenium.VerifyTextPresent("Email Recipients");

                foreach (string recipient in recipients)
                {
                    log.Info("Type " + recipient);
                    this._selenium.Type("txtSearch", recipient);
                    this._selenium.ClickAndWaitForCondition("btnSearch", this._javascript.DoesSelectHaveElements("lbSearchResults"), "20000");
                    this._selenium.Select("lbSearchResults", "index=0");
                    this._selenium.Click("btnAddIndividual");
                }

                log.Info("Go Back");
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Back);
            }

            // Enter the body of the email
            log.Info("Enter the body of email");
            this._selenium.SelectFrame("rich_text_editor_ifr");
            this._selenium.Focus(TestConstants.HtmlEditor);
            this._selenium.GetEval(String.Format("selenium.browserbot.getUserWindow().document.getElementById('tinymce').innerHTML='{0}';", emailBody.ToString()));
            //this._selenium.TypeKeys(TestConstants.HtmlEditor, emailBody);
            this._selenium.SelectWindow("");

            //this._selenium.SelectWindow(null);

            // Add confirmation recipient(s)
            if (!string.IsNullOrEmpty(confirmationAddress))
            {
                log.Info("Add Confirmation recipient");
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtConfirmationAddress", confirmationAddress);
            }

            // Create a closed contact item if requested
            if (contactItem)
            {
                log.Info("Create Close contact item");
                this._selenium.Click("create_contact");
            }

            // Send the email/test email
            if (sendTestEmail)
            {
                log.Info("Send test e-mail");
                this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnSendTest");
                emailTimeStamp = this._selenium.GetText("saved_timestamp");
            }
            else
            {
                // Submit and capture the current datetime
                DateTime currentTime = this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnSendEmail");
                string formattedSubject = string.Format("{0} {1}", this._f1Environment, subject);

                // Verify the email was sent
                log.Info("Verify the email was sent");
                this._selenium.Navigate(Navigation.People.GroupEmail.Sent_Items);

                log.Debug("Wait for Email not sent failure");
                Retry.WithPolling(1000).WithTimeout(35000).WithFailureMessage("The email was not sent in the allotted time.")
                    .DoBetween(() => this._selenium.ClickAndWaitForPageToLoad("link=Refresh for up-to-date statuses and latest sent items"))
                    .Until(() => this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.People_SentItems, this._generalMethods.GetTableRowNumber(TableIds.People_SentItems, formattedSubject, "Subject"))) == "Sent");

                log.Debug("Get row for recently sent e-mail");
                decimal itemRowFound = this._generalMethods.GetTableRowNumber(TableIds.People_SentItems, string.Format("{0} {1}", this._f1Environment, subject), "Subject", null);
                emailTimeStamp = this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.People_SentItems, itemRowFound));
                Assert.AreEqual(string.Format("{0} {1}", this._f1Environment, subject), this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.People_SentItems, itemRowFound)));
                Assert.AreEqual(recipients.Length.ToString(), this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.People_SentItems, itemRowFound)));
                Assert.AreEqual(replyTo, this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.People_SentItems, itemRowFound)));
                Assert.Between(emailTimeStamp, string.Format("Today at {0:t}", currentTime.AddMinutes(-2)), string.Format("Today at {0:t}", currentTime.AddMinutes(2)));
                //Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.People_SentItems, itemRowFound)), string.Format("Today at {0:t}", currentTime.AddMinutes(-1)), string.Format("Today at {0:t}", currentTime.AddMinutes(2)));
                Assert.AreEqual("Sent", this._selenium.GetTable(string.Format("{0}.{1}.4", TableIds.People_SentItems, itemRowFound)));

                //emailTimeStamp = this._selenium.GetTable(string.Format("{0}.{1}.3", TableIds.People_SentItems, itemRowFound));

                // Verify the contact item if specified
                if (contactItem)
                {
                    log.Info("Verify contact item");
                    this.People_ViewIndividual(recipients[0]);

                    Assert.AreEqual(formattedSubject, this._selenium.GetText("//div[@id='contact_items']/div[1]/div/strong/a"));
                    Assert.Between(this._selenium.GetText("//div[@id='contact_items']/div[1]/small[@class='mute float_left']"), string.Format("Created Today at {0:h:mm tt}", currentTime.AddMinutes(-2)), string.Format("Created Today at {0:h:mm tt}", currentTime.AddMinutes(2)));
                    Assert.Between(this._selenium.GetText("//div[@id='contact_items']/div[1]/small[@class='mute float_right']"), string.Format("Updated Today at {0:h:mm tt}", currentTime.AddMinutes(-2)), string.Format("Updated Today at {0:h:mm tt}", currentTime.AddMinutes(2)));
                }
            }

            log.Debug("Exit People_GroupEmail_Compose: " + emailTimeStamp);

            //Remove Today at and return? or just return
            //Return for now if empty get current time
            if (emailTimeStamp.Equals(""))
            {
                emailTimeStamp = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).ToShortTimeString();
                log.Warn("Email Time Stamp empty ... using current TOF: " + emailTimeStamp);
            }
            else
            {
                emailTimeStamp = emailTimeStamp.Remove(0, 9);
            }

            return emailTimeStamp;

        }
        #endregion Compose

        #region Drafts
        /// <summary>
        /// Creates an email draft
        /// </summary>
        /// <param name="subject">The subject of the draft</param>
        /// <param name="emailBody">The body of the draft</param>
        public void People_GroupEmail_Drafts_Create(string subject, string emailBody, string hostname = "")
        {
            // Navigate to people->drafts
            this._selenium.Navigate(Navigation.People.GroupEmail.Drafts);

            // Click to create a draft
            string command = this._selenium.IsElementPresent(GeneralLinks.Add) ? GeneralLinks.Add : "link=Create your first email";
            this._selenium.ClickAndWaitForPageToLoad(command);

            // Populate the fields with the supplied data
            if (!string.IsNullOrEmpty(subject))
            {
                this._selenium.Type("ctl00_ctl00_MainContent_content_txtSubject", subject);
            }

            // Enter the body of the email
            if (!string.IsNullOrEmpty(emailBody))
            {
                this._selenium.SelectFrame("rich_text_editor_ifr");
                this._selenium.Focus(TestConstants.HtmlEditor);
                this._selenium.TypeKeys(TestConstants.HtmlEditor, emailBody);
                this._selenium.SelectWindow("");
            }

            // Save the draft
            this._selenium.Click("link=Save draft");
            DateTime currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

            //Modified Selnium Grid to match Central Time
            //currentTime = this._generalMethods.AddHourSeGrid(currentTime, hostname, -2);

            // Verify the draft is marked as saved
            string targetText = string.Empty;
            Retry.WithPolling(100).WithTimeout(10000).WithFailureMessage("The draft was not saved in the allotted time.")
                .DoBetween(() => targetText = this._selenium.GetText("saved_timestamp"))
                .Until(() => ((targetText == string.Format("Today at {0:t}", currentTime.AddMinutes(-2))) || (targetText == string.Format("Today at {0:t}", currentTime)) || (targetText == string.Format("Today at {0:t}", currentTime.AddMinutes(2)))));

            //Modified Selnium Grid to match Central Time
            //currentTime = this._generalMethods.AddHourSeGrid(currentTime, hostname, +2);

            // Verify the draft was created
            this._selenium.Navigate(Navigation.People.GroupEmail.Drafts);
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.People_Drafts, subject, "Subject", null);
            Assert.AreEqual(subject, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.People_Drafts, itemRow)));
            Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.People_Drafts, itemRow)), string.Format("Today at {0:t}", currentTime.AddMinutes(-3)), string.Format("Today at {0:t}", currentTime.AddMinutes(3)));
        }
        #endregion Drafts

        #region Templates
        /// <summary>
        /// Creates a template.
        /// </summary>
        /// <param name="subject">The email subject.</param>
        /// <param name="shared">Flag to designate shared.</param>
        /// <param name="emailBody">The body of the email.</param>
        /// <param name="mergeFields">Email merge fields.</param>
        public void People_GroupEmail_Templates_Create(string subject, bool shared, string emailBody, string[] mergeFields)
        {
            // Navigate to people->templates
            this._selenium.Navigate(Navigation.People.GroupEmail.Templates);

            // Click to add a new template
            if (this._selenium.IsElementPresent(GeneralLinks.Add))
            {
                this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);
            }
            else if (this._selenium.IsElementPresent("link=Create the first template"))
            {
                this._selenium.ClickAndWaitForPageToLoad("link=Create the first template");
            }
            else
            {
                throw new Exception("Could not find a link to create a new Template!!");
            }

            // Populate the fields with the supplied data
            this._selenium.Type("ctl00_ctl00_MainContent_content_ucEmailTemplate_txtTemplateName", subject);

            // Check the share box if specified
            if (shared)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_ucEmailTemplate_chkTemplateIsShared");
            }

            // Enter the body of the email
            log.Info("Enter the body of email");
            this._selenium.SelectFrame("rich_text_editor_ifr");
            this._selenium.Focus(TestConstants.HtmlEditor);
            this._selenium.GetEval(String.Format("selenium.browserbot.getUserWindow().document.getElementById('tinymce').innerHTML='{0}';", emailBody.ToString()));
            //this._selenium.TypeKeys(TestConstants.HtmlEditor, emailBody);
            this._selenium.SelectWindow("");
            //this._selenium.SelectWindow(null);

            // Select all of the merge field links provided
            log.Info("Enter the merge fields provided");
            foreach (string mergeField in mergeFields)
            {
                this._selenium.Click(mergeField);
            }

            // Verify the text in the editor
            string htmlEditorText = this._selenium.GetText(TestConstants.HtmlEditor);
            TestLog.WriteLine("HtmlEditor Text: " + htmlEditorText);
            Assert.AreEqual("{FirstName}{LastName}{HouseholdName}{GoesByName}{Prefix}\n" + emailBody, htmlEditorText);

            // Submit and capture the current DateTime
            DateTime currentTime = this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the template was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.People_Templates, subject, "Template Name", null);
            Assert.AreEqual(subject, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.People_Templates, itemRow)));
            Assert.AreEqual(this._portalUser, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.People_Templates, itemRow)));
            Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.People_Templates, itemRow)), string.Format("Today at {0:t}", currentTime.AddMinutes(-1)), string.Format("Today at {0:t}", currentTime.AddMinutes(1)));
            Assert.AreEqual(shared, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img", TableIds.People_Templates, itemRow + 1)));
        }

        public void People_GroupEmail_Templates_Update(string subjectOriginal, bool sharedOriginal, string emailBodyOriginal, string subjectUpdated, bool sharedUpdated, string emailBodyUpdated, string[] mergeFieldsUpdated)
        {
            // Navigate to people->templates
            this._selenium.Navigate(Navigation.People.GroupEmail.Templates);

            // Update the template
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.People_Templates, subjectOriginal, "Template Name", null);
            this._selenium.ClickAndWaitForPageToLoad(string.Format("{0}/tbody/tr[{1}]/td[1]/a", TableIds.People_Templates, itemRow + 1));
            Assert.AreEqual(subjectOriginal, this._selenium.GetValue("ctl00_ctl00_MainContent_content_ucEmailTemplate_txtTemplateName"));
            Assert.AreEqual(sharedOriginal, this._selenium.IsChecked("ctl00_ctl00_MainContent_content_ucEmailTemplate_chkTemplateIsShared"));
            Assert.AreEqual(emailBodyOriginal, this._selenium.GetText(TestConstants.HtmlEditor));
            this._selenium.Type("ctl00_ctl00_MainContent_content_ucEmailTemplate_txtTemplateName", subjectUpdated);

            if (sharedUpdated)
            {
                this._selenium.Check("ctl00_ctl00_MainContent_content_ucEmailTemplate_chkTemplateIsShared");
            }
            else
            {
                this._selenium.Uncheck("ctl00_ctl00_MainContent_content_ucEmailTemplate_chkTemplateIsShared");
            }
            this._selenium.SelectFrame("rich_text_editor_ifr");
            this._selenium.Focus(TestConstants.HtmlEditor);
            //this._selenium.GetEval("selenium.browserbot.getUserWindow().document.getElementById('tinymce').innerHTML=''");
            this._selenium.GetEval(String.Format("selenium.browserbot.getUserWindow().document.getElementById('tinymce').innerHTML='{0}';", emailBodyUpdated.ToString()));
            this._selenium.TypeKeys(TestConstants.HtmlEditor, emailBodyUpdated);
            this._selenium.SelectWindow("");

            if (mergeFieldsUpdated != null)
            {
                foreach (string mergeField in mergeFieldsUpdated)
                {
                    this._selenium.Click(mergeField);
                }
            }

            // Verify the text in the editor
            // Assert.AreEqual(emailBodyUpdated + "{Prefix}{GoesByName}{HouseholdName}{LastName}{FirstName}\n\n" + emailBodyUpdated, this._selenium.GetText(TestConstants.HtmlEditor));
            Assert.AreEqual("{Prefix}{GoesByName}{HouseholdName}{LastName}{FirstName}\n" + emailBodyUpdated, this._selenium.GetText(TestConstants.HtmlEditor));

            // Submit and capture the current DateTime
            DateTime currentTime = this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);

            // Verify the template was updated
            decimal itemRowUpdated = this._generalMethods.GetTableRowNumber(TableIds.People_Templates, subjectUpdated, "Template Name", null);
            Assert.AreEqual(subjectUpdated, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.People_Templates, itemRowUpdated)));
            Assert.AreEqual(this._portalUser, this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.People_Templates, itemRowUpdated)));
            Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.2", TableIds.People_Templates, itemRowUpdated)), string.Format("Today at {0:t}", currentTime.AddMinutes(-1)), string.Format("Today at {0:t}", currentTime.AddHours(1).AddMinutes(1)));
            Assert.AreEqual(sharedUpdated, this._selenium.IsElementPresent(string.Format("{0}/tbody/tr[{1}]/td[4]/img", TableIds.People_Templates, itemRowUpdated + 1)));
        }

        /// <summary>
        /// Deletes a template.
        /// </summary>
        /// <param name="templateName">The name of the template to be deleted</param>
        public void People_GroupEmail_Templates_Delete(string templateName)
        {
            // Navigate to people->templates
            this._selenium.Navigate(Navigation.People.GroupEmail.Templates);

            // Delete the template
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.People_Templates, templateName, "Template Name", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[5]/a", TableIds.People_Templates, itemRow + 1));
            Assert.IsTrue(Regex.IsMatch(this._selenium.GetConfirmation(), "^Are you sure you want to delete this template[\\s\\S]$"));
            this._selenium.WaitForPageToLoad("30000");

            // Verify the template was deleted
            if (this._selenium.IsElementPresent(TableIds.People_Templates))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.People_Templates, templateName, "Template Name", null));
            }
            else
            {
                this._selenium.VerifyTextPresent("No email templates have been created");
                this._selenium.VerifyElementPresent("link=Create the first template");
            }
        }
        #endregion Templates

        #region Delegates
        /// <summary>
        /// Creates a delegate
        /// </summary>
        /// <param name="user">The name of the user to be assigned as a delegate</param>
        public void People_GroupEmail_Delegates_Create(string user)
        {
            // Navigate to people->delegates
            if (!this._selenium.GetLocation().Contains("/Email/EmailDelegate/List.aspx"))
            {
                this._selenium.Navigate(Navigation.People.GroupEmail.Delegates);
            }

            // Create a delegate
            this._selenium.ClickAndWaitForCondition(GeneralLinks.Add, this._javascript.IsElementPresent("ctl00_ctl00_MainContent_content_ddlProxy"), "10000");
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddlProxy", user);

            // Submit and capture the current DateTime
            DateTime currentTime = this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnAddNew");

            // Verify the delegate was created
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.People_Delegates, user, "Can Send Email On Your Behalf", null);
            Assert.AreEqual(user, this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.People_Delegates, itemRow)));
            Assert.Between(this._selenium.GetTable(string.Format("{0}.{1}.1", TableIds.People_Delegates, itemRow)), string.Format("Today at {0:t}", currentTime.AddMinutes(-2)), string.Format("Today at {0:t}", currentTime.AddMinutes(2)));
        }


        /// <summary>
        /// Deletes all delegate with same name
        /// </summary>
        /// <param name="user">The name of the delegate to be deleted</param>
        public void People_GroupEmail_Delegates_Delete_All(string user)
        {
            // Navigate to people->delegates
            this._selenium.Navigate(Navigation.People.GroupEmail.Delegates);

            //Get latest Row number
            int rows = this._generalMethods.GetTableRowCount(TableIds.People_Delegates);

            if (rows > 0)
            {
                for (int i = 1; i < rows; i++)
                {
                    log.Debug("*******************************************************");
                    log.Debug("Delete User: " + user);
                    string userTable = this._selenium.GetTable(string.Format("{0}.{1}.0", TableIds.People_Delegates, i));
                    log.Debug("Table User: " + userTable);

                    if (user == userTable)
                    {
                        log.Debug("************** DELETE ROW [" + i + "] BEG *************");
                        this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[3]/a", TableIds.People_Delegates, i + 1));
                        this._selenium.GetConfirmation();
                        this._selenium.WaitForPageToLoad("30000");
                        log.Debug("************** DELETE  [" + i + "] END *************");

                        //Reset, since we lost a row. Get new row count and start over
                        i = 1;
                        rows = this._generalMethods.GetTableRowCount(TableIds.People_Delegates);


                    }

                    log.Debug("*******************************************************");

                }
            }
            else
            {
                log.Info("No Delegates to Delete");
            }




        }

        /// <summary>
        /// Deletes a delegate
        /// </summary>
        /// <param name="user">The name of the delegate to be deleted</param>
        public void People_GroupEmail_Delegates_Delete(string user)
        {
            // Navigate to people->delegates
            this._selenium.Navigate(Navigation.People.GroupEmail.Delegates);

            // Delete a delegate
            decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.People_Delegates, user, "Can Send Email On Your Behalf", null);
            this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[3]/a", TableIds.People_Delegates, itemRow + 1));
            Assert.IsTrue(Regex.IsMatch(this._selenium.GetConfirmation(), "^Are you sure you want to delete this delegate[\\s\\S]$"));
            this._selenium.WaitForPageToLoad("30000");

            // Verify the delegate was deleted
            if (!this._selenium.IsElementPresent("//div[@class='box_notice']"))
            {
                Assert.IsFalse(this._generalMethods.ItemExistsInTable(TableIds.People_Delegates, user, "Can Send Email On Your Behalf", null));
            }
            else
            {
                Assert.IsTrue(this._selenium.IsTextPresent("No email delegates have been created"));
            }
        }
        #endregion Delegates
        #endregion Group Email

        #region Background Check
        /// <summary>
        /// Generates a requirements
        /// </summary>
        /// <param name="person">The person to generate the background check for</param>
        /// <param name="dob">The individuals date of birth</param>
        /// <param name="ssn">The individuals social security number</param>
        /// <param name="reqType">The request type</param>
        /// <param name="portalUserLinked">Is the portal user linked?</param>
        public void People_Generate_BackgroundCheck_WebDriver(string person, string dob, string ssn, string reqType, string submittedBy, bool portalUserLinked = true)
        {

            string errorText = string.Empty;

            if (!this._driver.Url.Contains("backgroundcheck"))
            {
                // Navigate to people->background checks
                this._generalMethods.Navigate_Portal(Navigation.People.Volunteer_Pipeline.Background_Checks);
                this._generalMethods.WaitForElement(this._driver, By.LinkText("Add"));
            }

            // Click to create a new backgound check
            this._driver.FindElementByLinkText("Add").Click();

            // If portal user is unlinked, verify that the proper error message appears, otherwise continue on
            if (!portalUserLinked)
            {

                this._generalMethods.WaitForElement(this._driver, By.ClassName("box_notice"));
                this._generalMethods.VerifyTextPresentWebDriver("Your user account is not set up to submit background checks.");

            }
            else
            {
                // Search for, select the individual from the find person popup                
                this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(person, null);

                // Add additional information
                if ((dob != null) || (this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl01_DateTextBox").Text == ""))
                {
                    TestLog.WriteLine("DOB: " + dob);
                    this._generalMethods.FocusElementWebDriver(By.Id("ctl00_ctl00_MainContent_content_ctl01_DateTextBox"));
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl01_DateTextBox").Clear();
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl01_DateTextBox").Click();
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_ctl01_DateTextBox").SendKeys(dob);

                }

                // Need to use "111-11-1111" for testing
                if ((ssn != null) || (this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSSN_textBox").Text == ""))
                {
                    //*[@id="ctl00_ctl00_MainContent_content_txtSSN_textBox"]
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSSN_textBox").Clear();
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtSSN_textBox").SendKeys(ssn);
                }

                if (reqType != null)
                {
                    IWebElement reqTypeDropDown = this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlRequirementType_dropDownList");
                    SelectElement select = new SelectElement(reqTypeDropDown);
                    select.SelectByText("Background Check");
                }

                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSave").Click();


                DateTime currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

                //Errors?
                try
                {
                    this._generalMethods.WaitForElement(this._driver, By.Id("error_message"));
                    TestLog.WriteLine("Error Message count: " + this._driver.FindElementsById("error_message").Count);
                    this._generalMethods.CheckAndThrowErrorMessagesException();
                }
                catch (NotFoundException e)
                {
                    //We are all good
                    TestLog.WriteLine("No Errors Found");
                }
                //catch the error msg and throw it, check the error msg
                catch (WebDriverException e)
                {
                    // Modified by Mady Kou, to ensure all three cases which call this method.
                    if (e.Message.StartsWith("Wait for "))
                    {
                        TestLog.WriteLine("No Errors Found");
                    }
                    else
                    {
                        throw e;
                    }


                }

                /*
                            if (this._generalMethods.VerifyElementPresentWebDriver(By.Id("error_message")))
                            {                
                                int errorCount = this._driver.FindElementsByXPath("//*[@id='error_message']/dd").Count;
                                TestLog.WriteLine("Error XPath count:" + errorCount);
                                for (int e = 0; e < errorCount; e++)
                                {
                                    TestLog.WriteLine("Error Text: " + this._driver.FindElementByXPath(string.Format("//*[@id='error_message']/dd[{0}]", e+1)).Text);
                                    errorText += string.Format(" {0}", (this._driver.FindElementByXPath(string.Format("//*[@id='error_message']/dd[{0}]", e+1)).Text));

                                }

                                throw new WebDriverException("Error Messages Found. " + errorText);
                            }

                */
                this._generalMethods.WaitForElement(this._driver, By.Id("ctl00_ctl00_MainContent_content_dgRequests"));

                //Verify that Submitted By is set

                // If there are multiple pages...
                IWebElement pageControl = this._driver.FindElementsByXPath("//div[@class='grid_controls']/ul[@class='grid_pagination']").Count > 0 ? this._driver.FindElementByXPath("//div[@class='grid_controls']/ul[@class='grid_pagination']") : null;

                if (pageControl != null && pageControl.Displayed && pageControl.FindElements(By.TagName("li")).Count > 1)
                {
                    TestLog.WriteLine("Multiple Pages");
                    for (int pageIndex = 1; pageIndex <= this._driver.FindElementsByXPath("//div[@class='grid_controls']/ul[@class='grid_pagination']/li").Count; pageIndex++)
                    {
                        TestLog.WriteLine("Page " + pageIndex);
                        this._driver.FindElementByXPath(string.Format("//div[@class='grid_controls']/ul[@class='grid_pagination']/li[{0}]/a", pageIndex)).Click();
                    }
                }

                //Assert.IsTrue(this._generalMethods.VerifyElementPresentWebDriver(By.LinkText(person)), 
                int reqRows = this._generalMethods.GetTableRowCountWebDriver("//table[@id='ctl00_ctl00_MainContent_content_dgRequests']");
                TestLog.WriteLine("Req Rows: " + reqRows);
                this._generalMethods.VerifyTableDataWebDriver("ctl00_ctl00_MainContent_content_dgRequests", reqRows - 1, new Dictionary<int, string>() { { 1, "" }, { 2, "Background Check" }, { 3, "Submitted to Vendor" }, { 4, "Pending" } });

                string nameValue = this._driver.FindElementById("ctl00_ctl00_MainContent_content_dgRequests").FindElements(By.TagName("tr"))[reqRows - 1].FindElements(By.TagName("td"))[0].Text;
                TestLog.WriteLine("Name Value: " + nameValue);

                //Matthew Sneeden Submitted by Felix Gaytan on 5/13/2013 at 11:36 PM
                Assert.Between(nameValue, string.Format("{0}\r\nSubmitted by {1} on {2} at {3}", person, submittedBy, currentTime.ToString("M/d/yyyy"), currentTime.AddMinutes(-2).ToString("h:mm tt")),
                                          string.Format("{0}\r\nSubmitted by {1} on {2} at {3}", person, submittedBy, currentTime.ToString("M/d/yyyy"), currentTime.AddMinutes(2).ToString("h:mm tt")));

                //Verify you can go to Individual Page
                TestLog.WriteLine("Verify that we can go to Individual Page");
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_dgRequests").FindElements(By.TagName("tr"))[reqRows - 1].FindElements(By.TagName("td"))[0].FindElement(By.PartialLinkText(person)).Click();
                try
                {
                    this._generalMethods.WaitForElement(this._driver, By.Id(TableIds.Portal.People_Individual_Requirements));
                    Assert.IsTrue(this._driver.FindElementById("household_individual_name").Text.Contains(person), string.Format("We are not in {0}'s Individual Page", person));
                    TestLog.WriteLine(string.Format("We are in {0}'s individual page", person));
                }
                catch (Exception e)
                {
                    throw new WebDriverException("Background Link did not go to Individual Page for " + person);
                }

            }


        }


        public void People_Verify_Delete_Requirement_WebDriver(string requirement, string person, string submittedBy = "", string date = "", string status = "Pending", Boolean verify = true, Boolean delete = false, Boolean deleteAll = false)
        {
            Boolean found = false;
            int delCounter = 0;
            string requirementValue = string.Empty;
            string dateValue = string.Empty;
            string submittedByValue = string.Empty;
            string statusValue = string.Empty;

            if (!this._driver.FindElementById("household_individual_name").Text.Contains(person))
            {
                this.People_ViewIndividual_WebDriver(person);
                //this._generalMethods.WaitForElement(this._driver, By.Id(TableIds.Portal.People_Individual_Requirements));
            }

            int reqCountBefore = Convert.ToInt32(this._driver.FindElementById("requirement_count").Text);
            TestLog.WriteLine("Req Count Before: " + reqCountBefore);

            int rows = this._generalMethods.GetTableRowCountWebDriver(TableIds.People_Individual_Requirements);
            TestLog.WriteLine("Rows Found: " + rows);

            //int row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.People_Individual_Requirements, "Background Checks", "Background Checks", null) + 1;
            //IWebElement table = this._driver.FindElementById(TableIds.People_Individual_Requirements);
            ////*[@id="ind_requirements"]
            if (rows <= 0)
            {
                throw new WebDriverException("No Requirements Found");
            }
            else
            {

                for (int r = 1; r < rows; r++)
                {
                    requirementValue = this._driver.FindElementById(TableIds.Portal.People_Individual_Requirements).FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[0].Text;
                    dateValue = this._driver.FindElementById(TableIds.Portal.People_Individual_Requirements).FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[1].Text;
                    submittedByValue = this._driver.FindElementById(TableIds.Portal.People_Individual_Requirements).FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[2].Text;
                    statusValue = this._driver.FindElementById(TableIds.Portal.People_Individual_Requirements).FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[4].Text;

                    //TestLog.WriteLine("********************************************");
                    //TestLog.WriteLine("requirementValue " + requirementValue + " " + (requirement == requirementValue));
                    //TestLog.WriteLine("dateValue " + dateValue + " " + (date == dateValue));
                    //TestLog.WriteLine("personValue " + submittedByValue + " " + (submittedBy == submittedByValue));
                    //TestLog.WriteLine("statusValue " + statusValue + " " + (status == statusValue));
                    //TestLog.WriteLine("********************************************");


                    //found a match
                    found = Get_Delete_Requirement(requirement, requirementValue, date, dateValue, submittedBy, submittedByValue, status, statusValue);

                    TestLog.WriteLine("Match Found: " + found);

                    //Delete if we have to
                    if ((delete) && (found))
                    {
                        this._driver.FindElementById(TableIds.Portal.People_Individual_Requirements).FindElements(By.TagName("tr"))[r].FindElements(By.TagName("td"))[5].FindElements(By.Name("delete_ind_requirement"))[0].Click();

                        //You are about to delete a requirement. You will not be able to undo this.
                        //Are you sure you want to delete it?
                        string alertText = this._driver.SwitchTo().Alert().Text;
                        //TestLog.WriteLine(alertText);
                        Assert.Contains(alertText, "You are about to delete a requirement. You will not be able to undo this.", "Alert Value Do Not Match");
                        this._driver.SwitchTo().Alert().Accept();
                        delCounter++;

                        if (deleteAll)
                        {
                            TestLog.WriteLine("Get Updated Requirement Table");
                            int count = Convert.ToInt32(this._driver.FindElementById("requirement_count").Text);
                            TestLog.WriteLine("Count: " + count);

                            //Reset the table. Tracking how many to go thourgh in loop statement
                            //this._driver.Navigate().Refresh();
                            //this._driver.Navigate().GoToUrl(this._driver.Url);
                            //this._generalMethods.WaitForElement(this._driver, By.Id(TableIds.Portal.People_Individual_Requirements));

                            rows = this._generalMethods.GetTableRowCountWebDriver(TableIds.People_Individual_Requirements);
                            TestLog.WriteLine("Updated Rows Found: " + rows);

                            count = Convert.ToInt32(this._driver.FindElementById("requirement_count").Text);
                            TestLog.WriteLine("Count: " + count);

                            r = 1;

                        }
                        else
                        {
                            break;
                        }

                    }
                }

                //Did We delete items?
                if (delete)
                {

                    if (delCounter == 0) { throw new WebDriverException(string.Format("{0} was not deleted", requirement)); }

                    //Check if requirement got deleted
                    //First check counter
                    //TODO Verify deleted requirement no longer there               
                    this._driver.Navigate().Refresh();
                    //this._driver.Navigate().GoToUrl(this._driver.Url);
                    this._generalMethods.WaitForElement(this._driver, By.Id(TableIds.Portal.People_Individual_Requirements));

                    int reqCountAfter = Convert.ToInt32(this._driver.FindElementById("requirement_count").Text);
                    TestLog.WriteLine("Req Count After: " + reqCountAfter);

                    int afterrows = this._generalMethods.GetTableRowCountWebDriver(TableIds.People_Individual_Requirements);
                    TestLog.WriteLine("After Delete Rows Found: " + afterrows);

                    Assert.IsFalse((reqCountBefore - delCounter) != reqCountAfter,
                                    string.Format("{0} requirement was not deleted.\n{1} Requirement(s) Deleted. Requirement counter mismtach. Expected: {2} Actual:  {3}",
                                    requirement, delCounter, (reqCountBefore - delCounter), reqCountAfter));
                }
            }

            Assert.IsTrue(found, string.Format("{0} requirement for {1} was not found.", requirement, person));

        }


        /// <summary>
        /// Generates a background check
        /// </summary>
        /// <param name="person">The person to generate the background check for</param>
        /// <param name="dob">The individuals date of birth</param>
        /// <param name="ssn">The individuals social security number</param>
        /// <param name="reqType">The request type</param>
        /// <param name="portalUserLinked">Is the portal user linked?</param>
        public void People_BackgroundChecks(string person, string dob, string ssn, string reqType, [Optional, DefaultParameterValue(true)] bool portalUserLinked)
        {
            // Navigate to people->background checks
            this._selenium.Navigate(Navigation.People.Volunteer_Pipeline.Background_Checks);

            // Click to create a new backgound check
            this._selenium.ClickAndWaitForPageToLoad(GeneralLinks.Add);

            // If portal user is unlinked, verify that the proper error message appears, otherwise continue on
            if (portalUserLinked == false)
            {
                this._selenium.VerifyTextPresent("Your user account is not set up to submit background checks.");
            }

            else
            {
                // Search for, select the individual from the find person popup
                this._generalMethods.SelectIndividualFromFindPersonPopup(person);

                // Add additional information
                if (dob != null)
                {
                    this._selenium.Type("ctl00_ctl00_MainContent_content_ctl01_DateTextBox", dob);
                }

                // Need to use "111-11-1111" for testing
                if (ssn != null)
                {
                    this._selenium.Type("ctl00_ctl00_MainContent_content_txtSSN_textBox", "111111111");
                }

                if (reqType != null)
                {
                    this._selenium.Select("ctl00_ctl00_MainContent_content_ddlRequirementType_dropDownList", "Background Check");
                }
                this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Save);
            }


            //Delete Background Check
            // Click the edit link associated with the specified address
            //test.Driver.FindElementByXPath(string.Format("//div[@class='street-address' and text()='{0}']/ancestor::div/ancestor::div/preceding-sibling::a[contains(@href, '/people/Household/Address/Edit.aspx?household_id=')]", address1)).Click();

            // Delete the address and click 'yes' at the confirmation
            //test.Driver.FindElementByLinkText("Delete this address").Click();
            //Assert.IsTrue(Regex.IsMatch(test.Driver.SwitchTo().Alert().Text, "^Are you sure you want to delete this address[\\s\\S]$"));
            //test.Driver.SwitchTo().Alert().Accept();

        }
        #endregion Background Check
        #endregion People

        #region WebLink
        #region Event Registration

        #region Manage Forms
        /// <summary>
        /// Creates a registration form.
        /// </summary>
        /// <param name="formName">The name of the form.</param>
        /// <param name="active">Flag that designates the form as being active or not.</param>
        public void WebLink_FormNames_Create(string formName, bool active, bool selectForm = false)
        {
            // Navigate to weblink->manage forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Manage_Forms);

            // Create a new form
            this._driver.FindElementByLinkText("Add").Click();
            if (!string.IsNullOrEmpty(formName))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Edit_FormName).SendKeys(formName);
            }
            if (!active)
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Active_Form).Click();
            }
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Save_Form).Click();

            //updated) by ivan, 2016/1/7
            //verify form was created 
            // Get form ID from database
            int formId = this._sql.Weblink_InfellowshipForm_GetFormId(15, formName);
            string formURL = GetPortalURL(this._f1Environment) + "WebLink/FormBuilder/FormSummary.aspx?FormID=" + formId + "&FormType=1";
            this._driver.Navigate().GoToUrl(formURL);
            Assert.AreEqual(formName, this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblFormName").Text);
            

            /* commented by ivan, 2016/1/7
            // Verify form was created
            try
            {
                Assert.AreEqual(formName, this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblFormName").Text);
                this._driver.FindElementByLinkText("Back").Click();
                if (!active)
                {
                    new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlActiveFilter_dropDownList")).SelectByText("Inactive");
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSearch").Click();
                }
                this._driver.FindElementByLinkText(formName.Substring(0, 1).ToUpper()).Click();

                int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ManageForms, formName, "Form Name", null);
                IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_ManageForms);
                Assert.AreEqual(formName, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].Text);
                Assert.AreEqual(active, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[4].FindElements(By.TagName("img")).Count > 0);


                //Select Created Form to do something with it
                if (selectForm)
                {
                    table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();
                }
            }
            catch (Exception)
            {
                this._sql.Weblink_Form_Delete_Proc(15, formId);
                throw;
            }
            */
        }


        public void WebLink_FormNames_Create_With_DownPayment(string formName, string fundName, int price, DateTime startDate, DateTime endDate, int downPaymentPrice, DateTime balanceDueDate)
        {
            GeneralMethods utility = this._generalMethods;

            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                log.Debug("Please login to portal at first");
                throw new Exception("Please login to portal at first");
            }
            else
            {
                utility.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Manage_Forms);
            }

            //Create a empty form
            utility.WaitAndGetElement(By.LinkText("Add")).Click();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtFormName_textBox")).SendKeys(formName);
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnSaveSettings")).Click();
            utility.WaitForPageIsLoaded(60);

            //Associate a fund/subfund
            utility.WaitAndGetElement(By.LinkText("Associate a fund/sub fund")).Click();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_rbtnFund")).Click();
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddlFund_dropDownList"))).SelectByText(fundName);
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnSaveSettings")).Click();
            utility.WaitForPageIsLoaded();

            //Edit date range and pricing
            utility.WaitAndGetElement(By.LinkText("Date range pricing")).Click();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtPrice_textBox")).SendKeys(price.ToString());
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl01_DateTextBox")).SendKeys(startDate.ToString("M/d/yyyy"));
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl02_DateTextBox")).SendKeys(endDate.ToString("M/d/yyyy"));
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnAddPricing")).Click();
            utility.WaitForPageIsLoaded();
            utility.WaitAndGetElement(By.LinkText("Done")).Click();
            utility.WaitForPageIsLoaded();

            //Edit payment setting
            utility.WaitAndGetElement(By.LinkText("Payment settings")).Click();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtPaymentAmount_textBox")).SendKeys(downPaymentPrice.ToString());
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_rdbtnNoCutOffDate")).Click();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl03_DateTextBox")).SendKeys(balanceDueDate.ToString("M/d/yyyy"));
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnSave")).Click();
            utility.WaitForPageIsLoaded();
        }

        /// <summary>
        /// Associate fund/subfund to given empty form.
        /// </summary>
        /// <param name="formType">The type of the form.</param>
        /// <param name="formId">The id of the form.</param>
        /// <param name="fundName">The name of fund.</param>
        /// <param name="subFundName">The name of subFund.</param>
        public void WebLink_FormId_Associate_fund(int formType, int formId, string fundName, string subFundName)
        {
            GeneralMethods utility = this._generalMethods;

            TestLog.WriteLine("Associate fund/subfund to given empty form");

            //Check if we are already in login page
            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                log.Debug("Please login to portal at first");
                throw new Exception("Please login to portal at first");
            }
            else
            {
                this._driver.Navigate().GoToUrl(string.Format("{0}/WebLink/FormBuilder/FinancialSettings.aspx?FormID={1}&FormType={2}", GetPortalURL(this._f1Environment), formId, formType));
            }

            //utility.WaitAndGetElement(By.LinkText("Associate a fund/sub fund")).Click();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_rbtnFund")).Click();

            //Select fund
            new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddlFund_dropDownList"))).SelectByText(fundName);
            
            //Select subfund
            if (subFundName != null)
            {
                new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddlSubFund_dropDownList"))).SelectByText(subFundName);
            }

            //Save
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnSaveSettings")).Click();
            utility.WaitForPageIsLoaded();
        }

        /// <summary>
        /// Add pricing and date range to given form.
        /// </summary>
        /// <param name="formType">The type of the form.</param>
        /// <param name="formId">The id of the form.</param>
        public void WebLink_FormId_Define_DateRange_Pricing(int formType, int formId, int price, DateTime startDate, DateTime endDate, bool isActive=true)
        {
            GeneralMethods utility = this._generalMethods;

            TestLog.WriteLine("Add pricing and date range to given form");

            //Check if we are already in login page
            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                log.Debug("Please login to portal at first");
                throw new Exception("Please login to portal at first");
            }
            else
            {
                this._driver.Navigate().GoToUrl(string.Format("{0}/WebLink/FormBuilder/DateRangePricing.aspx?FormID={1}&FormType={2}", GetPortalURL(this._f1Environment), formId, formType));
            }

            //utility.WaitAndGetElement(By.LinkText("Date range pricing")).Click();

            //Enter price
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtPrice_textBox")).Clear();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtPrice_textBox")).SendKeys(price.ToString());

            //Select start date and end date
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl01_DateTextBox")).Clear();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl02_DateTextBox")).Clear();
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl01_DateTextBox")).SendKeys(startDate.ToString("M/d/yyyy"));
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl02_DateTextBox")).SendKeys(endDate.ToString("M/d/yyyy"));

            if (!isActive)
            {
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_chkActive")).Click();
            }

            //Save
            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnAddPricing")).Click();
            utility.WaitForPageIsLoaded();
            utility.WaitAndGetElement(By.LinkText("Done")).Click();
            utility.WaitForPageIsLoaded();
        }

        /// <summary>
        /// Edit/new payment setting of given form.
        /// </summary>
        /// <param name="formType">The type of the form.</param>
        /// <param name="formId">The id of the form.</param>
        /// <param name="fundName">The name of fund.</param>
        /// <param name="subFundName">The name of subFund.</param>
        public void WebLink_FormId_PaymentSetting_New_Or_Edit(int formType, int formId, int downPaymentPrice, DateTime balanceDueDate)
        {
            GeneralMethods utility = this._generalMethods;
 
            TestLog.WriteLine("Add pricing and date range to given form");
            //Check if we are already in login page
            if (!this._driver.Url.ToString().Contains(GetPortalURL(this._f1Environment)))
            {
                log.Debug("Please login to portal at first");
                throw new Exception("Please login to portal at first");
            }
            else
            {
                this._driver.Navigate().GoToUrl(string.Format("{0}/WebLink/FormBuilder/FormSummary.aspx?FormID={1}&FormType={2}", GetPortalURL(this._f1Environment), formId, formType));
                utility.WaitForPageIsLoaded();
            }

            string script = "return document.getElementById(\"ctl00_ctl00_MainContent_content_lnkbtnPaymentSettings\") != null";
            if (bool.Parse(((IJavaScriptExecutor)this._driver).ExecuteScript(script).ToString()))
            {
                utility.WaitAndGetElement(By.LinkText("Payment settings")).Click();

                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtPaymentAmount_textBox")).Clear();
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtPaymentAmount_textBox")).SendKeys(downPaymentPrice.ToString());
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_rdbtnNoCutOffDate")).Click();

                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl03_DateTextBox")).Clear();
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ctl03_DateTextBox")).SendKeys(balanceDueDate.ToString("M/d/yyyy"));
                //Save
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnSave")).Click();
                utility.WaitForPageIsLoaded();
            }
            else 
            {
                throw new Exception("Link 'payment setting can't be found!");
            }
        }


        /// <summary>
        /// Creates a registration form with restrictions.
        /// </summary>
        /// <param name="formName">The name of the form.</param>
        /// <param name="active">Flag that designates the form as being active or not.</param>
        public void WebLink_FormNames_Create_WithRestrictions(string formName, bool active, string maxSubmissions, string startDate, string endDate, string gender, string startAge, string endAge, string ageByDate, bool years = true)
        {
            // Navigate to weblink->manage forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Manage_Forms);

            // Create a new form
            this._driver.FindElementByLinkText("Add").Click();
            if (!string.IsNullOrEmpty(formName))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFormName_textBox").SendKeys(formName);
            }
            if (!active)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkActive").Click();
            }

            //Enter Max Submissions
            if (!string.IsNullOrEmpty(maxSubmissions))
            {
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_Submissions).SendKeys(maxSubmissions);
            }
            //Are there Date restrictions?
            if (!string.IsNullOrEmpty(startDate) || !string.IsNullOrEmpty(endDate))
            {
                //Click radio button
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_DateRangeRadio).Click();

                //Enter Start date
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_StartDate).SendKeys(startDate);

                //Enter End Date
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_EndDate).SendKeys(endDate);
            }
            //Is there a Gender Restriction?
            if (!string.IsNullOrEmpty(gender))
            {
                //Click Radio button
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_GenderRadio).Click();
                //Select Gender Option
                new SelectElement(this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_GenderDropDown)).SelectByText(gender);
            }
            //Are there Age restrictions?
            if (!string.IsNullOrEmpty(startAge) || !string.IsNullOrEmpty(endAge))
            {
                //Click Radio option
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeRangeRadio).Click();
                //Enter start age
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_StartAge).SendKeys(startAge);
                //Enter end age
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_EndAge).SendKeys(endAge);
                //Years or Months?
                if (years)
                {
                    //Click Years
                    this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeYearsRadio).Click();
                }
                else
                {
                    //Click Months
                    this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeMonthsRadio).Click();
                }
                //Input Age By Date
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeByDate).SendKeys(ageByDate);
            }

            //Save Form
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveSettings").Click();

            // Verify form was created
            Assert.AreEqual(formName, this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblFormName").Text);
            this._driver.FindElementByLinkText("Back").Click();
            this._driver.FindElementByLinkText(formName.Substring(0, 1).ToUpper()).Click();

            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ManageForms, formName, "Form Name", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_ManageForms);
            Assert.AreEqual(formName, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].Text);
            Assert.AreEqual(active, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[4].FindElements(By.TagName("img")).Count > 0);
        }

        /// <summary>
        /// Updates a registration form.
        /// </summary>
        /// <param name="formName">The original name of the form.</param>
        /// <param name="active">Flag designating if the form is active.</param>
        /// <param name="formNameUpdated">The updated name of the form.</param>
        /// <param name="activeUpdated">The updated active setting for the form.</param>
        public void WebLink_FormNames_Update(string formName, bool active, string formNameUpdated, bool activeUpdated)
        {
            // Navigate to weblink->manage forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Manage_Forms);

            // Update a form
            this._driver.FindElementByLinkText(formName.Substring(0, 1).ToUpper()).Click();
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ManageForms, formName, "Form Name", null);
            this._driver.FindElementById(TableIds.Portal.WebLink_ManageForms).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();
            this._driver.FindElementByLinkText("change").Click();

            Assert.AreEqual(formName, this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFormName_textBox").GetAttribute("value"));
            Assert.AreEqual(active, this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkActive").Selected);

            if (!string.IsNullOrEmpty(formNameUpdated))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFormName_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtFormName_textBox").SendKeys(formNameUpdated);
            }

            IWebElement checkBox = this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkActive");
            if (!activeUpdated && checkBox.Selected)
            {
                checkBox.Click();
            }
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveSettings").Click();

            // Verify form was updated, original no longer exists
            Assert.AreEqual(formNameUpdated, this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblFormName").Text);
            this._driver.FindElementByLinkText("Back").Click();
            this._driver.FindElementByLinkText(formName.Substring(0, 1).ToUpper()).Click();

            int itemRowUpdated = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ManageForms, formNameUpdated, "Form Name", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_ManageForms);
            Assert.AreEqual(formNameUpdated, table.FindElements(By.TagName("tr"))[itemRowUpdated].FindElements(By.TagName("td"))[0].Text);
            Assert.AreEqual(activeUpdated, table.FindElements(By.TagName("tr"))[itemRowUpdated].FindElements(By.TagName("td"))[4].FindElements(By.TagName("img")).Count > 0);
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.WebLink_ManageForms, formName, "Form Name", null));
        }

        /// <summary>
        /// Deletes a registration form.
        /// </summary>
        /// <param name="formName">The name of the form to be deleted</param>
        public void WebLink_FormNames_Delete(string formName)
        {
            // Navigate to weblink->manage forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Manage_Forms);

            // Delete a form, click 'Yes' at the confirmation
            this._driver.FindElementByLinkText(formName.Substring(0, 1).ToUpper()).Click();
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ManageForms, formName, "Form Name", null);
            this._driver.FindElementById(TableIds.Portal.WebLink_ManageForms).FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[5].FindElement(By.TagName("a")).Click();
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            // Verify form was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.WebLink_ManageForms, formName, "Form Name", null));
        }

        public void WebLink_Form_ConfirmationMessage_Create(string from, string body, string bcc = "", string cc = "") {

            this._driver.FindElementByLinkText("Create confirmation message").Click();
            this._generalMethods.WaitForElementDisplayed(By.Id("ctl00_ctl00_MainContent_content_txtEmailFromAddress_textBox"));

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtEmailFromAddress_textBox").SendKeys(from);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtCC_textBox").SendKeys(cc);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtBCC_textBox").SendKeys(bcc);

            this._driver.SwitchTo().Frame("tiny_mce_editor_ifr");
            IWebElement element = this._driver.FindElement(By.CssSelector("body"));
            element.SendKeys(body);
            this._driver.SwitchTo().DefaultContent();

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSaveSettings").Click();
            this._generalMethods.WaitForElement(By.Id("ctl00_ctl00_MainContent_content_tblRowConfirmationMessageFrom"));
        }
               

        #endregion Manage Forms

        #region VolunteerApplication Forms
         /// <summary>
        /// Creates an volunteer application form.
        /// </summary>
        /// <param name="aggregateFormName">The name of the aggregate form.</param>
        /// <param name="active">Flag designating if the form is active or not.</param>
        /// <param name="includedForms">List of optional included forms.</param>
        public void WebLink_volunteerApplicationForm_Create(string applicationName, string opportunityName, string ministryName, string portalUser, string requirementName)
        {
            GeneralMethods utility = this._generalMethods;

            utility.Navigate_Portal(Navigation.WebLink.Volunteer_Application.Manage_Forms);

            utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnNew")).Click();

            if (applicationName == null || opportunityName == null || ministryName ==null || portalUser == null || requirementName == null)
            {
                throw new Exception("The input parameters can't be null");
            }
            else
            {
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtVolunteerApplicationDescription")).SendKeys(applicationName);
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnSaveNew")).Click();


                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtVolunteerOpportunityName")).SendKeys(opportunityName);
                new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddMinistryId"))).SelectByText(ministryName);
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnContinue")).Click();

                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnContinue")).Click();

                new SelectElement(utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_ddUserId"))).SelectByText(portalUser);
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnAdd")).Click();
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnContinue")).Click();

                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnNew")).Click();

                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_txtRequirementName")).SendKeys(requirementName);
                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnContinue")).Click();

                utility.WaitAndGetElement(By.Id("ctl00_ctl00_MainContent_content_btnContinue")).Click();
            }
        }
        #endregion


        #region Aggregate Forms
        /// <summary>
        /// Creates an aggregate form.
        /// </summary>
        /// <param name="aggregateFormName">The name of the aggregate form.</param>
        /// <param name="active">Flag designating if the form is active or not.</param>
        /// <param name="includedForms">List of optional included forms.</param>
        public void WebLink_AggregateForms_Create(string aggregateFormName, bool active, string[] includedForms)
        {
            // Navigate to weblink->aggregate forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Aggregate_Forms);

            // Create the aggregate form
            if (!string.IsNullOrEmpty(aggregateFormName))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAggregateFormName_textBox").Clear();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtAggregateFormName_textBox").SendKeys(aggregateFormName);
            }
            if (!active && this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkActive").Selected)
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_chkActive").Click();
            }
            if (includedForms != null)
            {
                foreach (string includedForm in includedForms)
                {
                    new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_lbFormSource")).SelectByText(includedForm);
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnFormAdd").Click();
                }
            }
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnAddAggregateForm").Click();

            // Verify the aggregate form was created
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_AggregateForms, aggregateFormName, "Aggregate Form Name", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_AggregateForms);
            string rawIncludedForms = table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[3].Text;
            rawIncludedForms = rawIncludedForms.Replace(", ", ",");
            string[] arrayIncludedForms = rawIncludedForms.Split(',');
            Assert.AreEqual(includedForms, arrayIncludedForms);
            Assert.AreEqual(active, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[4].FindElements(By.TagName("img")).Count > 0);
        }

        /// <summary>
        /// Deletes an aggregate form.
        /// </summary>
        /// <param name="aggregateFormName">The name of the form to be deleted</param>
        public void WebLink_AggregateForms_Delete(string aggregateFormName)
        {
            // Navigate to weblink->aggregate forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Aggregate_Forms);

            // Delete the aggregate form
            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_AggregateForms, aggregateFormName, "Aggregate Form Name", null);

            // Remove any associated forms
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_AggregateForms);
            if (table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[3].Text != "")
            {
                table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnFormRemoveAll").Click();
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnEditAggregateForm").Click();
            }
            table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[5].FindElement(By.TagName("a")).Click();

            // Click yes at the confirmation dialog
            this._generalMethods.Popups_ConfirmationWebDriver("Yes");

            // Verify aggregate form was deleted
            Assert.IsFalse(this._generalMethods.ItemExistsInTableWebDriver(TableIds.Portal.WebLink_AggregateForms, aggregateFormName, "Aggregate Form Name", null));
        }
        #endregion Aggregate Forms

        #region View Submissions

        // Comment: FO-2959 changed Add submission workflow from Weblink to Reg 2 pages when form is a simple form, please be careful when use this method since it's still running in Weblink
        /// <summary>
        /// Registers for an event.
        /// </summary>
        /// <param name="individualName">The name of the individual to be registered.</param>
        /// <param name="formName">The name of the registration form.</param>
        /// <param name="paymentMethod">The method of payment.</param>
        /// <param name="sendEmail">Send confirmation email</param>
        /// <param name="emailAddress">Email Address to send confirmation</param>
        /// <param name="ccEmailAddress">CC Email Address to send confirmation</param>
        /// <returns>Confirmation [0] and Referenence Number [1]</returns>
        public string[] Weblink_ViewSubmissions_Register(string individualName, string formName, string paymentMethod = "Visa", string amount = "2.00", string churchCode = "DC", Boolean waitProcess = true,
            Boolean newAddress = false,
            string creditCardNumber = "4111111111111111",
            Boolean sendEmail = false,
            string confirmEmailAddress = "",
            string ccEmailAddress = "",
            string address1 = "9616 Armour Dr", string address2 = "", string city = "Fort Worth", string state = "Texas", string postalCode = "76244-6085", string country = "United States"
            )
        {

            CultureInfo culture = null;
            DateTime submittedTime;
            string dateTimeFormat = string.Empty;
            string[] confirmRefNumber = new string[2];

            //this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(180));

            // Add a submission
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);
            this._driver.FindElementByLinkText("Add").Click();

            // Find a person
            this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(individualName);

            // Select the form
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlForm_dropDownList")).SelectByText(formName);


            // Add submission
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnAddRegistration").Click();
            Retry.WithPolling(500).WithTimeout(15000).Until(() => this._driver.WindowHandles.Count > 1);
            this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);

            //Allow Cookies if Needed
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("btnAcceptCookies")))
            {
                this._driver.FindElementById("btnAcceptCookies").Click();
            }

            this._driver.FindElementByXPath(string.Format("//span[contains(@id, 'dgFormIndividuals_') and text()='{0}']/ancestor::td/preceding-sibling::td/input[2]", individualName)).Click();
            this._driver.FindElementById("btnSaveOrder").Click();
            // chnaging this since test cases are failing..... SP

            //this._driver.FindElementByClassName("btnContinue").Click();
            // this._driver.FindElementByXPath("//input[@type=''btnContinue']").Click();

            //Wait for Payment Form
            this._generalMethods.WaitForElement(By.Id("bank_card_images"), 20, "Bank Card Images not displayed");
            this.TakeScreenShot_WebDriver();

            //Clear Email text boxes
            //When checkbox enabled, the text boxes are disabled
            //Dealing with Emails first then checkbox second
            if (this._driver.FindElementById("txtEmail_textBox").Enabled)
            {
                this._driver.FindElementById("txtEmail_textBox").Clear();
                this._driver.FindElementById("txtCCEmail_textBox").Clear();
            }

            //Set Confirmation Email
            if (confirmEmailAddress != "")
            {
                this._driver.FindElementById("txtEmail_textBox").SendKeys(confirmEmailAddress);
                TestLog.WriteLine(string.Format("Sending Email to {0}", this._driver.FindElementById("txtEmail_textBox").GetAttribute("value")));
            }

            //Set CC Email
            if (ccEmailAddress != "")
            {
                this._driver.FindElementById("txtCCEmail_textBox").SendKeys(ccEmailAddress);
                TestLog.WriteLine(string.Format("Sending CC Email to {0}", this._driver.FindElementById("txtCCEmail_textBox").GetAttribute("value")));

            }

            //Select Email
            if (sendEmail)
            {
                if (!this._driver.FindElementById("chkBoxEmail").Selected)
                {
                    this._driver.FindElementById("chkBoxEmail").Click();
                }
            }
            else
            {
                if (this._driver.FindElementById("chkBoxEmail").Selected)
                {
                    this._driver.FindElementById("chkBoxEmail").Click();
                }
            }

            TestLog.WriteLine(string.Format("Sending email: {0}", this._driver.FindElementById("chkBoxEmail").Selected));



            // Make payment type selection, poulate corresponding fields, submit the form
            int paymentTypeId = int.MinValue;
            //if (paymentMethod.Equals("Switch")) paymentMethod = "Switch / Maestro";
            new SelectElement(this._driver.FindElementById("ddlType_dropDownList")).SelectByText(paymentMethod);

            switch (paymentMethod)
            {
                case "Visa":
                    paymentTypeId = 1;
                    break;
                case "MasterCard":
                    paymentTypeId = 2;
                    break;
                case "American Express":
                    paymentTypeId = 3;
                    break;
                //case "Switch / Maestro":
                //    paymentTypeId = 11;
                //    break;
                //case "Solo":
                //    paymentTypeId = 13;
                //    break;
                default:
                    paymentTypeId = 1;
                    break;
            }


            switch (paymentMethod)
            {
                case "Visa":
                case "MasterCard":
                case "American Express":
                    //case "Switch / Maestro":
                    //case "Solo":
                    //paymentTypeId = 1;
                    this._driver.FindElementById("txtName_textBox").SendKeys(individualName);
                    this._driver.FindElementById("txtNumber_textBox").SendKeys(creditCardNumber);

                    //    // If Switch or Solo enter Valid From month/year
                    //    if ((paymentMethod == "Switch / Maestro"))
                    //    {
                    //        this._driver.FindElementById("dtCCStartDate").SendKeys(string.Format("{0}/{1}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).Month, DateTime.Now.Year));

                    //    }

                    this._driver.FindElementById("dtExpDate").SendKeys(string.Format("{0}/{1}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).Month, TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).AddYears(1).Year));

                    break;
                case "eCheck":
                    paymentTypeId = 19;
                    this._driver.FindElementById("txtBankFullName_textBox").SendKeys(individualName);
                    this._driver.FindElementById("txtBankRoutingNumber_textBox").SendKeys("111000025");
                    this._driver.FindElementById("txtBankAccountNumber_textBox").SendKeys("1234567890");
                    this._driver.FindElementById("ctlAddress_txtPhoneNumber_textBox").SendKeys("6302172170");
                    break;
                case "Cash":
                    paymentTypeId = 999;
                    break;
                case "Check":
                    paymentTypeId = 998;
                    this._driver.FindElementById("txtCheckNumber_textBox").SendKeys("1234");
                    break;
                default:
                    break;

            }

            //Fill out address info if needed
            if (newAddress)
            {

                //Clear out everything
                this._driver.FindElementById("ctlAddress_txtAddress1_textBox").Clear();
                this._driver.FindElementById("ctlAddress_txtAddress2_textBox").Clear();
                this._driver.FindElementById("ctlAddress_txtCity_textBox").Clear();
                this._driver.FindElementById("ctlAddress_txtPostalCode_textBox").Clear();

                new SelectElement(this._driver.FindElementById("ctlAddress_ddlCountry_dropDownList")).SelectByText(country);
                this._driver.FindElementById("ctlAddress_txtAddress1_textBox").SendKeys(address1);
                TestLog.WriteLine("Address 1: " + this._driver.FindElementById("ctlAddress_txtAddress1_textBox").Text);
                this._driver.FindElementById("ctlAddress_txtAddress2_textBox").SendKeys(address2);
                this._driver.FindElementById("ctlAddress_txtCity_textBox").SendKeys(city);

                //US only has states. UK has Provinces
                if (this._driver.FindElementById("ctlAddress_ddlState_dropDownList").Displayed)
                {
                    new SelectElement(this._driver.FindElementById("ctlAddress_ddlState_dropDownList")).SelectByText(state);
                }
                else
                {
                    this._driver.FindElementById("ctlAddress_txtState_textBox").SendKeys(state);

                }

                this._driver.FindElementById("ctlAddress_txtPostalCode_textBox").SendKeys(postalCode);


            }
            else
            {
                if (this._driver.FindElementById("ctlAddress_ddlCountry_dropDownList").GetAttribute("value").Equals("-2147483648")) { new SelectElement(this._driver.FindElementById("ctlAddress_ddlCountry_dropDownList")).SelectByText(country); }
                if (this._driver.FindElementById("ctlAddress_txtAddress1_textBox").GetAttribute("value").Equals("")) { this._driver.FindElementById("ctlAddress_txtAddress1_textBox").SendKeys(address1); TestLog.WriteLine("Address 1: " + this._driver.FindElementById("ctlAddress_txtAddress1_textBox").Text); };
                if (this._driver.FindElementById("ctlAddress_txtAddress2_textBox").GetAttribute("value").Equals("")) { this._driver.FindElementById("ctlAddress_txtAddress2_textBox").SendKeys(address2); };
                if (this._driver.FindElementById("ctlAddress_txtCity_textBox").GetAttribute("value").Equals("")) { this._driver.FindElementById("ctlAddress_txtCity_textBox").SendKeys(city); };

                //US only has states. UK has Provinces
                if (this._driver.FindElementById("ctlAddress_ddlState_dropDownList").Displayed)
                {
                    if (this._driver.FindElementById("ctlAddress_ddlState_dropDownList").GetAttribute("value").Equals("-2147483648")) { new SelectElement(this._driver.FindElementById("ctlAddress_ddlState_dropDownList")).SelectByText(state); }
                }

                if (this._driver.FindElementById("ctlAddress_txtPostalCode_textBox").GetAttribute("value").Equals("")) { this._driver.FindElementById("ctlAddress_txtPostalCode_textBox").SendKeys(postalCode); };
                //if (this._driver.FindElementById("ctlAddress_txtPhoneNumber_textBox").GetAttribute("value").Equals("")) { this._driver.FindElementById("ctlAddress_txtPhoneNumber_textBox").SendKeys(phoneNumber); };

            }

            string amountFormatted = string.Empty;
            submittedTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            DateTime utcdt;

            //TODO TIME
            if (churchCode.ToLower() == "qaeunlx0c6")
            {
                culture = new CultureInfo("en-GB");
                Thread.CurrentThread.CurrentCulture = culture;
                dateTimeFormat = "d/MM/yyyy HH:MM";
                utcdt = submittedTime.ToUniversalTime();
                //Central Time Zone
                utcdt.AddHours(6);
                //amountFormatted = string.Format(CultureInfo.CreateSpecificCulture("en-GB"), "{0:C}", amount);
                amountFormatted = string.Format("£{0}", amount);
            }
            else
            {
                culture = new CultureInfo("en-US");
                Thread.CurrentThread.CurrentCulture = culture;
                dateTimeFormat = "M/d/yyyy h:mm tt";
                utcdt = submittedTime;
                //amountFormatted = string.Format(CultureInfo.CreateSpecificCulture("en-US"), "{0:C}", amount);
                amountFormatted = string.Format("${0}", amount);
            }

            this._driver.FindElementById("btnSaveOrder").Click();

            try
            {
                this._generalMethods.WaitForElement(this._driver, By.Id("rptOrderSummary__ctl1_lblConfirmationCode"), 30);
            }
            catch (Exception e)
            {
                //Capture the error message if any
                IWebElement summaryTable = this._driver.FindElementByClassName(TableIds.Portal.WebLink_Validation_Summary);
                //string errorText = this._driver.FindElement(By.XPath("//table[@class='ValidationSummary']//tbody/tr/td[2]/")).Text;
                string errorText = summaryTable.FindElement(By.XPath("//tbody/tr/td[2]")).Text;
                TestLog.WriteLine(string.Format("Error: [{0}]", errorText));
                Assert.Fail(string.Format("Event Registration or Authorization Error: [{0}]", errorText));

            }

            // Get the confirmation code and reference number
            string confirmationCode = this._driver.FindElementByXPath("//span[@id='rptOrderSummary__ctl1_lblConfirmationCode']").Text;
            string referenceNumber = this._driver.FindElementByXPath("//span[@id='rptTransactionSummary__ctl1_lblReferenceNumber']").Text;

            TestLog.WriteLine(string.Format("Confirmation Code: {0}", confirmationCode));
            TestLog.WriteLine(string.Format("Reference Number: {0}", referenceNumber));

            this.TakeScreenShot_WebDriver();

            // Close the popup
            this._driver.Close();
            this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);

            // Verify the submission was created
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);

            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlForm_dropDownList")).SelectByText(formName);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").SendKeys(confirmationCode);
            this._driver.FindElementById(GeneralButtons.Search).Click();

            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ViewSubmissions, confirmationCode, "Confirmation Code", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_ViewSubmissions);
            Assert.AreEqual(individualName, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[3].Text);
            Assert.AreEqual(confirmationCode, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[5].Text);

            //string convertedAmount = String.Format(culture, "{0:C}", culture.NumberFormat.CurrencySymbol, amount);
            //Assert.AreEqual(string.Format(culture, "{0:C}", amount), table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[8].Text);
            Assert.AreEqual(amountFormatted, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[8].Text);
            //Assert.Between(table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[6].Text, utcdt.AddMinutes(-1).ToString(dateTimeFormat), utcdt.AddMinutes(1).ToString(dateTimeFormat));


            TestLog.WriteLine(string.Format("Amount: {0}", Convert.ToDouble(amount)));

            // Wait for the payment to complete
            if (waitProcess)
            {
                this._sql.Giving_WaitUntilPaymentProcessed(15, Convert.ToDouble(amount), submittedTime.AddMinutes(-2), "Event Registration", paymentTypeId, _generalMethods);
            }
            else
            {
                //Wait for a moment for e-mail to be processed.
                System.Threading.Thread.Sleep(5000);

            }

            confirmRefNumber[0] = confirmationCode;
            confirmRefNumber[1] = referenceNumber;

            return confirmRefNumber;
        }

        public void WebLink_ViewSubmissions_VerifyNewSubmission(string formName, string confirmationCode, String individualName, string churchCode, string payementType="Visa", string amount = "2.00", bool waitProcess=true)
        {
            string amountFormatted = string.Empty;
            CultureInfo culture = null;
            string dateTimeFormat = string.Empty;
            string[] confirmRefNumber = new string[2];
            DateTime submittedTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            DateTime utcdt;

            //TODO TIME
            if (churchCode.ToLower() == "qaeunlx0c6")
            {
                culture = new CultureInfo("en-GB");
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                dateTimeFormat = "d/MM/yyyy HH:MM";
                utcdt = submittedTime.ToUniversalTime();
                //Central Time Zone
                utcdt.AddHours(6);
                //amountFormatted = string.Format(CultureInfo.CreateSpecificCulture("en-GB"), "{0:C}", amount);
                amountFormatted = string.Format("£{0}", amount);
            }
            else
            {
                culture = new CultureInfo("en-US");
                System.Threading.Thread.CurrentThread.CurrentCulture = culture;
                dateTimeFormat = "M/d/yyyy h:mm tt";
                utcdt = submittedTime;
                //amountFormatted = string.Format(CultureInfo.CreateSpecificCulture("en-US"), "{0:C}", amount);
                amountFormatted = string.Format("${0}", amount);
            }

            // Verify the submission was created
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);

            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlForm_dropDownList")).SelectByText(formName);
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").Clear();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").SendKeys(confirmationCode);
            this._driver.FindElementById(GeneralButtons.Search).Click();

            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ViewSubmissions, confirmationCode, "Confirmation Code", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_ViewSubmissions);
            Assert.AreEqual(individualName, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[3].Text);
            Assert.AreEqual(confirmationCode, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[5].Text);

            //string convertedAmount = String.Format(culture, "{0:C}", culture.NumberFormat.CurrencySymbol, amount);
            //Assert.AreEqual(string.Format(culture, "{0:C}", amount), table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[8].Text);
            Assert.AreEqual(amountFormatted, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[8].Text);
            //Assert.Between(table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[6].Text, utcdt.AddMinutes(-1).ToString(dateTimeFormat), utcdt.AddMinutes(1).ToString(dateTimeFormat));


            TestLog.WriteLine(string.Format("Amount: {0}", Convert.ToDouble(amount)));

            int paymentTypeId = int.MinValue;

            switch (payementType.ToLower())
            {
                case "visa":
                    paymentTypeId = 1;
                    break;
                case "mastercard":
                    paymentTypeId = 2;
                    break;
                case "american express":
                    paymentTypeId = 3;
                    break;
                case "discover":
                case "switch":
                    paymentTypeId = 11;
                    break;
                case "echeck":
                    paymentTypeId = 19;
                    break;
                case "cash":
                    paymentTypeId = 999;
                    break;
                case "check":
                    paymentTypeId = 998;
                    break;
            }

            // Wait for the payment to complete
            if (waitProcess)
            {
                //TODO: Below method is used for leagcy payment process track, we have to write a similar one for AMS payment.
                // this._sql.Giving_WaitUntilPaymentProcessed(15, Convert.ToDouble(amount), submittedTime.AddMinutes(-10), "Event Registration", paymentTypeId, _generalMethods);
                // Sleep for 60 seconds to wait for payment is completed.
                System.Threading.Thread.Sleep(60000);
            }
            else
            {
                //Wait for a moment for e-mail to be processed.
                System.Threading.Thread.Sleep(5000);

            }

        }

        // Created by Mady Kou to replace the old method: Weblink_ViewSubmissions_Register
        /// <param name="individualName">The name of the individual to be registered.</param>
        /// <param name="formName">The name of the registration form.</param>
        public void Weblink_ViewSubmissions_OpenRegisterWindow(string individualName, string formName)
        {
            string dateTimeFormat = string.Empty;
            string[] confirmRefNumber = new string[2];

            //this._driver.Manage().Timeouts().ImplicitlyWait(TimeSpan.FromSeconds(180));

            // Add a submission
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);
            this._driver.FindElementByLinkText("Add").Click();

            // Find a person
            this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(individualName);

            // Select the form
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlForm_dropDownList")).SelectByText(formName);


            // Add submission
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnAddRegistration").Click();
            Retry.WithPolling(500).WithTimeout(15000).Until(() => this._driver.WindowHandles.Count > 1);
            this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);

            //Allow Cookies if Needed
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("btnAcceptCookies")))
            {
                this._driver.FindElementById("btnAcceptCookies").Click();
            }
            //modify by ivan.zhang. it looks like allow cookies id was changed to submitQuery.
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("submitQuery")))
            {
                this._driver.FindElementById("submitQuery").Click();
            }

        }


        public void Weblink_ViewSubmissions_Verify_CC_Images(string individualName, string formName)
        {


            // Add a submission
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);
            this._driver.FindElementByLinkText("Add").Click();

            // Find a person
            this._generalMethods.SelectIndividualFromFindPersonPopupWebDriver(individualName);

            // Select the form
            new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlForm_dropDownList")).SelectByText(formName);


            // Add submission
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnAddRegistration").Click();
            Retry.WithPolling(500).WithTimeout(15000).Until(() => this._driver.WindowHandles.Count > 1);
            this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);

            //Allow Cookies if Needed
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("btnAcceptCookies")))
            {
                this._driver.FindElementById("btnAcceptCookies").Click();
            }

            //Select Individual
            this._driver.FindElementByXPath(string.Format("//span[contains(@id, 'dgFormIndividuals_') and text()='{0}']/ancestor::td/preceding-sibling::td/input[2]", individualName)).Click();

            //Wait for Payment Form
            this._generalMethods.WaitForElement(this._driver, By.Id("bank_card_images"), 30);

            //Verify CC Images Displayed Initially
            this._generalMethods.Verify_CC_Images("ddlType_dropDownList");

            //Force an type error 
            this._driver.FindElementById("btnSaveOrder").Click();

            //Verify CC Images are still there
            this._generalMethods.Verify_CC_Images("ddlType_dropDownList");

            //Select Type
            new SelectElement(this._driver.FindElementById("ddlType_dropDownList")).SelectByText("Visa");

            //Verify CC Images are still there
            this._generalMethods.Verify_CC_Images("ddlType_dropDownList");

            //Type Name and CC
            this._driver.FindElementById("txtName_textBox").SendKeys(individualName);
            this._driver.FindElementById("txtNumber_textBox").SendKeys("4111111111111111");

            //Verify CC Images are still there
            this._generalMethods.Verify_CC_Images("ddlType_dropDownList");


            // Close the popup
            this._driver.Close();
            this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);

        }



        /// <summary>
        /// Attempts to refund a payment from a web form submission.
        /// </summary>
        /// <param name="confirmationCode">The confirmation code of the original submission.</param>
        /// <param name="type">The type of payment being refunded.</param>
        public void Weblink_ViewSubmissions_ProcessAdditionalPaymentOrRefund(string confirmationCode, string type, string action)
        {
            // Navigate to weblink->view submissions
            System.Threading.Thread.Sleep(10000);
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);

            // View the submission

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").SendKeys(confirmationCode);
            this._driver.FindElementById(GeneralButtons.Search).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText("View"));
            this._driver.FindElementByLinkText("View").Click();


            // Process a refund or additional payment
            string command = action == "Refund" ? "Refund" : "Add payment";

            TestLog.WriteLine(string.Format("{0} Confirmation Code: {1}", command, confirmationCode));
            this._generalMethods.WaitForElement(this._driver, By.LinkText(command));
            this._driver.FindElementByLinkText(command).Click();

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_mainFieldset_txtPaymentAmount_textBox").SendKeys("2");
            SelectElement dropDown = new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_mainFieldset_ddlbPaymentMethod_dropDownList"));
            if (!string.IsNullOrEmpty(type) && dropDown.SelectedOption.Text != type)
            {
                dropDown.SelectByText(type);
            }
            if (type == "Check")
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtCheckNumber_textBox").SendKeys("4321");
            }

            this._driver.FindElementById(GeneralButtons.Save).Click();

            // Verify the refund or additional payment was processed
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_ViewSubmissions_AddPaymentRefund);
            int itemRow = table.FindElements(By.TagName("tr")).Count - 2;
            int itemColumn = action == "Refund" ? 1 : 0;
            string paymentMethodContains = action == "Refund" ? string.Format("Refund: {0}", type) : type;
            string amount = action == "Refund" ? "($2.00)" : "$2.00";

            DateTime now = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            Assert.AreEqual(now.ToString("M/d/yyyy"), table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[itemColumn].Text);
            Assert.AreEqual("Complete", table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[itemColumn + 1].Text);
            if (type != "Cash" && type != "Check")
            {
                Assert.IsTrue(table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[itemColumn + 2].Text.Contains(paymentMethodContains));
            }
            else if (type == "Cash")
            {
                Assert.AreEqual(type, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[itemColumn + 2].Text);
            }
            Assert.IsNotNull(table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[itemColumn + 4].Text);
            Assert.AreEqual(amount, table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[itemColumn + 5].Text);

            // Return to the form summary
            this._driver.FindElementByLinkText("Done").Click();

            // Verify the amounts
            string paidAmount = action == "Refund" ? "$0.00" : "$2.00";
            string amountDue = action == "Refund" ? "$2.00" : "$0.00";
            Assert.AreEqual(paidAmount, this._driver.FindElementById("ctl00_ctl00_MainContent_content_rptOrderSummary_ctl02_lblPaid").Text);
            Assert.AreEqual(amountDue, this._driver.FindElementById("ctl00_ctl00_MainContent_content_rptOrderSummary_ctl02_lblAmountDue").Text);

            // Return to the view submissions page, verify the paid amount for the submission
            this._driver.FindElementByLinkText("Back").Click();
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").SendKeys(confirmationCode);
            this._driver.FindElementById(GeneralButtons.Search).Click();
            Assert.AreEqual(paidAmount, this._driver.FindElementById(TableIds.Portal.WebLink_ViewSubmissions).FindElements(By.TagName("tr"))[2].FindElements(By.TagName("td"))[8].Text);
            Assert.AreEqual(paidAmount, this._driver.FindElementById("ctl00_ctl00_MainContent_content_dgIndividualForms_ctl11_lblTotalPaidAmount").Text);
        }

        public void Weblink_ViewSubmissions_ProcessEmailReceipt(string confirmationCode, string referenceNumber,
                    string individualName, string date, string confirmEmailAddress = "", string ccEmailAddress = "",
                    string formName = "A Test Form")
        {

            string command = "Email receipt";

            // Navigate to weblink->view submissions
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);

            // View the submission

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").SendKeys(confirmationCode);
            this._driver.FindElementById(GeneralButtons.Search).Click();
            this._driver.FindElementByLinkText("View").Click();


            TestLog.WriteLine(string.Format("{0} Confirmation Code: {1}", command, confirmationCode));
            this._generalMethods.WaitForElement(this._driver, By.LinkText(command));
            this._driver.FindElementByLinkText(command).Click();

            Retry.WithPolling(500).WithTimeout(15000).Until(() => this._driver.WindowHandles.Count > 1);
            this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);

            //txtToEmail_textBox
            //txtCCEmail_textBox
            //rptOrderSummary_ctl01_lblConfirmationCode
            //rptTransactionSummary_ctl01_lblReferenceNumber
            //btnSendEmail

            //Clear Email text boxes           
            this._driver.FindElementById("txtToEmail_textBox").Clear();
            this._driver.FindElementById("txtCCEmail_textBox").Clear();

            //Set Confirmation Email
            if (confirmEmailAddress != "")
            {
                this._driver.FindElementById("txtToEmail_textBox").SendKeys(confirmEmailAddress);
                TestLog.WriteLine(string.Format("Sending Email to {0}", this._driver.FindElementById("txtToEmail_textBox").GetAttribute("value")));
            }

            //Set CC Email
            if (ccEmailAddress != "")
            {
                this._driver.FindElementById("txtCCEmail_textBox").SendKeys(ccEmailAddress);
                TestLog.WriteLine(string.Format("Sending CC Email to {0}", this._driver.FindElementById("txtCCEmail_textBox").GetAttribute("value")));

            }


            //Verify Receipt Information
            //rptOrderSummary_ctl01_lblIndividualName
            Assert.AreEqual(individualName, this._driver.FindElementById("rptOrderSummary_ctl01_lblIndividualName").Text, "Individual Name Email receipt error");

            //rptOrderSummary_ctl01_lblConfirmationCode
            Assert.AreEqual(confirmationCode, this._driver.FindElementById("rptOrderSummary_ctl01_lblConfirmationCode").Text, "Confirmation Code Email receipt error");

            //rptTransactionSummary_ctl01_lblTransactionDate
            Assert.AreEqual(date, this._driver.FindElementById("rptTransactionSummary_ctl01_lblTransactionDate").Text, "Transaction Date Email receipt error");

            //rptTransactionSummary_ctl01_lblReferenceNumber
            Assert.AreEqual(referenceNumber, this._driver.FindElementById("rptTransactionSummary_ctl01_lblReferenceNumber").Text, "Reference Number Email receipt error");

            //rptOrderSummary_ctl01_rptOrderIDs_ctl00_rptOrderItems_ctl01_lblOrderLineItemName
            Assert.AreEqual(formName, this._driver.FindElementById("rptOrderSummary_ctl01_rptOrderIDs_ctl00_rptOrderItems_ctl01_lblOrderLineItemName").Text, "Form Name Email receipt error");

            this._driver.FindElementById("btnSendEmail").Click();

            this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);

        }

        #endregion View Submissions



        #endregion Event Registration

        #region Volunteer Application

        /// <summary>
        /// Adds an Associated Portal User to an Opportunity
        /// </summary>
        /// <param name="formName">The name of the form</param>
        /// <param name="portalUserName">The name of the portal user</param>
        public void WebLink_FormNames_AddAssociatedUser(string formName, string portalUserName)
        {
            // Navigate to weblink->volunteer application->manage forms
            this._selenium.Click("link=WebLink");
            this._selenium.ClickAndWaitForPageToLoad("//*[@id='nav_sub_7']/dl[2]/dd/a");

            // Edit an existing volunteer form
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnEdit");

            // Select form to edit and continue to opportunities page
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddVolunteerApplicationId", formName);
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnEditExisting");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnEditFormName");

            // Edit an opportunity and associate a portal user
            this._selenium.ClickAndWaitForPageToLoad("link=Edit");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnMod");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");

            // Select portal user to associate
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddUserId", portalUserName);
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnAdd");

            // Click done and return to opportunities page
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");

            // Verify portal user was added
            this._selenium.ClickAndWaitForPageToLoad("link=Edit");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnMod");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");

        }

        /// <summary>
        /// Removes an Associated Portal User to an Opportunity
        /// </summary>
        /// <param name="formName">The name of the form</param>
        /// <param name="portalUserName">The name of the portal user</param>
        public void WebLink_FormNames_RemoveAssociatedUser(string formName, string portalUserName)
        {
            // Navigate to weblink->volunteer application->manage forms
            this._selenium.Click("link=WebLink");
            this._selenium.ClickAndWaitForPageToLoad("//*[@id='nav_sub_7']/dl[2]/dd/a");

            // Edit an existing volunteer form
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnEdit");

            // Select form to edit and continue to opportunities page
            this._selenium.Select("ctl00_ctl00_MainContent_content_ddVolunteerApplicationId", formName);
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnEditExisting");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnEditFormName");

            // Edit an opportunity and associate a portal user
            this._selenium.ClickAndWaitForPageToLoad("link=Edit");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnMod");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");

            // Remove associated portal user
            this._selenium.VerifyTextPresent(portalUserName);
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_rptrVolunteerOpportunityUser_ctl00_urlDelete");

            // Click done and return to opportunities page
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");

            // Verify portal user was removed
            this._selenium.ClickAndWaitForPageToLoad("link=Edit");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnMod");
            this._selenium.ClickAndWaitForPageToLoad("ctl00_ctl00_MainContent_content_btnContinue");
            this._selenium.VerifyElementNotPresent(portalUserName);

        }
        #endregion Volunteer Application

        #region InFellowship Features
        public void WebLink_Toggle_InFellowship_Feature(string feature, bool onOff, [Optional] bool toggleOptions, [Optional] Dictionary<string, bool> options)
        {
            this._selenium.Navigate(Navigation.WebLink.InFellowship.Features);

            // Select the specified ribbon
            this._selenium.Click(string.Format("//a[@class='feature_section' and span[position()=2 and text()='{0}']]", feature));

            if (onOff)
            {
                if (this._selenium.IsElementPresent(string.Format("//ul[@id='feature_sections']/li[*]/a/span[position()=2 and text()='{0}' and ancestor::a/following-sibling::label[@class='on_off_toggle feature_enabler']]", feature)))
                {
                    this._selenium.Click(string.Format("//input[ancestor::li/a/span[position()=2 and text()='{0}']]/ancestor::label", feature));
                }

                // If options are provided, make the selections
                if (toggleOptions)
                {
                    foreach (KeyValuePair<string, bool> option in options)
                    {
                        if (option.Value)
                        {
                            if (!this._selenium.IsChecked(string.Format("//label[contains(text(), '{0}')]/ancestor::td/preceding-sibling::th/input", option.Key)))
                            {
                                this._selenium.Click(string.Format("//label[contains(text(), '{0}')]/ancestor::td/preceding-sibling::th/input", option.Key));
                            }
                        }
                        else
                        {
                            if (this._selenium.IsChecked(string.Format("//label[contains(text(), '{0}')]/ancestor::td/preceding-sibling::th/input", option.Key)))
                            {
                                this._selenium.Click(string.Format("//label[contains(text(), '{0}')]/ancestor::td/preceding-sibling::th/input", option.Key));
                            }
                        }
                    }
                    this._selenium.Click(string.Format("//label[contains(text(), '{0}')]/ancestor::table/following-sibling::p/span/input[@value='Save changes']", options.ElementAt(0).Key));
                }
            }
            else
            {
                if (this._selenium.IsElementPresent(string.Format("//ul[@id='feature_sections']/li[*]/a/span[position()=2 and text()='{0}' and ancestor::a/following-sibling::label[@class='on_off_toggle feature_enabler on_off_toggle_active']]", feature)))
                {
                    this._selenium.Click(string.Format("//input[ancestor::li/a/span[position()=2 and text()='{0}']]/ancestor::label", feature));
                }
            }
        }

        #endregion InFellowship Features

        #region InFellowship Branding
        /// <summary>
        /// Views the custom content section of Branding.
        /// </summary>
        /// <param name="test"></param>
        public void WebLink_Branding_View_Custom_Content()
        {
            // View branding
            this._selenium.Navigate(Navigation.WebLink.InFellowship.Branding);

            // Click on custom content
            this._selenium.ClickAndWaitForPageToLoad("link=Custom content");
        }

        /// <summary>
        /// Updates the color theme for InFellowship.
        /// </summary>
        /// <param name="test"></param>
        /// <param name="brandingColor">The desired color scheme for InFellowship.</param>
        public void WebLink_Branding_Update_ColorTheme(GeneralEnumerations.InFellowshipBrandingColors brandingColor)
        {
            // View Branding
            this._selenium.Navigate(Navigation.WebLink.InFellowship.Branding);

            // Select the color
            this._selenium.Click(string.Format("radio_theme_{0}", brandingColor.ToString()));

            // Submit
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
        }

        /// <summary>
        /// Updates the miscellaneous text for section two of Branding.
        /// </summary>
        /// <param name="test"></param>
        /// <param name="miscellaneousText">The text you wish to specify.</param>
        public void WebLink_Branding_Update_SectionTwo_Text(string miscellaneousText)
        {
            // View Custom Content
            this.WebLink_Branding_View_Custom_Content();

            // Check Miscellaneous under section two and specify the text
            this._selenium.ClickAndWaitForCondition("css=tbody > tr:last-child > td > input[name=inf_branding_radio_grp_3]", this._javascript.IsElementPresentSelector("textarea:enabled"), "5000");
            this._selenium.Type("inf_church_address", miscellaneousText);

            // Submit
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
        }

        /// <summary>
        /// Sets the custom content for section two to default.
        /// </summary>
        /// <param name="test"></param>
        public void WebLink_Branding_Update_SectionTwo_SetToDefault()
        {
            // View Custom Content
            this.WebLink_Branding_View_Custom_Content();

            // Check Default for Section two
            this._selenium.Click("css=tbody > tr:first-child > td > input[name=inf_branding_radio_grp_3]");

            // Submit
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
        }

        /// <summary>
        /// Updates the miscellaneous text for section three of Branding.
        /// </summary>
        /// <param name="test"></param>
        /// <param name="miscellaneousText">The text you wish to specify.</param>
        public void WebLink_Branding_Update_SectionThree_Text(string miscellaneousText)
        {
            // View Custom Content
            this.WebLink_Branding_View_Custom_Content();

            // Check Miscellaneous under section three and specify the text
            this._selenium.ClickAndWaitForCondition("css=tbody > tr:last-child > td > input[name=inf_branding_radio_grp_2]", this._javascript.IsElementPresent("inf_footer_misc"), "5000");
            //this._selenium.ClickAndWaitForCondition("css=tbody > tr:last-child > td > input[name=inf_branding_radio_grp_2]", this._javascript.IsElementPresentSelector("textarea:enabled"), "5000");
            this._selenium.Type("inf_footer_misc", miscellaneousText);

            // Submit
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
        }

        /// <summary>
        /// Sets the custom content for section three to default.
        /// </summary>
        /// <param name="test"></param>
        public void WebLink_Branding_Update_SectionThree_SetToDefault()
        {
            // View Custom Content
            this.WebLink_Branding_View_Custom_Content();

            // Check Default for Section three
            this._selenium.Click("css=tbody > tr:first-child > td > input[name=inf_branding_radio_grp_2]");

            // Submit
            this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.submitQuery);
        }
        #endregion InFellowship Branding

        #region Online Giving
        public void WebLink_ConfirmationMessage_Update(string from, string subjectLine, string message)
        {
            // Navigate to weblink->confirmation message
            this._selenium.Navigate(Navigation.WebLink.Online_Giving.Confirmation_Messages);

            // Reset data
            this._selenium.Click("link=Use Default Values");

            // Edit with test data
            this._selenium.ClickAndWaitForPageToLoad("link=Contribution Failure");
            this._selenium.Type("FromAddress", from);
            this._selenium.Type("SubjectLine", subjectLine);
            this._selenium.Type("EmailMessage", message);
            this._selenium.ClickAndWaitForPageToLoad("Save");

            // Verify message was updated
            Assert.AreEqual(from, this._selenium.GetValue("FromAddress"));
            Assert.AreEqual(subjectLine, this._selenium.GetValue("SubjectLine"));
            Assert.AreEqual(message, this._selenium.GetValue("EmailMessage"));
        }
        #endregion Online Giving
        #endregion WebLink

        #region Infellowship

        /// <summary>
        /// Verify Confirmation Email Information
        /// </summary>
        /// <param name="email">Email Message</param>
        /// <param name="from">From Receipt</param>
        /// <param name="confirmationCode">Confirmation Code</param>
        /// <param name="referenceNumber">Reference Number</param>
        /// <param name="individualName">Individual Name</param>
        /// <param name="formName">Form Name</param>
        /// <param name="amount">Amount</param>
        /// <param name="date">Date</param>
        /// <param name="creditCardNumber">Full Credit Card Number</param>
        /// new for the reg2 email verification. created by ivan.zhang
        public void Verify_Reg2_Confirmation_Email(Message email, string from, string confirmationCode, string referenceNumber,
                  string individualName, string formName, double amount, string date, string creditCardNumber)
        {

            string subject = "Registration Confirmation";

            //TestLog.WriteLine(email.BodyHtml.Text);
            string partialCC = creditCardNumber.Substring(creditCardNumber.Length - 3);
            TestLog.WriteLine(string.Format("Partial CC: {0}", partialCC));

            Assert.IsNotNull(email, string.Format("No Email Messages Found with Confirmation Code ", confirmationCode));
            //Do we want to verify appended verbage or just make sure it's there
            Assert.Contains(email.Subject, subject, "Email Subject Verification Error");
            Assert.AreEqual(from, email.From.ToString(), "Email From Verification Error");
            Assert.Contains(email.BodyHtml.Text, confirmationCode, "Confirmation Code Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, referenceNumber, "Reference Number Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, individualName, "Individual Name Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, formName, "Form Name Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, Convert.ToString(amount), "Amount Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, partialCC, "Partial CC Body Verification Error");
            Assert.DoesNotContain(email.BodyHtml.Text, creditCardNumber, "Full CC Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, date, "Date Body Verification Error");

        }
        //add by grace for Enable or Disable self-checkin
        public void Weblink_EnterInfellowshipFeature()
        {
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.InFellowship.Features.Features_Link);
        }

        #endregion End Infellowship

        #region Email

        public string Get_URL_Email_Body(string bodyText)
        {

            string address1 = string.Empty;
            string url = string.Empty;

            //MatchCollection mc = Regex.Matches(bodyText, @"(www[^ \s]+|http[^ \s]+)([\s]|$)", RegexOptions.IgnoreCase);
            MatchCollection mc = Regex.Matches(bodyText, @"(http[^ \s]+)([\s]|$)", RegexOptions.IgnoreCase);
            //string patternURL = "<a[\\s]+[^>]*?href[\\s]?=[\\s\\\"\']+(?<href>.*?)[\\\"\\']+.*?>(?<fileName>[^<]+|.*?)?<\\/a>";
            //MatchCollection mc = Regex.Matches(bodyText, patternURL, RegexOptions.IgnoreCase);

            if (mc.Count > 0)
            {
                address1 = mc[0].Value;

                log.Debug(string.Format("Body URL 1: {0}", address1));

                //Find the first instance and second instance
                //What is in between is what we want
                int indx1 = address1.IndexOf("http");
                int indx2 = address1.IndexOf("\">http");

                //log.Debug("indx1" + indx1);
                //log.Debug("indx2" + indx2);

                //Get String 
                url = address1.Substring(indx1, indx2);
            }

            log.Debug("URL: " + url);

            return url;

        }

        /// <summary>
        /// Retrieves GMAIL Messages using IMAP Client. Other email services will be supported at a later date
        /// </summary>
        /// <param name="mailFolder">Mail Folder where messages should be found i.e. Inbox, Outbox, Spam, etc</param>
        /// <param name="searchPhrase">Search Phrase i.e. ALL, UNSEEN</param>
        /// <param name="emailAddr">Email Accont Address</param>
        /// <param name="password">Email Account Password</param>
        /// <returns>Message Retrieved</returns>
        public MessageCollection Retrieve_Email(string mailFolder, string searchPhrase, string emailAddr, string password, string body = "", bool waitForMsg = true)
        {

            log.Debug("Enter Rertireve Email: " + emailAddr);

            //Wait before retrieiving e-mail
            if (waitForMsg) Thread.Sleep(TimeSpan.FromSeconds(30));

            Imap4Client client = new Imap4Client();

            //Only support GMAIL
            //TODO add other e-mail services
            Assert.AreEqual(true, emailAddr.ToUpper().Contains("@GMAIL.COM"), "Only gmail is supported");
            client.ConnectSsl("imap.gmail.com", 993);

            //Verify connected
            Assert.AreEqual(true, client.IsConnected, "Not connected to Email client");
            log.Debug("Login to Address: " + emailAddr);
            client.Login(emailAddr, password);

            MessageCollection messages = new MessageCollection();
            Mailbox mails;
            int waitNewMsg = 0;

            log.Debug("Get Email");

            do
            {

                //Go to Mail Folder
                log.Debug("Go to " + mailFolder);

                //Get Messages by phrase i.e. ALL, UNSEEN
                try
                {
                    mails = client.SelectMailbox(mailFolder);
                    messages = mails.SearchParse(searchPhrase);
                }
                catch (Exception e)
                {
                    messages.Clear();

                }

                //if(this.Search_Portal_Email_By_Text_Body(messages, body) == null){
                waitNewMsg++;
                //}

                //} while ((messages.Count <= 0) || (waitNewMsg < 5));
            } while ((messages.Count <= 0) && (waitNewMsg < 5));

            log.Debug("Email Messages found: " + messages.Count);

            client.Disconnect();

            log.Debug("Exit Retrieve Email");

            return messages;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="emailAddr"></param>
        /// <param name="password"></param>
        /// <param name="subject"></param>
        /// <param name="emailBody"></param>
        /// <param name="confirmEmail"></param>
        /// <param name="sentEmailSubject"></param>
        /// <returns></returns>
        public Message Retrieve_Search_Email(string emailAddr, string password, string emailBody, bool confirmEmail = false, string confirmEmailSubject = "")
        {
            DateTime startTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            string mailbox = EmailMailBox.GMAIL.INBOX;
            MessageCollection messages = Retrieve_Email(mailbox, EmailMailBox.SearchParse.ALL, emailAddr, password, emailBody);
            Message emailFound = Search_Portal_Email_By_Text_Body(messages, emailBody, confirmEmail, confirmEmailSubject);

            //Let's serach in SPAM
            if (emailFound == null)
            {
                mailbox = EmailMailBox.GMAIL.SPAM;
                messages = Retrieve_Email(mailbox, EmailMailBox.SearchParse.ALL, emailAddr, password, emailBody, false);
                emailFound = Search_Portal_Email_By_Text_Body(messages, emailBody, confirmEmail, confirmEmailSubject);
            }

            //If Email was found delete it and trash it
            if (emailFound != null)
            {
                Delete_Email(emailFound, emailAddr, password, mailbox);
            }

            TestLog.WriteLine("Took Retrieve and Delete Email: {0}", (TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")) - startTime));

            return emailFound;
        }

        public void Test_Print_Message_ID(Message emailFound, string emailAddr, string password, string mailFolder)
        {

            Imap4Client client = new Imap4Client();
            bool deleteSuccess = false;

            //Only support GMAIL
            //TODO add other e-mail services
            Assert.AreEqual(true, emailAddr.ToUpper().Contains("@GMAIL.COM"), "Only gmail is supported");
            client.ConnectSsl("imap.gmail.com", 993);

            //Verify connected
            Assert.AreEqual(true, client.IsConnected, "Not connected to Email client");
            log.Debug("Login to Address: " + emailAddr);
            client.Login(emailAddr, password);


            Mailbox inbox = client.SelectMailbox("inbox");
            int[] ids = inbox.Search("ALL");
            if (ids.Length > 0)
            {
                Message msg = null;
                for (var i = 0; i < ids.Length; i++)
                {
                    msg = inbox.Fetch.MessageObject(ids[i]);
                    //if (msg.MessageId == action_id)
                    //{
                    //    imap.Command("copy " + ids[i].ToString() + " [Gmail]/" + action_flag);
                    //    break;
                    //}
                    log.Debug("ID: " + ids[i].ToString());
                    log.Debug("MSG ID: " + msg.MessageId.ToString());
                }
            }
        }


        public void Delete_Email(Message emailFound, string emailAddr, string password, string mailFolder)
        {

            DateTime beginTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            log.Debug("Enter Delete Email ");

            //Before we do anything let's check if we have e-mail to delete
            Assert.IsNotNull(emailFound, "No Email Messages To Delete");

            Imap4Client client = new Imap4Client();
            bool deleteSuccess = false;

            //Only support GMAIL
            //TODO add other e-mail services
            Assert.AreEqual(true, emailAddr.ToUpper().Contains("@GMAIL.COM"), "Only gmail is supported");
            client.ConnectSsl("imap.gmail.com", 993);

            //Verify connected
            Assert.AreEqual(true, client.IsConnected, "Not connected to Email client");
            log.Debug("Login to Address: " + emailAddr);
            client.Login(emailAddr, password);

            //Is email already in Trash?
            deleteSuccess = isEmailDeleted(client, emailFound);

            if (!deleteSuccess)
            {

                //Go to Mail Folder
                log.Debug(string.Format("Get mail from folder: {0}", mailFolder));
                Mailbox mails = client.SelectMailbox(mailFolder);
                int[] ids = mails.Search(EmailMailBox.SearchParse.ALL);

                if (ids.Length > 0)
                {
                    //Trash it!

                    Message msg = null;
                    for (var i = 0; i < ids.Length; i++)
                    {

                        msg = mails.Fetch.MessageObject(ids[i]);
                        //log.Debug("Message: " + ids[i].ToString());
                        //log.Debug("MSG ID: \n" + msg.MessageId);

                        if (msg.MessageId == emailFound.MessageId)
                        {
                            log.Debug("Found MSG ID: \n" + emailFound.MessageId);
                            client.Command("capability");
                            client.Command("copy " + ids[i].ToString() + " [Gmail]/Trash");
                            break;
                        }
                    }
                }

                //Check if email was deleted
                deleteSuccess = isEmailDeleted(client, emailFound);

            }

            Assert.IsTrue(deleteSuccess, "Email not deleted");

            if (deleteSuccess)
            {
                DeleteGmailTrash(client);
            }

            client.Disconnect();

            DateTime endTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

            log.Debug("[EXIT] Time To Delete Email: " + (endTime - beginTime));

        }

        public void DeleteGmailTrash(Imap4Client client)
        {

            log.Debug("Enter Empty Trash");
            Mailbox mailbox = client.SelectMailbox(EmailMailBox.GMAIL.TRASH);
            FlagCollection flags = new FlagCollection();
            flags.Add("Deleted");
            for (int i = 1; i <= mailbox.MessageCount; i++) mailbox.AddFlagsSilent(i, flags);
            mailbox.SourceClient.Expunge();

            log.Debug("Exit Empty Trash");

        }


        public bool isEmailDeleted(Imap4Client client, Message emailFound)
        {
            //This is adding time to verification
            //commenting - FGJ
            /*
            DateTime beginTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            log.Debug("Enter isEmailDeleted");

            bool emailDeleted = false;
            MessageCollection messages = null;

            //Verify email is moved to Gmail/Trash            
            Mailbox trashMails = client.SelectMailbox(EmailMailBox.GMAIL.TRASH);
            if (trashMails.MessageCount == 0) {
                messages = trashMails.SearchParse(EmailMailBox.SearchParse.ALL);
                log.Debug("Trash Messages: " + messages.Count);
            }

            if (messages != null) {
                foreach (Message email in messages) {

                    if (emailFound.MessageId.ToString().Equals(email.MessageId.ToString())) {
                        log.InfoFormat(string.Format("Email id [{3}] deleted \n <p>{0}: {1}</p><p>{2}</p>", email.From, email.Subject, email.BodyHtml.Text, email.MessageId.ToString()));
                        emailDeleted = true;
                        break;
                    }
                }

                DateTime endTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
                log.Debug("Exit isEmailDeleted: " + emailDeleted + " in " + (endTime - beginTime));

            }else {
                log.Debug("No Emails Found");
                emailDeleted = true;
            }
            
            return emailDeleted;
             */

            return true;

        }

        public Message Verify_Confirmation_Email(Message message, string subject, string from, string replyTo, string[] recipients, string emailBody, string sentEmailSubject)
        {
            return this.Verify_Portal_Email(message, subject, from, replyTo, recipients, emailBody, true, sentEmailSubject);
        }

        public Message Verify_Sent_Email(Message message, string subject, string from, string replyTo, string[] recipients, string emailBody)
        {
            //return this.Verify_Retrieve_Email(messages, emailTimeStamp, subject, from, replyTo, recipients, emailBody, false, "");
            return this.Verify_Portal_Email(message, subject, from, replyTo, recipients, emailBody, false, "");
        }

        public Message Verify_EventRegistration_Confirmation_Email(Message message, string subject, string from, string replyTo, string[] recipients, string emailBody, string confirmcode, string[] individual)
        {

            return this.Verify_EventRegistration_Email(message, subject, from, replyTo, recipients, emailBody, false, "", confirmcode, individual);

        }

        #region Weblink
        /// <summary>
        /// Search Weblink Confirmation Email
        /// </summary>
        /// <param name="messages">Messages retrieved from e-mail account</param>
        /// <param name="confirmationCode">Search by confirmation code</param>
        /// <returns>Email message found if any else null</returns>
        public Message Search_Weblink_Confirmation_Email(MessageCollection messages, string confirmationCode)
        {

            log.DebugFormat("Enter Search Weblink Confirmation Email {0}", confirmationCode);

            Message emailFound = null;

            foreach (Message email in messages)
            {

                //log.InfoFormat("FROM: {0}", email.From.ToString());
                //log.InfoFormat("REPL: {0}", email.ReplyTo.ToString());
                //log.InfoFormat("SUBJ: {0}", email.Subject.ToString());
                //log.InfoFormat("BODY: {0}", email.BodyHtml.Text);

                if (email.BodyHtml.Text.Contains(confirmationCode))
                {
                    log.InfoFormat("Email Found with Confirmation Number [{0}]", confirmationCode);
                    emailFound = email;

                    log.InfoFormat("Found FROM: {0}", emailFound.From.ToString());
                    //log.InfoFormat("Found REPL: {0}", emailFound.ReplyTo.ToString());
                    log.InfoFormat("Found SUBJ: {0}", emailFound.Subject.ToString());
                    //log.InfoFormat("Found BODY: \n{0}", emailFound.BodyHtml.Text);

                    break;
                }

            }

            if (emailFound == null)
            {
                log.Warn(string.Format("No Email Found with Confirmation Number [{0}]", confirmationCode));
            }

            return emailFound;

        }

        public Message Retrieve_Search_Weblink_Confirmation_Email(string emailAddr, string password, string confirmationCode)
        {
            DateTime startTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            string mailbox = EmailMailBox.GMAIL.INBOX;
            MessageCollection messages = Retrieve_Email(mailbox, EmailMailBox.SearchParse.ALL, emailAddr, password);
            Message emailFound = Search_Weblink_Confirmation_Email(messages, confirmationCode);

            if (emailFound == null)
            {
                mailbox = EmailMailBox.GMAIL.SPAM;
                messages = Retrieve_Email(mailbox, EmailMailBox.SearchParse.ALL, emailAddr, password);
                emailFound = Search_Weblink_Confirmation_Email(messages, confirmationCode);
            }

            //If Email was found delete it and trash it
            if (emailFound != null)
            {
                Delete_Email(emailFound, emailAddr, password, mailbox);
            }

            TestLog.WriteLine("Took Retrieve and Delete Email: {0}", (TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")) - startTime));

            return emailFound;

        }


        /// <summary>
        /// Count how many matched messages were received
        /// </summary>
        /// <param name="messages">Messages retrieved</param>
        /// <param name="confirmationCode">Confirmation Code</param>
        /// <returns></returns>
        public int Count_Weblink_Confirmation_Email(MessageCollection messages, string confirmationCode)
        {

            log.DebugFormat("Enter Search Weblink Confirmation Email {0}", confirmationCode);

            Message emailFound = null;
            int msgCount = 0;

            foreach (Message email in messages)
            {

                if (email.BodyHtml.Text.Contains(confirmationCode))
                {
                    log.InfoFormat("Email Found with Confirmation Number [{0}]", confirmationCode);
                    msgCount++;
                }

            }

            if (msgCount == 0)
            {
                log.Warn(string.Format("No Email Found with Confirmation Number [{0}]", confirmationCode));
            }

            return msgCount;

        }

        /// <summary>
        /// Verify Confirmation Email Information
        /// </summary>
        /// <param name="email">Email Message</param>
        /// <param name="from">From Receipt</param>
        /// <param name="confirmationCode">Confirmation Code</param>
        /// <param name="referenceNumber">Reference Number</param>
        /// <param name="individualName">Individual Name</param>
        /// <param name="formName">Form Name</param>
        /// <param name="amount">Amount</param>
        /// <param name="date">Date</param>
        /// <param name="creditCardNumber">Full Credit Card Number</param>
        public void Verify_Weblink_Confirmation_Email(Message email, string from, string confirmationCode, string referenceNumber,
                  string individualName, string formName, double amount, string date, string creditCardNumber)
        {

            //string subject = string.Format("Form Submission Confirmation From Dynamic Church - {0}", date);
            //According the real string, change it to below defination,ivan.zhang 09/07/2015
            string subject = "Registration Confirmation";

            //TestLog.WriteLine(email.BodyHtml.Text);
            string partialCC = creditCardNumber.Substring(creditCardNumber.Length - 3);
            TestLog.WriteLine(string.Format("Partial CC: {0}", partialCC));

            //****0005
            //****10005

            Assert.IsNotNull(email, string.Format("No Email Messages Found with Confirmation Code ", confirmationCode));
            //Do we want to verify appended verbage or just make sure it's there
            //Assert.Contains(email.Subject, subject, "Email Subject Verification Error");
            Assert.AreEqual(from, email.From.ToString(), "Email From Verification Error");
            Assert.Contains(email.BodyHtml.Text, confirmationCode, "Confirmation Code Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, referenceNumber, "Reference Number Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, individualName, "Individual Name Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, formName, "Form Name Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, string.Format("{0}{1}","$",amount), "Amount Email Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, partialCC, "Partial CC Body Verification Error");
            Assert.DoesNotContain(email.BodyHtml.Text, creditCardNumber, "Full CC Body Verification Error");
            Assert.Contains(email.BodyHtml.Text, date, "Date Body Verification Error");

        }

        public void Verify_Weblink_Event_Registration_Error_Messages()
        {

            //Please select a payment type.
            //The credit card number entered does not match the type selected.
            /*
             There is missing or incorrect information. Please complete the form and submit again.
   • Email Confirmation Address must contain a single, valid email address.
   • Cardholder Name: is required.
   • Expiration Date: is required.
      Country: is required.
     Street 1: is required.
     City: is required.
             */




        }

        #endregion weblink

        public void Verify_Retrieve_NoEmail(MessageCollection messages, string emailTimeStamp, string subject, bool confirmEmail, string sentEmailSubject)
        {

            log.Debug("Enter Verify Retrieve Email " + emailTimeStamp);
            DateTime beginTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            //Assert.Between(messages.Count, 1, 2);

            //Serach for e-mail
            Message emailFound = null;

            //DateTime date = DateTime.ParseExact(emailTimeStamp.Trim(), format, CultureInfo.InvariantCulture);
            DateTime date = Convert.ToDateTime(emailTimeStamp);
            log.Debug("TimeStamp: " + date.ToString());

            DateTime dateMin = date.AddMinutes(0);
            //log.Debug("Date Min: " + dateMin.ToString());
            DateTime dateMax = date.AddMinutes(3);
            //log.Debug("Date Max: " + dateMax.ToString());

            //log.Debug("Email Date: " + email.DateString);


            foreach (Message email in messages)
            {


                log.Debug("Email Time: " + email.DateString);
                DateTime emailDateConv = email.Date.ToLocalTime();
                log.Debug("Email Local: " + emailDateConv.ToString());
                log.Debug("Email Subject: " + email.Subject);


                //Check for Hour and not date
                //TODO We might have to do actual HH:mm and mm/yy/yyyy
                if (emailDateConv.TimeOfDay > dateMin.TimeOfDay && emailDateConv.TimeOfDay < dateMax.TimeOfDay)
                {
                    log.Debug("Date Range Found");

                    if (email.Subject.Contains(subject))
                    {
                        log.Debug("Subject Match Found");

                        //Is this a confirmation email
                        if (confirmEmail)
                        {

                            log.Debug("Confirmation Email Check \n " + email.BodyHtml.Text);
                            if (email.BodyHtml.Text.Contains("Subject: " + sentEmailSubject))
                            {
                                log.Debug("Subject in Body Text Match Found");
                                log.DebugFormat(string.Format("<p>{0}: {1}</p><p>{2}</p>", email.From, email.Subject, email.BodyHtml.Text));
                                emailFound = email;
                                break;
                            }

                        }
                        else
                        {

                            log.DebugFormat(string.Format("<p>{0}: {1}</p><p>{2}</p>", email.From, email.Subject, email.BodyHtml.Text));
                            emailFound = email;
                            break;
                        }
                    }
                }
            }

            //Verify
            Assert.IsNull(emailFound, "Email Message Found with time stamp of " + emailTimeStamp);

        }

        /// <summary>
        /// Search Portal Email Sent using text in body as criteria.
        /// </summary>
        /// <param name="messages">Messages retrieved from e-mail account</param>
        /// <param name="textBody">Search by text in body of email i.e. email time stamp</param>
        /// <param name="confirmEmail">Is this a confirmation email?</param>
        /// <returns>Email message found if any else null</returns>
        public Message Search_Portal_Email_By_Text_Body(MessageCollection messages, string textBody, Boolean confirmEmail = false, string confirmEmailSubj = "")
        {

            log.DebugFormat("Enter Search Portal Email {0}", textBody);

            Message emailFound = null;

            foreach (Message email in messages)
            {

                //log.InfoFormat("FROM: {0}", email.From.ToString());
                //log.InfoFormat("REPL: {0}", email.ReplyTo.ToString());
                //log.InfoFormat("SUBJ: {0}", email.Subject.ToString());
                //log.InfoFormat("BODY: {0}", email.BodyHtml.Text);

                if (email.BodyHtml.Text.ToString().Contains(textBody))
                {

                    //Is this a confirmation email
                    if (confirmEmail)
                    {

                        //log.Debug("Confirmation Email Check \n " + email.BodyHtml.Text);
                        if (email.BodyHtml.Text.ToString().Contains("Subject: " + confirmEmailSubj))
                        {
                            log.Debug("Subject in Body Text Match Found");
                            //log.DebugFormat(string.Format("<p>{0}: {1}</p><p>{2}</p>", email.From, email.Subject, email.BodyHtml.Text));
                            emailFound = email;
                            break;
                        }

                    }
                    else
                    {

                        //log.DebugFormat(string.Format("<p>{0}: {1}</p><p>{2}</p>", email.From, email.Subject, email.BodyHtml.Text));
                        emailFound = email;
                        break;
                    }

                    //log.InfoFormat("Email Found with Body Text [{0}]", textBody);
                    //emailFound = email;

                }

            }

            if (emailFound == null)
            {
                log.Warn(string.Format("No Email Found with text in body: [{0}]", textBody));
            }

            return emailFound;

        }

        private Message Verify_Portal_Email(MessageCollection messages, string emailTimeStamp, string subject, string from, string replyTo, string[] recipients, string emailBody, bool confirmEmail, string confirmEmailSubject)
        {

            log.Debug("Enter Verify Portal Email " + emailTimeStamp);
            DateTime beginTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

            //Assert.Between(messages.Count, 1, 2);

            //Serach for e-mail
            Message emailFound = Search_Portal_Email_By_Text_Body(messages, emailBody, confirmEmail, confirmEmailSubject);

            //Verify
            Assert.IsNotNull(emailFound, string.Format("No Email Messages Found with time stamp of {0} and body of {1}", emailTimeStamp, emailBody));
            //Do we want to verify appended verbage or just make sure it's there
            Assert.Contains(emailFound.Subject, subject, "Email Subject Verification Error");
            Assert.AreEqual(from, emailFound.From.ToString(), "Email From Verification Error");
            Assert.AreEqual(replyTo, emailFound.ReplyTo.ToString(), "Email Reply To Verification Error");
            Assert.Contains(emailFound.BodyHtml.Text, emailBody, "Email Body Verification Error");

            DateTime endTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            log.Debug("Exit Verify Retrieve Email: " + (endTime - beginTime));

            return emailFound;

        }


        private Message Verify_EventRegistration_Email(Message emailFound, string subject, string from, string replyTo, string[] recipients, string emailBody, bool confirmEmail, string confirmEmailSubject, string confirmcode, string[] individual)
        {

            log.Debug("Enter Verify Portal Email " + emailBody);
            DateTime beginTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

            //Verify
            Assert.IsNotNull(emailFound, string.Format("No Email Messages Found with body of {0}", emailBody));
            //Do we want to verify appended verbage or just make sure it's there
            Assert.Contains(emailFound.Subject, subject, "Email Subject Verification Error");
            Assert.AreEqual(from, emailFound.From.ToString(), "Email From Verification Error");
            //            Assert.AreEqual(replyTo, emailFound.ReplyTo.ToString(), "Email Reply To Verification Error");
            Assert.Contains(emailFound.BodyHtml.Text, emailBody, "Email Body Verification Error");
            Assert.Contains(emailFound.BodyHtml.Text, "Registration Confirmation", "Email Body Verification Error");

            //Verifying individuals in email
            for (int i = 0; i < individual.Length; i++)
            {
                Assert.Contains(emailFound.BodyHtml.Text, individual[i], "Individual not found in Email body");
            }

            // Verifying confrim code in email body
            Assert.Contains(emailFound.BodyHtml.Text.ToString(), confirmcode, "Confirmation code Verification Error");


            DateTime endTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            log.Debug("Exit Verify Retrieve Email: " + (endTime - beginTime));

            return emailFound;

        }

        private Message Verify_Portal_Email(Message emailFound, string subject, string from, string replyTo, string[] recipients, string emailBody, bool confirmEmail, string confirmEmailSubject)
        {

            log.Debug("Enter Verify Portal Email " + emailBody);
            DateTime beginTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));

            //Verify
            Assert.IsNotNull(emailFound, string.Format("No Email Messages Found with body of {0}", emailBody));
            //Do we want to verify appended verbage or just make sure it's there
            Assert.Contains(emailFound.Subject, subject, "Email Subject Verification Error");
            Assert.AreEqual(from, emailFound.From.ToString(), "Email From Verification Error");
            //            Assert.AreEqual(replyTo, emailFound.ReplyTo.ToString(), "Email Reply To Verification Error");
            Assert.Contains(emailFound.BodyHtml.Text, emailBody, "Email Body Verification Error");

            DateTime endTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            log.Debug("Exit Verify Retrieve Email: " + (endTime - beginTime));

            return emailFound;

        }


        private Message Verify_Retrieve_Email(MessageCollection messages, string emailTimeStamp, string subject, string from, string replyTo, string[] recipients, string emailBody, bool confirmEmail, string sentEmailSubject)
        {

            log.Debug("Enter Verify Retrieve Email " + emailTimeStamp);
            DateTime beginTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            //Assert.Between(messages.Count, 1, 2);

            //Serach for e-mail
            Message emailFound = null;

            //DateTime date = DateTime.ParseExact(emailTimeStamp.Trim(), format, CultureInfo.InvariantCulture);
            DateTime date = Convert.ToDateTime(emailTimeStamp);
            log.Debug("TimeStamp: " + date.ToString());

            DateTime dateMin = date.AddMinutes(-1);
            //log.Debug("Date Min: " + dateMin.ToString());
            DateTime dateMax = date.AddMinutes(3);
            //log.Debug("Date Max: " + dateMax.ToString());

            //log.Debug("Email Date: " + email.DateString);


            foreach (Message email in messages)
            {


                log.Debug("Email Time: " + email.DateString);
                DateTime emailDateConv = email.Date.ToLocalTime();
                log.Debug("Email Local: " + emailDateConv.ToString());
                log.Debug("Email Subject: " + email.Subject);
                log.Debug("Email Body: " + email.BodyText.Text);

                //Check for Hour and not date
                //TODO We might have to do actual HH:mm and mm/yy/yyyy
                if (emailDateConv.TimeOfDay > dateMin.TimeOfDay && emailDateConv.TimeOfDay < dateMax.TimeOfDay)
                {
                    log.Debug("Date Range Found");
                    log.Debug("Email Subject" + email.Subject);
                    log.Debug("Verify Subject" + subject);

                    if (email.Subject.Contains(subject))
                    {
                        log.Debug("Subject Match Found");

                        //Is this a confirmation email
                        if (confirmEmail)
                        {

                            log.Debug("Confirmation Email Check \n " + email.BodyHtml.Text);
                            if (email.BodyHtml.Text.Contains("Subject: " + sentEmailSubject))
                            {
                                log.Debug("Subject in Body Text Match Found");
                                log.DebugFormat(string.Format("<p>{0}: {1}</p><p>{2}</p>", email.From, email.Subject, email.BodyHtml.Text));
                                emailFound = email;
                                break;
                            }

                        }
                        else
                        {

                            log.DebugFormat(string.Format("<p>{0}: {1}</p><p>{2}</p>", email.From, email.Subject, email.BodyHtml.Text));
                            emailFound = email;
                            break;
                        }
                    }
                }
            }

            //Verify
            Assert.IsNotNull(emailFound, "No Email Messages Found with time stamp of " + emailTimeStamp);
            //Do we want to verify appended verbage or just make sure it's there
            Assert.Contains(emailFound.Subject, subject, "Email Subject Verification Error");
            Assert.AreEqual(from, emailFound.From.ToString(), "Email From Verification Error");
            Assert.AreEqual(replyTo, emailFound.ReplyTo.ToString(), "Email Reply To Verification Error");
            Assert.Contains(emailFound.BodyHtml.Text, emailBody, "Email Body Verification Error");

            DateTime endTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            log.Debug("Exit Verify Retrieve Email: " + (endTime - beginTime));

            return emailFound;

        }

        public string getEmailSubject(string subject)
        {
            //"MTA TEST LICENSE - QA Test email from Portal"
            if (this._f1Environment.Equals("QA"))
            {
                return string.Format("MTA TEST LICENSE - {0} {1}", this._f1Environment, subject);
            }
            else
            {
                return string.Format("{0} {1}", this._f1Environment, subject);
            }
        }

        public string getEmailSubjectTwo(string subject)
        {
            if (this._f1Environment.Equals("QA"))
            {
                return string.Format("MTA TEST LICENSE - {0} {1}", this._f1Environment, subject);
            }
            else
            {
                return string.Format("{0}", subject);
            }

        }

        public string getConfirmEmailBody(string dearFirstName, string dearLastName, string fromFirstName, string fromLastName, string fromEmail, string emailTimeStamp, string subject, bool contactItem)
        {



            DateTime date = Convert.ToDateTime(emailTimeStamp);

            string confirmEmail = String.Format("Dear {0} {1},<br/>Your email, with the following details has been sent.<br/><br/>From: \"{2} {3}\" {4}<br/>Subject: {5} {6}<br/>Sent: {7:d} around {8:t}<br/>",
                                                dearFirstName, dearLastName, fromFirstName, fromLastName, fromEmail, this._f1Environment, subject, date.ToString("M/d/yyyy"), date); ;

            //TODO
            //Training code
            string createContactTrue = "Create Contact: You indicated that you would like to record this email in the recipients contact history <br/>\r\n";
            string createContactFalse = "Create Contact: You indicated that you did not want to record this email in the recipients contact history <br/>\r\n";

            if (contactItem) { confirmEmail += createContactTrue; }
            else { confirmEmail += createContactFalse; }

            //Example 
            //string confirmBody = "Dear FellowshipOne AutomatedTester01,<br/>Your email, with the following details has been sent.<br/><br/>From: \"FellowshipOne AutomatedTester01\" info@fellowshiponemail.com<br/>Subject: QA Test email from Portal<br/>Sent: 10/5/2012 around 12:15 PM<br/>Create Contact: You indicated that you did not want to record this email in the recipients contact history <br/>\r\n";

            log.Debug("Confirm Email: " + confirmEmail);

            return confirmEmail;

        }

        #endregion Email

        #region ScreenShot

        public void TakeScreenShot_WebDriver()
        {

            ITakesScreenshot webDriver = (ITakesScreenshot)this._driver;
            Screenshot ss = webDriver.GetScreenshot();
            string screenshot = ss.AsBase64EncodedString;
            byte[] imageBytes = Convert.FromBase64String(ss.AsBase64EncodedString);

            using (System.IO.MemoryStream ms = new System.IO.MemoryStream(imageBytes, 0, imageBytes.Length))
            {
                // Convert byte[] to Image
                ms.Write(imageBytes, 0, imageBytes.Length);
                System.Drawing.Image image = System.Drawing.Image.FromStream(ms, true);

                // Embed the image to the log
                TestLog.EmbedImage(null, image);

            }

        }

        #endregion ScreenShot

        #endregion Instance Methods

        #region Private Methods
        /// <summary>
        /// Generic Login method for Portal
        /// </summary>
        /// <param name="username">Portal User Name</param>
        /// <param name="password">Portal Password</param>
        /// <param name="CC">Portal Church Code</param>
        private void DoLoginPortal(string username, string password, string CC)
        {

            TestLog.WriteLine(string.Format("Enter DoLoginPortal: {0}/{1}/{2}", username, password, CC));

            // Open the web page
            string portalURL = GetPortalURL(this._f1Environment);
            TestLog.WriteLine("Open: " + portalURL);
            this._selenium.Open(portalURL);
            TestLog.WriteLine("Login to: " + this._selenium.GetLocation().ToString());

            Assert.IsTrue(this._selenium.IsElementPresent("ctl00_content_userNameText"), "User Name not present");
            Assert.IsTrue(this._selenium.IsElementPresent("ctl00_content_passwordText"), "Password not present");
            Assert.IsTrue(this._selenium.IsElementPresent("ctl00_content_churchCodeText"), "Church Code not present");

            // Set the username
            if (!string.IsNullOrEmpty(username))
            {
                this._selenium.Type("ctl00_content_userNameText", username);
            }
            else
            {
                this._selenium.Type("ctl00_content_userNameText", this._portalUsername);
            }

            // Set the password
            if (!string.IsNullOrEmpty(password))
            {
                this._selenium.Type("ctl00_content_passwordText", password);
            }
            else
            {
                this._selenium.Type("ctl00_content_passwordText", this._portalPassword);
            }

            // Set the church code
            if (!string.IsNullOrEmpty(CC))
            {
                this._selenium.Type("ctl00_content_churchCodeText", CC);
            }
            else
            {
                this._selenium.Type("ctl00_content_churchCodeText", this._churchCode);
            }

            // Login, wait for the page to load
            if (CC == "AdHoc")
            {
                this._selenium.Click("ctl00_content_btnLogin");
                this._selenium.WaitForPageToLoad("120000");
            }
            else
            {
                this._selenium.ClickAndWaitForPageToLoad("ctl00_content_btnLogin"); //ctl00_content_btnLogin
            }

            // Accept the Compliance Cookie if needed.
            if (this._selenium.IsElementPresent("//input[@value='Allow Cookies']"))
            {
                // We need to accept cookies
                this._selenium.ClickAndWaitForPageToLoad("//input[@value='Allow Cookies']");

                // Verify the cookie is present
                Assert.IsTrue(this._selenium.GetCookie().Contains("ComplianceCookie"), "Cookies were accepted by the compliance cookie was not present!");
            }
            else
            {
                // Verify the compliance cookie is present
                if (this._churchCode.ToLower() == "qaeunlx0c6")
                {
                    Assert.IsTrue(this._selenium.GetCookie().Contains("ComplianceCookie"), "There was no prompt to accept cookies but the Compliance cookie was not present!!");
                }
            }

            //Force to Home Page
            //this._selenium.Open(GetPortalURL(this._f1Environment) + "/home.aspx");

            //Verify that we don't get re-routed to login page
            TestLog.WriteLine("URL routed to: " + this._selenium.GetLocation().ToString());
            //Assert.IsFalse(this._selenium.IsElementPresent("ctl00_content_userNameText"), "Did not get routed to Home Page");
            //Modify by Grace Zhang:
            Assert.IsTrue(this._selenium.IsElementPresent("link=Home"), "Did not get routed to Home Page");

            // Set the portal user if necessary
            if (username != "msneeden")
            {
                try
                {
                    this._portalUser = this._selenium.GetText("//a[@href='/UserAccount/Index.aspx']");
                }
                catch (Exception e)
                {
                    throw new SeleniumException(string.Format("{0} was not logged in", username));
                }
            }

            this._churchID = this._sql.FetchChurchID(this._churchCode);

            log.Debug("Exit DoLoginPortal: " + username + " " + this.PortalUsername);

        }

        /// <summary>
        /// Looks at the card number and determines whether or not the card number is valid
        /// Looks at the payment type as well to make sure the number is valid for the specific card type
        /// </summary>
        /// <param name="cardNumber"></param>
        /// <param name="paymentType"></param>
        /// <returns></returns>
        private bool IsValidCardType(string cardNumber, string cardType)
        {
            bool returnValue = false;

            // AMEX -- 34 or 37 -- 15 length
            if ((Regex.IsMatch(cardNumber, "^(34|37)")) && cardType == "American Express")
            {
                returnValue = (15 == cardNumber.Length);
            }
            // MasterCard -- 51 through 55 -- 16 length
            else if ((Regex.IsMatch(cardNumber, "^(51|52|53|54|55)")) && cardType == "MasterCard")
            {
                returnValue = (16 == cardNumber.Length);
            }
            // VISA -- 4 -- 13 and 16 length
            else if ((Regex.IsMatch(cardNumber, "^(4)")) && cardType == "Visa")
            {
                returnValue = (13 == cardNumber.Length || 16 == cardNumber.Length);
            }
            // Discover -- 6011 -- 16 length
            else if ((Regex.IsMatch(cardNumber, "^(6011)")) && cardType == "Discover")
            {
                returnValue = (16 == cardNumber.Length);
            }

            else if (cardType == "JCB")
            {
                string firstNumber = cardNumber.Substring(0, 1);
                if (cardNumber.Length != 16 && cardNumber.Length != 15)
                    returnValue = false;
                if (int.Parse(cardNumber.Substring(0, 1)) != 3 && int.Parse(cardNumber.Substring(0, 1)) != 5)
                    returnValue = false;
                returnValue = true;
            }

            //else
            //{
            //    // we are not checking the ACH numbers
            //    if (paymentType == PaymentType.eCheck
            //          || paymentType == PaymentType.Switch
            //          || paymentType == PaymentType.Solo
            //          || paymentType == PaymentType.Maestro
            //          || paymentType == PaymentType.Delta
            //          || paymentType == PaymentType.VisaElectron)
            //    {
            //        returnValue = true;
            //    }
            //    else
            //    {
            //        returnValue = false;
            //    }
            //}
            return returnValue;
        }

        /// <summary>
        /// Formats a time string based on the expected time format.
        /// </summary>
        /// <param name="rawTime">The raw string representing the time.</param>
        /// <param name="format">The expected format for the formatted time.</param>
        /// <returns>String representing the formatted time.</returns>
        private string formatTime(string rawTime, GeneralEnumerations.TimeSetting? format)
        {
            string[] rawTimeSplit = rawTime.Split(new string[] { ":", " " }, StringSplitOptions.RemoveEmptyEntries);
            string timeReformatted = rawTime;

            if (format == GeneralEnumerations.TimeSetting.TwelveHour)
            {
                if (rawTimeSplit.Length < 3)
                {
                    if (Convert.ToInt16(rawTimeSplit[0]) > 12)
                    {
                        timeReformatted = string.Format("{0}:{1} PM", Convert.ToInt16(rawTimeSplit[0]) - 12, rawTimeSplit[1]);
                    }
                    else if (string.Format("{0}:{1}", rawTimeSplit[0], rawTimeSplit[1]) == "0:00")
                    {
                        timeReformatted = "12:00 AM";
                    }
                    else if (string.Format("{0}:{1}", rawTimeSplit[0], rawTimeSplit[1]) == "12:00")
                    {
                        timeReformatted = "12:00 PM";
                    }
                    else
                    {
                        timeReformatted = string.Format("{0}:{1} AM", rawTimeSplit[0], rawTimeSplit[1]);
                    }
                }
            }
            else
            {
                if (Convert.ToInt16(rawTimeSplit[0]) < 13)
                {
                    if (rawTimeSplit[0].Length < 2)
                    {
                        rawTimeSplit[0] = string.Format("0{0}", rawTimeSplit[0]);
                    }
                    if (rawTimeSplit.Length > 2)
                    {
                        timeReformatted = string.Format("{0}:{1}", Convert.ToInt16(rawTimeSplit[0]) + 12, rawTimeSplit[1]);
                    }
                    else
                    {
                        timeReformatted = string.Format("{0}:{1}", rawTimeSplit[0], rawTimeSplit[1]);
                    }
                }
                else if (rawTimeSplit.Length > 2)
                {
                    timeReformatted = string.Format("{0}:{1}", Convert.ToInt16(rawTimeSplit[0]) + 12, rawTimeSplit[1]);
                }
            }
            return timeReformatted;
        }

        private void ChangeActivity(string activity)
        {
            if (this._selenium.IsElementPresent("ctl00_ctl00_MainContent_content_ddlActivity") && this._selenium.GetSelectedValue("ctl00_ctl00_MainContent_content_ddlActivity") != activity)
            {
                this._selenium.Select("ctl00_ctl00_MainContent_content_ddlActivity", activity);
                this._selenium.ClickAndWaitForPageToLoad(GeneralButtons.Search);
            }
            else if (this._selenium.IsElementPresent("//select[contains(@name, 'ddActivityId')]") && this._selenium.GetSelectedLabel("//select[contains(@name, 'ddActivityId')]") != activity)
            {
                this._selenium.SelectAndWaitForPageToLoad("//select[contains(@name, 'ddActivityId')]", activity);
            }
        }


        private void ChangeActivityWebDriver(string activity)
        {

            if (this._generalMethods.IsElementPresentWebDriver(By.Id("ctl00_ctl00_MainContent_content_ddlActivity")) && new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlActivity")).SelectedOption.Text != activity)
            {
                new SelectElement(this._driver.FindElementById("ctl00_ctl00_MainContent_content_ddlActivity")).SelectByText(activity);
                this._driver.FindElementById(GeneralButtons.Search).Click();
            }
            else if (this._generalMethods.IsElementPresentWebDriver(By.XPath("//select[contains(@name, 'ddActivityId')]")) && new SelectElement(this._driver.FindElementByXPath("//select[contains(@name, 'ddActivityId')]")).SelectedOption.Text != activity)
            {
                new SelectElement(this._driver.FindElementByXPath("//select[contains(@name, 'ddActivityId')]")).SelectByText(activity);
            }
        }


        private string TitleFormat(string text)
        {
            return string.Format("Fellowship One :: {0}", text);
        }

        private void SpanOfCare_SelectCustomField_SingleSelect(string customField, string[] customFieldChoices)
        {
            // Custom fields in the span of care wizard are a little weird.  The label for the custom field's name is based on an odd value in the xpath while each choice under this 
            // this label are based on an even value in the xpath. Custom field "A" at //div[x] has choices at //div[x + 1] where x is odd.

            // How many custom fields are there for this span of care?
            int customFieldCount = (int)this._selenium.GetXpathCount("//div[@id='main_content']/div/div[1]/div[2]/form/div[1]/div/div/label");
            // For calculating the odd value for the custom field's name.
            int customFieldXpathValue = 0;

            // Figure out which custom field to select
            for (int x = 0; x < customFieldCount; x++)
            {
                // Custom field input at the name level is based on odd numbers.  
                customFieldXpathValue = x + 1;
                // Is this the custom field we are looking for?
                if (this._selenium.GetText("//div[@id='main_content']/div/div[1]/div[2]/form/div[1]/div[" + customFieldXpathValue + "]/div/label") == customField)
                {
                    // We found the custom field, click the input next to the name.
                    this._selenium.Click("//div[@id='main_content']/div/div[1]/div[2]/form/div[1]/div[" + customFieldXpathValue + "]/div/input");
                    // Now we need to figure out which choice to check. Choices use an even value in the xpath.
                    for (int y = 0; y < this._selenium.GetXpathCount("//div[@id='main_content']/div/div[1]/div[2]/form/div[1]/div[" + (customFieldXpathValue + 1) + "]/table/tbody/tr/td/label"); y++)
                    {
                        // Is this the custom field choice we are looking for?
                        foreach (string customFieldChoice in customFieldChoices)
                        {
                            if (this._selenium.GetText("//div[@id='main_content']/div/div[1]/div[2]/form/div[1]/div[" + (customFieldXpathValue + 1) + "]/table/tbody/tr[" + (y + 1) + "]/td/label") == customFieldChoice)
                                this._selenium.Click("//div[@id='main_content']/div/div[1]/div[2]/form/div[1]/div[" + (customFieldXpathValue + 1) + "]/table/tbody/tr[" + (y + 1) + "]/th/input");
                        }
                    }
                    break;
                }
                customFieldXpathValue++;
            }
        }

        private enum TimeSetting
        {
            TwelveHour,
            TwentyFourHour
        }

        /// <summary>
        /// Formats a time string based on the expected time format.
        /// </summary>
        /// <param name="rawTime">The raw string representing the time.</param>
        /// <param name="format">The expected format for the formatted time.</param>
        /// <returns>String representing the formatted time.</returns>
        private string formatTime(string rawTime, TimeSetting? format)
        {
            string[] rawTimeSplit = rawTime.Split(new string[] { ":", " " }, StringSplitOptions.RemoveEmptyEntries);
            string timeReformatted = rawTime;

            if (format == TimeSetting.TwelveHour)
            {
                if (rawTimeSplit.Length < 3)
                {
                    if (Convert.ToInt16(rawTimeSplit[0]) > 12)
                    {
                        timeReformatted = string.Format("{0}:{1} PM", Convert.ToInt16(rawTimeSplit[0]) - 12, rawTimeSplit[1]);
                    }
                    else if (string.Format("{0}:{1}", rawTimeSplit[0], rawTimeSplit[1]) == "0:00")
                    {
                        timeReformatted = "12:00 AM";
                    }
                    else if (string.Format("{0}:{1}", rawTimeSplit[0], rawTimeSplit[1]) == "12:00")
                    {
                        timeReformatted = "12:00 PM";
                    }
                    else
                    {
                        timeReformatted = string.Format("{0}:{1} AM", rawTimeSplit[0], rawTimeSplit[1]);
                    }
                }
            }
            else
            {
                if (Convert.ToInt16(rawTimeSplit[0]) < 13)
                {
                    if (rawTimeSplit[0].Length < 2)
                    {
                        rawTimeSplit[0] = string.Format("0{0}", rawTimeSplit[0]);
                    }
                    if (rawTimeSplit.Length > 2)
                    {
                        timeReformatted = string.Format("{0}:{1}", Convert.ToInt16(rawTimeSplit[0]) + 12, rawTimeSplit[1]);
                    }
                    else
                    {
                        timeReformatted = string.Format("{0}:{1}", rawTimeSplit[0], rawTimeSplit[1]);
                    }
                }
                else if (rawTimeSplit.Length > 2)
                {
                    timeReformatted = string.Format("{0}:{1}", Convert.ToInt16(rawTimeSplit[0]) + 12, rawTimeSplit[1]);
                }
            }
            return timeReformatted;
        }

        public string CalculateIndividualModalAge(DateTime birth)
        {

            int monthAdd = 12;
            DateTime today = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time"));
            string ageString = "";

            int age = today.Year - birth.Year;    //people perceive their age in years

            if (
               today.Month < birth.Month
               ||
               ((today.Month == birth.Month) && (today.Day < birth.Day))
               )
            {
                age--;  //birthday in current year not yet reached, we are 1 year younger ;)
                //+ no birthday for 29.2. guys ... sorry, just wrong date for birth
            }

            if (age < 2)
            {
                TestLog.WriteLine("Age: " + age);
                TestLog.WriteLine("Today Month: " + today.Month);
                TestLog.WriteLine("Birth Month: " + birth.Month);

                //Age neg, we have to account for zero
                //if ((today.Month - birth.Month) < 0)
                //{
                //    monthAdd = 11; 
                //}

                // Mady Kou changed the logic to calculate age
                if (today.Month > birth.Month)
                {
                    age = (age * 12) + (today.Month - birth.Month);
                }
                else if (today.Month == birth.Month)
                {
                    if (today.Day < birth.Day)
                    {
                        age = (age * 12) + monthAdd - 1;
                    }
                    else
                    {
                        age = (age * 12) + monthAdd;
                    }
                }
                else
                {
                    age = (age * 12) + monthAdd - (birth.Month - today.Month);
                }

                ageString = string.Format("({0} mos.)", age);
                TestLog.WriteLine("Age: " + ageString);

            }
            else
            {
                ageString = string.Format("({0} yrs.)", age);
                TestLog.WriteLine("Age: " + ageString);
            }

            return ageString;
        }

        /// <summary>
        /// Selects groups on the group's view all page which allows you to take action.
        /// </summary>
        /// <param name="groups">The list of groups to be selected</param>
        private void SelectGroupsOnGroupsTabOnGroupsViewAll(string[] groups)
        {
            // Groups -> View All
            this._selenium.Navigate(Navigation.Groups.GroupsByGroupType.View_All);

            // Click the Groups Tab
            this._selenium.ClickAndWaitForPageToLoad("//a[contains(@href, '/Groups/Group/ListAll.aspx?search_context=1')]");

            // Select the group(s)
            foreach (string group in groups)
            {
                decimal itemRow = this._generalMethods.GetTableRowNumber(TableIds.Groups_ViewAll_GroupList_GroupTab, group, "Group", null) + 1;
                this._selenium.Click(string.Format("{0}/tbody/tr[{1}]/td[1]/input", TableIds.Groups_ViewAll_GroupList_GroupTab, itemRow));
            }
        }


        /// <summary>
        /// Creates an activity.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="ministryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activityDescription">The activity description.</param>
        /// <param name="useCheckin">Specifies if this activity uses check in.</param>
        /// <param name="printNameTag">Specify if name tags are printed.</param>
        /// <param name="printParentReceipt">Specifies if parent receipts are printed.</param>
        /// <param name="overrideAssignments">Specifies if assignments are overrided.</param>
        /// <param name="requirementType">The requirement type.</param>
        /// <param name="startAgeRange">The starting age range for the activity.</param>
        /// <param name="endAgeRange">The ending age range for the activity.</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="frequency">The frequency of the activity schedule.</param>
        /// <param name="scheduleDates">The collection of data for the activity schedules.</param>
        /// <param name="activityRosterNames">The activity roster names.</param>
        /// <param name="makeRosterVisible">Makes the roster visible in check-in.</param>
        /// <param name="openAutomatically">Makes the roster open automatically.</param>
        /// <param name="defaultActivityCheckinSettings">Keeps the roster settings the same as the activity check-in settings.</param>
        /// <param name="overridePrintNameTag">Overrides the activity check-in settings and prints a name tag just for the roster.</param>
        /// <param name="overridePrintParentReceipt">Overrides the activity check-in settings and prints a parent receipt just for the roster.</param>
        /// <param name="checkinBestFit">Specifies the best fit for individuals going to a roster.</param>
        /// <param name="bestFitAgeRangeMinAge">Sets the start age for the best fit by age range.</param>
        /// <param name="bestFitAgeRangeMaxAge">Sets the end age for the best fit by age range.</param>
        /// <param name="bestFitAgeRangeType">Sets the type (months or years) for the age range best fit.</param>
        /// <param name="bestFitBirthDateRangeStart">Sets the start birth date for the best fit by birth date range.</param>
        /// <param name="bestFitBirthDateRangeEnd">Sets the end date for the best fit by birth date range.</param>
        /// <param name="participantAssignmentType">The type of participant assignment.</param>
        /// <param name="automaticAssignmentType">The auto assignment rules.</param>
        /// <param name="staffAssignmentType">The staff assignment types.</param>
        private void Ministry_Activity_Create(int churchId, string ministryName, string activityName, string activityDescription, bool useCheckin, bool printNameTag, bool printParentReceipt, bool overrideAssignments, GeneralEnumerations.ActivityCreationCheckinRequirements requirementType, string startAgeRange, string endAgeRange, string activityScheduleName, string activityStartTime, string activityEndTime, GeneralEnumerations.ActivityScheduleFrequency frequency, dynamic scheduleDates, List<string> activityRosterNames, bool makeRosterVisible, bool openAutomatically, GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings defaultActivityCheckinSettings, bool overridePrintNameTag, bool overridePrintParentReceipt, GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge, string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd, GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType, GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType)
        {
            // Store culture for date settings
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }

            // Activies -> View All
            this.Ministry_Activities_View_All();

            // Add an activity
            this._selenium.ClickAndWaitForPageToLoad("add_activity_button");
            //this._selenium. Navigate(string.Format("https://portal.{0}.fellowshipone.com/bridge/activities/new", PortalBase.GetLVEnvironment(this._f1Environment)));

            // Select the ministry
            this._selenium.Select("ministry", ministryName);

            // Set the activity name
            this._selenium.Type("activity_name", activityName);

            // Set the activity description
            this._selenium.Type("description", activityDescription);

            // Does this activity use checkin?
            if (useCheckin)
            {
                // It does.  Specify all the information
                this._selenium.Click("used_for_checkin_yes");

                if (printNameTag)
                {
                    this._selenium.Click("print_name_tag");
                }

                if (printParentReceipt)
                {
                    this._selenium.Click("print_receipt");
                }

                if (overrideAssignments)
                {
                    this._selenium.Click("assignments_override");
                }

                switch (requirementType)
                {
                    case GeneralEnumerations.ActivityCreationCheckinRequirements.Never:
                        this._selenium.Click("activity_ar_never");
                        break;
                    case GeneralEnumerations.ActivityCreationCheckinRequirements.Always:
                        this._selenium.Click("activity_ar_always");
                        break;
                    case GeneralEnumerations.ActivityCreationCheckinRequirements.Optional:
                        this._selenium.Click("activity_ar_optional");
                        break;
                    default:
                        throw new SeleniumException("Unknown requirement type specified.");
                }

            }

            // Unless the age range is not provided, specifiy the age range.
            if (!string.IsNullOrEmpty(startAgeRange) && !string.IsNullOrEmpty(endAgeRange))
            {

                this._selenium.Select("age_range_from", startAgeRange);
                this._selenium.Select("age_range_to", endAgeRange);
            }

            // Hit Next
            this._selenium.ClickAndWaitForPageToLoad("commit");

            // Unless there is validation, continue on to step two
            if (!this._selenium.IsElementPresent("//dl[@id='error_message']"))
            {
                // Specify the activity schedule name
                this._selenium.Type("schedule_name", activityScheduleName);

                // Specify the recurrence start time and end time
                this._selenium.Type("start_time", activityStartTime);
                this._selenium.Type("end_time", activityEndTime);

                // Specify the dates
                switch (frequency)
                {
                    case GeneralEnumerations.ActivityScheduleFrequency.Once:
                        this._selenium.Click("frequency_0");
                        this._selenium.Type("once_start_date_from", scheduleDates.activityScheduleStartDate);
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Daily:
                        this._selenium.Click("frequency_1");
                        this._selenium.Type("daily_start_date_from", scheduleDates.scheduleStartDate);

                        if (scheduleDates.excludesWeekends)
                        {
                            this._selenium.Click("daily_pattern_1");
                        }
                        else
                        {
                            this._selenium.Select("daily_nth_day", scheduleDates.scheduleRepeatDays);
                        }
                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._selenium.Click("daily_ends");
                            this._selenium.Type("end_date_daily", scheduleDates.scheduleEndDate);
                        }
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Monthly:
                        this._selenium.Click("frequency_3");
                        this._selenium.Type("monthly_start_date_from", scheduleDates.scheduleStartDate);
                        if (scheduleDates.repeatOn == "day of the month")
                        {
                            this._selenium.Select("monthly_nth_day", scheduleDates.dayOfMonth);
                            this._selenium.Select("monthly_nth_month", scheduleDates.scheduleRepeatMonth);
                        }
                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._selenium.Click("monthly_ends");
                            this._selenium.Type("recurrence_monthly_ending_date", scheduleDates.scheduleEndDate);
                        }
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Weekly:
                        this._selenium.Click("frequency_2");
                        this._selenium.Type("weekly_start_date_from", scheduleDates.scheduleStartDate);
                        this._selenium.Select("weekly_nth_week", scheduleDates.scheduleRepeatWeek);
                        foreach (var dayOfWeek in scheduleDates.daysToMeet)
                        {
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Sunday)
                            {
                                this._selenium.Click("weekly_sunday");
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Monday)
                            {
                                this._selenium.Click("weekly_monday");
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Tuesday)
                            {
                                this._selenium.Click("weekly_tuesday");
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Wednesday)
                            {
                                this._selenium.Click("weekly_wednesday");
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Thursday)
                            {
                                this._selenium.Click("weekly_thursday");
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Friday)
                            {
                                this._selenium.Click("weekly_friday");
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Saturday)
                            {
                                this._selenium.Click("weekly_saturday");
                            }
                        }

                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._selenium.Click("weekly_ends");
                            this._selenium.Type("recurrence_weekly_ending_date", scheduleDates.scheduleEndDate);
                        }
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Yearly:
                        this._selenium.Click("frequency_4");
                        this._selenium.Type("yearly_start_date_from", scheduleDates.scheduleStartDate);
                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._selenium.Click("yearly_ends");
                            this._selenium.Type("recurrence_yearly_ending_date", scheduleDates.scheduleEndDate);
                        }
                        break;
                    default:
                        throw new SeleniumException("Unknown frequency specified.");
                }

                // Submit
                this._selenium.ClickAndWaitForPageToLoad("commit");

                // Unless there is validation on step two, continue to step 3
                if (!this._selenium.IsElementPresent("//dl[@class='round_all in_grid']"))
                {
                    // If the activiy uses check-in
                    if (useCheckin)
                    {
                        // Specify the name of the roster
                        foreach (var roster in activityRosterNames)
                        {
                            this._selenium.Type("roster_name", roster);
                        }

                        // Set activity to NOT be visible for check-in
                        if (makeRosterVisible == false)
                        {
                            this._selenium.Click("visible_to_checkin");
                        }

                        else
                        {
                            // Set roster to NOT open automatically
                            if (openAutomatically == false)
                            {
                                this._selenium.Click("automatically_open_checkin");
                            }

                            else
                            {
                                // Set the check-in settings for the roster
                                switch (defaultActivityCheckinSettings)
                                {
                                    case GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings.UseDefault:
                                        this._selenium.Click("keep_checkin_defaults_yes");
                                        break;
                                    case GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings.OverrideDefault:
                                        this._selenium.Click("keep_checkin_defaults_no");
                                        break;
                                    default:
                                        throw new SeleniumException("Unknown Default Activity Check-in Setting specified.");
                                }

                                // If override defaults is selected, the options for your roster
                                if (defaultActivityCheckinSettings == GeneralEnumerations.ActivityCreationDefaultActivityCheckinSettings.OverrideDefault)
                                {
                                    if (overridePrintNameTag)
                                    {
                                        this._selenium.Click("override_checkin_defaults_nametag");
                                    }
                                    if (overridePrintParentReceipt)
                                    {
                                        this._selenium.Click("override_checkin_defaults_receipt");
                                    }
                                }
                            }
                        }

                        // Set the Check-in Best Fit
                        switch (checkinBestFit)
                        {
                            case GeneralEnumerations.ActivityCreationCheckinBestFit.NoAgeRestriction:
                                this._selenium.Click("no_age_restriction");
                                break;
                            case GeneralEnumerations.ActivityCreationCheckinBestFit.AgeRange:
                                this._selenium.Click("age_range_restriction");
                                break;
                            case GeneralEnumerations.ActivityCreationCheckinBestFit.BirthDateRange:
                                this._selenium.Click("birth_range_restriction");
                                break;
                            default:
                                throw new SeleniumException("Unknown Check-in Best Fit Setting specified.");
                        }

                        // If Age Range, select Start and End range
                        if (checkinBestFit == GeneralEnumerations.ActivityCreationCheckinBestFit.AgeRange)
                        {
                            this._selenium.Type("age_min", bestFitAgeRangeMinAge);
                            this._selenium.Type("age_max", bestFitAgeRangeMaxAge);
                            this._selenium.Select("age_type", bestFitAgeRangeType);
                        }

                        // If Birth Date Range, select Start/End dates
                        if (checkinBestFit == GeneralEnumerations.ActivityCreationCheckinBestFit.BirthDateRange)
                        {
                            if (bestFitBirthDateRangeStart.HasValue)
                            {
                                var birthDateStart = (bestFitBirthDateRangeStart.Value.ToShortDateString());
                                this._selenium.Type("birth_date_start", birthDateStart);
                            }
                            if (bestFitBirthDateRangeEnd.HasValue)
                            {
                                var birthDateEnd = (bestFitBirthDateRangeEnd.Value.ToShortDateString());
                                this._selenium.Type("birth_date_end", birthDateEnd);
                            }
                        }

                        // Add Roster
                        this._selenium.Click("commit");

                        // Hit next
                        this._selenium.ClickAndWaitForPageToLoad("submitQuery");
                    }
                    else
                    {
                        // If the activity does not use check-in: For each roster, specify the roster name and hit save.
                        foreach (var roster in activityRosterNames)
                        {
                            this._selenium.Type("roster_name", roster);
                            this._selenium.Click("commit");
                        }

                        // Hit next
                        this._selenium.ClickAndWaitForPageToLoad("submitQuery");
                    }

                    // Unless there is validation on step three, continue to step 4
                    if (!this._selenium.IsElementPresent("//dl[@id='error_message']"))
                    {

                        // Specify all the assignment information
                        switch (participantAssignmentType)
                        {
                            case GeneralEnumerations.ActivityCreationParticipantAssignmentTypes.Activity:
                                this._selenium.Click("activity_pa_activity");
                                break;
                            case GeneralEnumerations.ActivityCreationParticipantAssignmentTypes.Schedule:
                                this._selenium.Click("activity_pa_schedule");
                                break;
                            case GeneralEnumerations.ActivityCreationParticipantAssignmentTypes.DateTime:
                                this._selenium.Click("activity_pa_datetime");
                                break;
                            default:
                                throw new SeleniumException("Unknown Participant Assignment type specified.");
                        }

                        switch (automaticAssignmentType)
                        {
                            case GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes.None:
                                this._selenium.Click("activity_aa_none");
                                break;
                            case GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes.FirstAttendance:
                                this._selenium.Click("activity_aa_first");
                                break;
                            case GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes.MostRecentAttendance:
                                this._selenium.Click("activity_aa_most_recent");
                                break;
                            default:
                                throw new SeleniumException("Unknown Automatic Assignment type specified.");
                        }

                        switch (staffAssignmentType)
                        {
                            case GeneralEnumerations.ActivityCreationStaffAssignmentType.Activity:
                                this._selenium.Click("activity_sa_activity");
                                break;
                            case GeneralEnumerations.ActivityCreationStaffAssignmentType.Schedule:
                                this._selenium.Click("activity_sa_schedule");
                                break;
                            case GeneralEnumerations.ActivityCreationStaffAssignmentType.DateTime:
                                this._selenium.Click("activity_sa_datetime");
                                break;
                            default:
                                throw new SeleniumException("Unknown Staff Assignment type specified.");
                        }

                        // Next
                        this._selenium.ClickAndWaitForPageToLoad("commit");

                        // Unless there is validation, verify the activity is created
                        if (!this._selenium.IsElementPresent("//dl[@id='error_message']"))
                        {

                            // Verify activity is created
                            var row = this._generalMethods.GetTableRowNumber(TableIds.Ministry_Activities_ViewAll, activityName, "Name") + 1;
                            Assert.AreEqual(activityName, this._selenium.GetText(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Ministry_Activities_ViewAll, row)), "Activity name was incorrect");
                            //Assert.AreEqual("Active", this._selenium.GetText(string.Format("//table[@class='grid paged_grid']/tbody/tr[{0}]/td[2]", row)), "Activity status was incorrect");
                            //Assert.AreEqual(ministryName, this._selenium.GetText(string.Format("//table[@class='grid paged_grid']/tbody/tr[{0}]/td[3]", row)), "Ministry was incorrect");

                            // Click on the activity to verify more information
                            // this._selenium.ClickAndWaitForPageToLoad("link=" + activityName);

                            // Verify age range is present
                            // this._selenium.VerifyTextPresent(startAgeRange + "to" + endAgeRange);

                            // Verify check-in code was created even if check-in was not selected
                            // this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Activities);

                            // var rowC = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivityRoomSetup_Activities, activityName, "Activity") + 1;
                            // Assert.AreNotEqual("-", this._selenium.GetText(string.Format("//table[@id='{0}']/tbody/tr[{1}]/td[2]", TableIds.Ministry_ActivityRoomSetup_Activities, row)));
                        }

                        #region Step 4 Validation
                        else
                        {
                        }
                        #endregion Step 4 Validation
                    }

                    #region Step 3 Validation
                    else
                    {
                        // Validate messages
                        if (activityRosterNames == null)
                        {
                            this._selenium.VerifyTextPresent("Please enter a roster name.");
                        }

                        // Enter generic roster name
                        // this._selenium.Type("roster_name", "Attendees");

                        // Save roster
                        // this._selenium.Click("commit");

                        // Cancel out of wizard
                        this._selenium.ClickAndWaitForPageToLoad("link=Cancel");

                    }
                    #endregion Step 3 Validation
                }

                #region Step 2 Validation
                else
                {
                    // Validate messages
                    if (string.IsNullOrEmpty(activityScheduleName))
                    {
                        this._selenium.VerifyTextPresent("Please enter a schedule name.");
                    }
                    if (string.IsNullOrEmpty(activityStartTime))
                    {
                        this._selenium.VerifyTextPresent("Please enter a start time.");
                    }
                    if (string.IsNullOrEmpty(activityEndTime))
                    {
                        this._selenium.VerifyTextPresent("Please enter an end time.");
                    }
                    // Validate reccurrence messages
                    switch (frequency)
                    {
                        case GeneralEnumerations.ActivityScheduleFrequency.Once:
                            if (string.IsNullOrEmpty(scheduleDates.activityScheduleStartDate))
                            {
                                this._selenium.VerifyTextPresent("Please enter a date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Daily:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleRepeatDays))
                            {
                                this._selenium.VerifyTextPresent("Please select how often this schedule repeats.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._selenium.VerifyTextPresent("Please enter a start date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Monthly:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleRepeatMonth))
                            {
                                this._selenium.VerifyTextPresent("Please select how often this schedule repeats.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.dayOfMonth))
                            {
                                this._selenium.VerifyTextPresent("Please select a day of the month.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._selenium.VerifyTextPresent("Please enter a start date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Weekly:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleRepeatWeek))
                            {
                                this._selenium.VerifyTextPresent("Please select how often this schedule repeats.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.daysToMeet))
                            {
                                this._selenium.VerifyTextPresent("Please select the day of the week this schedule occurs on.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._selenium.VerifyTextPresent("Please enter a start date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Yearly:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._selenium.VerifyTextPresent("Please enter a start date.");
                            }
                            break;
                    }

                    // Cancel out of wizard
                    this._selenium.ClickAndWaitForPageToLoad("link=Cancel");

                }
                #endregion Step 2 Validation
            }

            #region Step 1 Validation
            else
            {
                // Validate messages
                if (string.IsNullOrEmpty(activityName))
                {
                    this._selenium.VerifyTextPresent("Activity name is required.");
                }

                // Cancel out of wizard
                this._selenium.ClickAndWaitForPageToLoad("link=Cancel");
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Creates an activity.
        /// </summary>
        /// <param name="churchId">The church ID.</param>
        /// <param name="ministryName">The name of the ministry.</param>
        /// <param name="activityName">The name of the activity.</param>
        /// <param name="activityDescription">The activity description.</param>
        /// <param name="useCheckin">Specifies if this activity uses check in.</param>
        /// <param name="printNameTag">Specify if name tags are printed.</param>
        /// <param name="printParentReceipt">Specifies if parent receipts are printed.</param>
        /// <param name="overrideAssignments">Specifies if assignments are overrided.</param>
        /// <param name="requirementType">The requirement type.</param>
        /// <param name="startAgeRange">The starting age range for the activity.</param>
        /// <param name="endAgeRange">The ending age range for the activity.</param>
        /// <param name="activityScheduleName">The activity schedule name.</param>
        /// <param name="activityStartTime">The activity start time.</param>
        /// <param name="activityEndTime">The activity end time.</param>
        /// <param name="frequency">The frequency of the activity schedule.</param>
        /// <param name="scheduleDates">The collection of data for the activity schedules.</param>
        /// <param name="activityRosterNames">The activity roster names.</param>
        /// <param name="startRosterAsClosed">Sets roster as closed wen activity starts.</param>
        /// <param name="useRecommendedAges">Opens the section to select best fit ages for roster</param>
        /// <param name="defaultActivityCheckinSettings">Keeps the roster settings the same as the activity check-in settings.</param>
        /// <param name="overridePrintNameTag">Overrides the activity check-in settings and prints a name tag just for the roster.</param>
        /// <param name="overridePrintParentReceipt">Overrides the activity check-in settings and prints a parent receipt just for the roster.</param>
        /// <param name="checkinBestFit">Specifies the best fit for individuals going to a roster.</param>
        /// <param name="bestFitAgeRangeMinAge">Sets the start age for the best fit by age range.</param>
        /// <param name="bestFitAgeRangeMaxAge">Sets the end age for the best fit by age range.</param>
        /// <param name="bestFitAgeRangeType">Sets the type (months or years) for the age range best fit.</param>
        /// <param name="bestFitBirthDateRangeStart">Sets the start birth date for the best fit by birth date range.</param>
        /// <param name="bestFitBirthDateRangeEnd">Sets the end date for the best fit by birth date range.</param>
        /// <param name="participantAssignmentType">The type of participant assignment.</param>
        /// <param name="automaticAssignmentType">The auto assignment rules.</param>
        /// <param name="staffAssignmentType">The staff assignment types.</param>
        private void Ministry_Activity_Create_WebDriver(int churchId, string ministryName, string activityName, string activityDescription, bool isConfidential, string activityType, bool useCheckin, bool printNameTag, bool printParentReceipt, bool overrideAssignments,
            bool requireAssignment, GeneralEnumerations.ActivitiesRequireAssignment requirementType, bool ageRestrictions, string startAgeRange, string endAgeRange, GeneralEnumerations.ActivityCreationParticipantAssignmentTypes participantAssignmentType,
            GeneralEnumerations.ActivityCreationStaffAssignmentType staffAssignmentType, bool autoCreateAssignment, GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes automaticAssignmentType, bool useWebLinkGroups, string webLinkContactItem,
            string activityScheduleName, string activityStartTime, string activityEndTime, GeneralEnumerations.ActivityScheduleFrequency frequency, dynamic scheduleDates, List<string> activityRosterNames, bool startRosterAsClosed, bool useRecommendedAges,
            GeneralEnumerations.ActivityCreationCheckinBestFit checkinBestFit, string bestFitAgeRangeMinAge, string bestFitAgeRangeMaxAge, string bestFitAgeRangeType, DateTime? bestFitBirthDateRangeStart, DateTime? bestFitBirthDateRangeEnd)
        {
            // Store culture for date settings
            #region Culture
            CultureInfo culture = null;
            if (churchId.ToString() == "258")
            {
                culture = new CultureInfo("en-GB");
            }
            else
            {
                culture = new CultureInfo("en-US");
            }
            #endregion Culture

            // Activies -> View All
            this.Ministry_Activities_View_All_WebDriver();

            // Add an activity
            this._driver.FindElementById(GeneralMinistry.Activities.Add_Activity).Click();
            this._generalMethods.WaitForElement(By.LinkText("Cancel"));

            // Verify no ministry is selected by default
            Assert.AreEqual("Please select a ministry....", new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry)).SelectedOption.Text);

            #region Step 1

            // Select the ministry
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry)).SelectByText(ministryName);

            // Set the activity name
            this._driver.FindElementById(GeneralMinistry.Activities.Activity).SendKeys(activityName);

            // Set the activity description
            this._driver.FindElementById(GeneralMinistry.Activities.Description).SendKeys(activityDescription);

            // Set if the activity is confidential
            if (isConfidential)
            {
                this._driver.FindElementById(GeneralMinistry.Activities.Is_Confidential).Click();
            }

            // Set the activity type
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Activity_Type)).SelectByText(activityType);

            // Does this activity use checkin?
            #region Check-in Settings
            if (useCheckin)
            {
                // It does.  Specify all the information
                this._driver.FindElementById(GeneralMinistry.Activities.EnableCheckin_Box).Click();

                if (printNameTag)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.PrintNameTag_Box).Click();
                }

                if (printParentReceipt)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.PrintParentReceipt_Box).Click();
                }

                if (overrideAssignments)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.AllowedClosedRoom_Box).Click();
                }

                if (requireAssignment)
                {
                    this._driver.FindElementById(GeneralMinistry.Activities.RequireAssignment_Box).Click();

                    switch (requirementType)
                    {
                        case GeneralEnumerations.ActivitiesRequireAssignment.Prevent:
                            this._driver.FindElementById(GeneralMinistry.Activities.RequireAssignment_Prevent).Click();
                            break;
                        case GeneralEnumerations.ActivitiesRequireAssignment.Alert:
                            this._driver.FindElementById(GeneralMinistry.Activities.RequireAssignment_Alert).Click();
                            break;
                        default:
                            throw new SeleniumException("Unknown requirement type specified.");
                    }
                }
            }
            #endregion Check-in Settings

            // Enable age restrictions?
            #region Age Restrictions
            if (ageRestrictions)
            {
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.AgeRange_From)).SelectByText(startAgeRange);
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.AgeRange_To)).SelectByText(endAgeRange);
            }
            #endregion Age Restrictions

            // Specify all the assignment information
            #region Assignment Creation Rules
            switch (participantAssignmentType)
            {
                case GeneralEnumerations.ActivityCreationParticipantAssignmentTypes.Schedule:
                    this._driver.FindElementById(GeneralMinistry.Activities.ParticipantAssignment_Schedule).Click();
                    break;
                case GeneralEnumerations.ActivityCreationParticipantAssignmentTypes.DateTime:
                    this._driver.FindElementById(GeneralMinistry.Activities.ParticipantAssignment_DateTime).Click();
                    break;
                case GeneralEnumerations.ActivityCreationParticipantAssignmentTypes.Always:
                    this._driver.FindElementById(GeneralMinistry.Activities.ParticipantAssignment_Always).Click();
                    break;
                default:
                    throw new SeleniumException("Unknown Participant Assignment type specified.");
            }

            switch (staffAssignmentType)
            {
                case GeneralEnumerations.ActivityCreationStaffAssignmentType.Schedule:
                    this._driver.FindElementById(GeneralMinistry.Activities.StaffAssignment_Schedule).Click();
                    break;
                case GeneralEnumerations.ActivityCreationStaffAssignmentType.DateTime:
                    this._driver.FindElementById(GeneralMinistry.Activities.StaffAssignment_DateTime).Click();
                    break;
                case GeneralEnumerations.ActivityCreationStaffAssignmentType.Always:
                    this._driver.FindElementById(GeneralMinistry.Activities.StaffAssignment_Always).Click();
                    break;
                default:
                    throw new SeleniumException("Unknown Staff Assignment type specified.");
            }

            if (autoCreateAssignment)
            {
                switch (automaticAssignmentType)
                {
                    case GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes.FirstAttendance:
                        this._driver.FindElementById(GeneralMinistry.Activities.AutoCreation_FirstAttendance).Click();
                        break;
                    case GeneralEnumerations.ActivityCreationAutomaticAssignmentTypes.LastAttendance:
                        this._driver.FindElementById(GeneralMinistry.Activities.AutoCreation_LastAttendance).Click();
                        break;
                    default:
                        throw new SeleniumException("Unknown Automatic Assignment type specified.");
                }
            }
            #endregion Assignment Creation Rules

            // Use as WebLink Group?
            #region WebLink Groups
            if (useWebLinkGroups)
            {
                this._driver.FindElementById(GeneralMinistry.Activities.UseAsWebLinkGroups_Box).Click();
                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.WebLink_Contact_Item)).SelectByText(webLinkContactItem);
            }
            #endregion WebLink Groups

            // Hit Next
            this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
            //System.Threading.Thread.Sleep(5000);

            #endregion Step 1

            #region Step 2

            // Unless there is validation, continue on to step two
            if (!this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
            {
                #region Activity Schedule
                // Specify the activity schedule name
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_Schedule_Name).SendKeys(activityScheduleName);

                // Specify the recurrence start time and end time
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_StartTime).SendKeys(activityStartTime);
                this._driver.FindElementById(GeneralMinistry.Activities.Activity_EndTime).SendKeys(activityEndTime);

                #region Recurrences
                // Specify the dates
                switch (frequency)
                {
                    case GeneralEnumerations.ActivityScheduleFrequency.Once:
                        this._driver.FindElementById(GeneralMinistry.Activities.ScheduleRecurrence_Once).Click();
                        this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceOnce_StartDate).SendKeys(scheduleDates.activityScheduleStartDate);
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Daily:
                        this._driver.FindElementById(GeneralMinistry.Activities.ScheduleRecurrence_Daily).Click();
                        this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceDaily_StartDate).SendKeys(scheduleDates.scheduleStartDate);

                        if (scheduleDates.excludesWeekends)
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceDaily_WeekdayPattern).Click();
                        }
                        else
                        {
                            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceDaily_EveryNthDay)).SelectByText(scheduleDates.scheduleRepeatDays);
                        }
                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceDaily_Ending_Box).Click();
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceDaily_EndDate).SendKeys(scheduleDates.scheduleEndDate);
                        }
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Monthly:
                        this._driver.FindElementById(GeneralMinistry.Activities.ScheduleRecurrence_Monthly).Click();
                        this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceMonthly_StartDate).SendKeys(scheduleDates.scheduleStartDate);
                        if (scheduleDates.repeatOn == "day of the month")
                        {
                            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceMonthly_MonthlyNthDay)).SelectByText(scheduleDates.dayOfMonth);
                            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceMonthly_MonthlyNthMonth)).SelectByText(scheduleDates.scheduleRepeatMonth);
                        }
                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceMonthly_Ending_Box).Click();
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceMonthly_EndDate).SendKeys(scheduleDates.scheduleEndDate);
                        }
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Weekly:
                        this._driver.FindElementById(GeneralMinistry.Activities.ScheduleRecurrence_Weekly).Click();
                        this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_StartDate).SendKeys(scheduleDates.scheduleStartDate);
                        new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_EveryNthWeek)).SelectByText(scheduleDates.scheduleRepeatWeek);
                        foreach (var dayOfWeek in scheduleDates.daysToMeet)
                        {
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Sunday)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Sunday).Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Monday)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Monday).Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Tuesday)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Tuesday).Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Wednesday)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Wednesday).Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Thursday)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Thursday).Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Friday)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Friday).Click();
                            }
                            if (dayOfWeek == GeneralEnumerations.WeeklyScheduleDays.Saturday)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Saturday).Click();
                            }
                        }

                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_Ending_Box).Click();
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceWeekly_EndDate).SendKeys(scheduleDates.scheduleEndDate);
                        }
                        break;
                    case GeneralEnumerations.ActivityScheduleFrequency.Yearly:
                        this._driver.FindElementById(GeneralMinistry.Activities.ScheduleRecurrence_Yearly).Click();
                        this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceYearly_StartDate).SendKeys(scheduleDates.scheduleStartDate);
                        if (!string.IsNullOrEmpty(scheduleDates.scheduleEndDate))
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceYearly_Ending_Box).Click();
                            this._driver.FindElementById(GeneralMinistry.Activities.RecurrenceYearly_EndDate).SendKeys(scheduleDates.scheduleEndDate);
                        }
                        break;
                    default:
                        throw new SeleniumException("Unknown frequency specified.");
                }
                #endregion Recurrences

                #endregion Activity Schedule

                // Submit
                this._driver.FindElementById(GeneralMinistry.Activities.Next_Step).Click();
                //System.Threading.Thread.Sleep(5000);

            #endregion Step 2

                #region Step 3

                // Unless there is validation on step two, continue to step 3
                if (!this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
                {
                    // If the activiy uses check-in
                    if (useCheckin)
                    {
                        // Specify the name of the roster
                        foreach (var roster in activityRosterNames)
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_Name).SendKeys(roster);
                        }

                        // Set the options for printing tags
                        this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintNameTag), printNameTag);
                        this._generalMethods.SelectCheckbox(By.Id(GeneralMinistry.Activities.Activity_PrintParentReceipt), printParentReceipt);

                        // Set activity to NOT be visible for check-in
                        if (startRosterAsClosed)
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_StartAsClosed).Click();
                        }

                        if (useRecommendedAges)
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_UseRecommendedAges).Click();

                            // Set the Check-in Best Fit
                            switch (checkinBestFit)
                            {
                                case GeneralEnumerations.ActivityCreationCheckinBestFit.AgeRange:
                                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_SetAgeRange).Click();
                                    break;
                                case GeneralEnumerations.ActivityCreationCheckinBestFit.BirthDateRange:
                                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_SetBirthdateRange).Click();
                                    break;
                                default:
                                    throw new SeleniumException("Unknown Check-in Best Fit Setting specified.");
                            }

                            // If Age Range, select Start and End range
                            if (checkinBestFit == GeneralEnumerations.ActivityCreationCheckinBestFit.AgeRange)
                            {
                                this._driver.FindElementById(GeneralMinistry.Activities.Roster_StartAge).SendKeys(bestFitAgeRangeMinAge);
                                this._driver.FindElementById(GeneralMinistry.Activities.Roster_EndAge).SendKeys(bestFitAgeRangeMaxAge);
                                new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Roster_AgeRangeType)).SelectByText(bestFitAgeRangeType);
                            }

                            // If Birth Date Range, select Start/End dates
                            if (checkinBestFit == GeneralEnumerations.ActivityCreationCheckinBestFit.BirthDateRange)
                            {
                                if (bestFitBirthDateRangeStart.HasValue)
                                {
                                    var birthDateStart = (bestFitBirthDateRangeStart.Value.ToShortDateString());
                                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Birthdate_Start).SendKeys(birthDateStart);
                                }
                                if (bestFitBirthDateRangeEnd.HasValue)
                                {
                                    var birthDateEnd = (bestFitBirthDateRangeEnd.Value.ToShortDateString());
                                    this._driver.FindElementById(GeneralMinistry.Activities.Roster_Birthdate_End).SendKeys(birthDateEnd);
                                }
                            }
                        }

                        // Add Roster
                        this._driver.FindElementById(GeneralMinistry.Activities.Roster_Save).Click();
                        this._generalMethods.WaitForElement(By.XPath("//div[@id='saved_rosters']/table[@id='']"));

                        // Click Create Activity
                        this._driver.FindElementById(GeneralMinistry.Activities.Create_Activity).Click();
                        this._generalMethods.WaitForElement(By.Id(TableIds.Ministry_Activities_ViewAll));
                    }
                    else
                    {
                        // If the activity does not use check-in: For each roster, specify the roster name and hit save.
                        foreach (var roster in activityRosterNames)
                        {
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_Name).SendKeys(roster);

                            // Add Roster
                            this._driver.FindElementById(GeneralMinistry.Activities.Roster_Save).Click();
                            this._generalMethods.WaitForElement(By.XPath("//div[@id='saved_rosters']/table[@id='']"));

                            // Click Create Activity
                            this._driver.FindElementById(GeneralMinistry.Activities.Create_Activity).Click();
                            this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));
                        }
                    }

                #endregion Step 3

                    // Unless there is validation, verify the activity is created
                    if (!this._generalMethods.IsElementPresentWebDriver(By.Id(GeneralMinistry.Activities.Error_Message)))
                    {

                        // Verify activity is created
                        var row = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Ministry_Activities_ViewAll, activityName, "Name") + 1;
                        Assert.AreEqual(activityName, this._driver.FindElementByXPath(string.Format("{0}/tbody/tr[{1}]/td[2]/a", TableIds.Ministry_Activities_ViewAll, row)).Text, "Activity name was incorrect");
                        //Assert.AreEqual("Active", this._selenium.GetText(string.Format("//table[@class='grid paged_grid']/tbody/tr[{0}]/td[2]", row)), "Activity status was incorrect");
                        //Assert.AreEqual(ministryName, this._selenium.GetText(string.Format("//table[@class='grid paged_grid']/tbody/tr[{0}]/td[3]", row)), "Ministry was incorrect");

                        // Click on the activity to verify more information
                        // this._selenium.ClickAndWaitForPageToLoad("link=" + activityName);

                        // Verify age range is present
                        // this._selenium.VerifyTextPresent(startAgeRange + "to" + endAgeRange);

                        // Verify check-in code was created even if check-in was not selected
                        // this._selenium.Navigate(Navigation.Ministry.ActivityRoom_Setup.Activities);

                        // var rowC = this._generalMethods.GetTableRowNumber(TableIds.Ministry_ActivityRoomSetup_Activities, activityName, "Activity") + 1;
                        // Assert.AreNotEqual("-", this._selenium.GetText(string.Format("//table[@id='{0}']/tbody/tr[{1}]/td[2]", TableIds.Ministry_ActivityRoomSetup_Activities, row)));
                    }

                    #region Step 3 Validation
                    else
                    {
                        // Validate messages
                        if (activityRosterNames == null)
                        {
                            this._generalMethods.VerifyTextPresentWebDriver("Please enter a roster name.");
                        }

                        // Enter generic roster name
                        // this._selenium.Type("roster_name", "Attendees");

                        // Save roster
                        // this._selenium.Click("commit");

                        // Cancel out of wizard
                        this._driver.FindElementByLinkText("Cancel").Click();
                        this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));
                    }
                    #endregion Step 3 Validation
                }

                #region Step 2 Validation
                else
                {
                    // Validate messages
                    if (string.IsNullOrEmpty(activityScheduleName))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a schedule name.");
                    }
                    if (string.IsNullOrEmpty(activityStartTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter a start time.");
                    }
                    if (string.IsNullOrEmpty(activityEndTime))
                    {
                        this._generalMethods.VerifyTextPresentWebDriver("Please enter an end time.");
                    }
                    // Validate reccurrence messages
                    switch (frequency)
                    {
                        case GeneralEnumerations.ActivityScheduleFrequency.Once:
                            if (string.IsNullOrEmpty(scheduleDates.activityScheduleStartDate))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please enter a date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Daily:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleRepeatDays))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please select how often this schedule repeats.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Monthly:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleRepeatMonth))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please select how often this schedule repeats.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.dayOfMonth))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please select a day of the month.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Weekly:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleRepeatWeek))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please select how often this schedule repeats.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.daysToMeet))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please select the day of the week this schedule occurs on.");
                            }
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                            }
                            break;
                        case GeneralEnumerations.ActivityScheduleFrequency.Yearly:
                            if (string.IsNullOrEmpty(scheduleDates.scheduleStartDate))
                            {
                                this._generalMethods.VerifyTextPresentWebDriver("Please enter a start date.");
                            }
                            break;
                    }

                    // Cancel out of wizard
                    this._driver.FindElementByLinkText("Cancel").Click();
                    this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));

                }
                #endregion Step 2 Validation
            }

            #region Step 1 Validation
            else
            {
                // Validate messages
                if (string.IsNullOrEmpty(activityName))
                {
                    this._generalMethods.VerifyTextPresentWebDriver("Activity name is required.");
                }

                // Cancel out of wizard
                this._driver.FindElementByLinkText("Cancel").Click();
                this._generalMethods.WaitForElement(By.XPath(TableIds.Ministry_Activities_ViewAll));
            }
            #endregion Step 1 Validation
        }

        /// <summary>
        /// Searches for a particular activity
        /// </summary>
        /// <param name="ministryName">The name of the Ministry</param>
        /// <param name="activityName">The name of the Activity</param>
        public void Ministry_Activities_Search(string ministryName, string activityName)
        {
            // Search for a particular ministry
            new SelectElement(this._driver.FindElementById(GeneralMinistry.Activities.Ministry_DropDown)).SelectByText(ministryName);
            // Search Acitivity.  Added by  ivan. zhang
            this.Ministry_Activities_ViewAll_SearchActivity(activityName);
            this._driver.FindElementById(GeneralMinistry.Activities.Inactive_CheckBox).Click();
            this._driver.FindElementByXPath(GeneralMinistry.Activities.Apply_Button).Click();
            this._generalMethods.WaitForElement(this._driver, By.LinkText(activityName));
        }

        private Boolean Get_Delete_Requirement(string requirement, string requirementValue, string date, string dateValue, string submittedBy, string submittedByValue, string status, string statusValue)
        {

            Boolean delete = false;

            //Req Only
            if ((requirement != "") &&
                (date == "") &&
                (submittedBy == "") &&
                (status == ""))
            {
                TestLog.WriteLine("Delete based on " + requirement);
                delete = (requirement == requirementValue) ? true : false;
            }
            //Req & Status Only
            else if ((requirement != "") &&
                     (date == "") &&
                     (submittedBy == "") &&
                     (status != ""))
            {
                TestLog.WriteLine(string.Format("Delete based on {0} and {1}.", requirement, status));
                delete = (requirement == requirementValue) &&
                         (status == statusValue)
                         ? true : false;

            }
            //Req & Date Only
            else if ((requirement != "") &&
                     (date != "") &&
                     (submittedBy == "") &&
                     (status == ""))
            {
                TestLog.WriteLine(string.Format("Delete based on {0} and {1}.", requirement, date));
                delete = (requirement == requirementValue) &&
                         (date == dateValue)
                         ? true : false;

            }

            //Req & SubmittedBy
            else if ((requirement != "") &&
                     (date == "") &&
                     (submittedBy != "") &&
                     (status == ""))
            {
                TestLog.WriteLine(string.Format("Delete based on {0} and {1}.", requirement, submittedBy));
                delete = (requirement == requirementValue) &&
                         (submittedBy == submittedByValue)
                         ? true : false;

            }
            else
            {
                delete = (requirement == requirementValue) &&
                         (date == dateValue) &&
                         (submittedBy == submittedByValue) &&
                         (status == statusValue)
                         ? true : false;
            }

            return delete;

        }

        private void Giving_ContributorDetails_Schedules_CreditCard_Select_Fund_SubFund_WebDriver(string fundOrPledgeDrive, string subFund)
        {


            //Select Fund
            new SelectElement(this._driver.FindElementById("fund")).SelectByText(fundOrPledgeDrive);

            // Select Fund and Subfund is provided
            if (!string.IsNullOrEmpty(subFund))
            {
                this._generalMethods.WaitForElement(this._driver, By.XPath("//select[@id='subfund']/option"), 20000, "Subfund was not present");
                new SelectElement(this._driver.FindElementById("subfund")).SelectByText(subFund);
            }



        }

        /// <summary>
        /// Set Personal Check Information for Giving Contribution Details Schedules
        /// </summary>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="routingNumber">Routing Number</param>
        /// <param name="accountNumber">Account Number</param>
        private void Set_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(string phoneNumber, string routingNumber, string accountNumber)
        {
            if (this._generalMethods.IsElementPresentWebDriver(By.Id("payment_method_check")))
            {
                this._driver.FindElementById("payment_method_check").Click();
            }

            // Enter all personal check information
            this._driver.FindElementById("phone").SendKeys(phoneNumber);
            this._driver.FindElementById("routing_number").SendKeys(routingNumber);
            this._driver.FindElementById("account_number").SendKeys(accountNumber);

            // Select Continue
            this._driver.FindElementById("btn").Click();
        }

        /// <summary>
        /// Sets Giving Contribution Details Schedules Credit Card Address Information WebDriver
        /// </summary>
        /// <param name="churchId">Church ID</param>
        /// <param name="firstName">First Name</param>
        /// <param name="lastName">Last Name</param>
        /// <param name="creditCardType">Credit Card Type</param>
        /// <param name="creditCardNumber">Credit Card Number</param>
        /// <param name="expirationMonth">Exp. Date</param>
        /// <param name="expirationYear">Exp. Year</param>
        /// <param name="validFromMonth">Valid From Month</param>
        /// <param name="validFromYear">Valid From Year</param>
        /// <param name="securityCode">Secuirty Code</param>
        /// <param name="address1">Address 1</param>
        /// <param name="address2">Address 2</param>
        /// <param name="city">City</param>
        /// <param name="stProvince">State or Province</param>
        /// <param name="postalCode">Posta Code</param>
        /// <param name="county">County</param>
        private void Set_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(string churchId, string firstName, string lastName,
                    string creditCardType, string creditCardNumber, string expirationMonth, string expirationYear, string validFromMonth, string validFromYear, string securityCode,
                    string address1 = "", string address2 = "", string city = "", string stProvince = "", string postalCode = "", string county = "", string countryName = "")
        {

            // Select bullet for credit card
            if (churchId.ToString() == "15")
            {
                this._driver.FindElementById("payment_method_cc").Click();
            }

            // Enter all credit card information
            this._driver.FindElementById("FirstName").SendKeys(firstName);
            this._driver.FindElementById("LastName").SendKeys(lastName);
            new SelectElement(this._driver.FindElementById("payment_type_id")).SelectByText(creditCardType);
            //this._driver.FindElementById("account_number").SendKeys(creditCardNumber);
            //TestLog.WriteLine("CC: " + creditCardNumber);
            this._driver.FindElementByName("cc_account_number").SendKeys(creditCardNumber);

            new SelectElement(this._driver.FindElementById("expiration_month")).SelectByText(expirationMonth);
            new SelectElement(this._driver.FindElementById("expiration_year")).SelectByText(expirationYear);

            // If Switch or Solo enter Valid From month/year plus security code
            //if ((creditCardType == "Switch") || (creditCardType == "Solo"))
            //{
            //    new SelectElement(this._driver.FindElementById("valid_from")).SelectByText(validFromMonth);
            //    new SelectElement(this._driver.FindElementById("valid_from_year")).SelectByText(validFromYear);
            //    this._driver.FindElementById("IssueNumber").SendKeys(securityCode);
            //}
            //All others use CVC
            //else
            //{
            this._driver.FindElementById("CVC").SendKeys(securityCode);
            //}

            //Default Country
            if (churchId.ToString() == "15")
            {
                //US
                countryName = "United States";
            }
            else if (churchId.ToString() == "258")
            {
                //UK
                countryName = "United Kingdom";

            }

            TestLog.WriteLine("Default Country Name: {0}", new SelectElement(this._driver.FindElementById("Country")).SelectedOption.Text);
            Assert.AreEqual(countryName, new SelectElement(this._driver.FindElementById("Country")).SelectedOption.Text, "Default country error");

            //Address
            if (address1 != "") this._driver.FindElementById("Address1").SendKeys(address1);
            if (address2 != "") this._driver.FindElementById("Address2").SendKeys(address2);
            if (city != "") this._driver.FindElementById("City").SendKeys(city);
            if (stProvince != "") new SelectElement(this._driver.FindElementById("state")).SelectByText(stProvince);
            if (postalCode != "") this._driver.FindElementById("PostalCode").SendKeys(postalCode);
            if (county != "") this._driver.FindElementById("County").SendKeys(county);


            // Select Continue
            this._driver.FindElementById("btn").Click();

        }


        /// <summary>
        /// Validates Giving Congribution Details Schedules Step 1
        /// </summary>
        /// <param name="fundOrPledgeDrive">Fund or Pledge Drive</param>
        /// <param name="amount">Amount</param>
        private void Validate_Giving_ContributorDetails_Schedules_FundPledgeAmount_Information_WebDriver(string fundOrPledgeDrive, string amount)
        {
            if (fundOrPledgeDrive == "--")
            {
                this._generalMethods.VerifyTextPresentWebDriver("A valid fund is required");
            }
            else if (string.IsNullOrEmpty(amount))
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please enter a valid amount");
            }

            // Cancel out of the wizard
            this._driver.FindElementByLinkText("Cancel").Click();

        }

        /// <summary>
        /// Validate Personal Check Information using WebDriver
        /// </summary>
        /// <param name="phoneNumber">Phone Number</param>
        /// <param name="accountNumber">Account Number</param>
        /// <param name="routingNumber">Routing Number</param>
        private void Validate_Giving_ContributorDetails_Schedules_PersonalCheck_Information_WebDriver(string phoneNumber, string accountNumber, string routingNumber)
        {

            if (string.IsNullOrEmpty(phoneNumber))
            {
                this._generalMethods.VerifyTextPresentWebDriver("Phone number is required");
            }
            else if (phoneNumber.Length > 50)
            {
                this._generalMethods.VerifyTextPresentWebDriver("Phone number cannot exceed 50 characters");
            }
            if (string.IsNullOrEmpty(accountNumber))
            {
                this._generalMethods.VerifyTextPresentWebDriver("Account number is required");
            }
            else if (accountNumber.Length > 30)
            {
                this._generalMethods.VerifyTextPresentWebDriver("Account number cannot exceed 30 characters");
            }
            if (string.IsNullOrEmpty(routingNumber))
            {
                this._generalMethods.VerifyTextPresentWebDriver("Bank routing number is required");
            }
            else if (routingNumber.Length > 9)
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please provide a valid nine-digit routing number");
            }
            else if (routingNumber.Length < 9)
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please provide a valid nine-digit routing number");
            }

            // Cancel out of the wizard
            this._driver.FindElementByLinkText("<< Back").Click();
            this._driver.FindElementByLinkText("<< Back").Click();
            this._driver.FindElementByLinkText("Cancel").Click();

        }

        /// <summary>
        /// Validate Credit Card and Adddress Information Errors
        /// </summary>
        /// <param name="creditCardType">Credit Card Type</param>
        /// <param name="creditCardNumber">Credit Card Number</param>
        /// <param name="firstName">First Name</param>
        /// <param name="lastName">Last Name</param>
        /// <param name="expirationMonth">Expiration Month</param>
        /// <param name="expirationYear">Expiration Year</param>
        /// <param name="validFromMonth">Valid From Month</param>
        /// <param name="validFromYear">Valid From Year</param>
        private void Validate_Giving_ContributorDetails_Schedules_CreditCard_Information_WebDriver(string creditCardType, string creditCardNumber, string firstName, string lastName,
                        string expirationMonth, string expirationYear, string validFromMonth, string validFromYear)
        {
            if (creditCardType == "--")
            {
                this._generalMethods.VerifyTextPresentWebDriver("Credit card type is required");
            }
            else if (string.IsNullOrEmpty(creditCardNumber))
            {
                this._generalMethods.VerifyTextPresentWebDriver("Credit card number is required");
            }
            else if (creditCardNumber.Length > 30)
            {
                this._generalMethods.VerifyTextPresentWebDriver("Credit card cannot exceed 30 characters");
            }
            else if (string.IsNullOrEmpty(firstName))
            {
                this._generalMethods.VerifyTextPresentWebDriver("First name is required");
            }
            else if (firstName.Length > 50)
            {
                this._generalMethods.VerifyTextPresentWebDriver("First name cannot exceed 50 characters");
            }
            else if (string.IsNullOrEmpty(lastName))
            {
                this._generalMethods.VerifyTextPresentWebDriver("Last name is required");
            }
            else if (lastName.Length > 50)
            {
                this._generalMethods.VerifyTextPresentWebDriver("Last name cannot exceed 50 characters");
            }
            else if (expirationMonth == "--")
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please select a valid expiration month");
            }
            else if (expirationYear == "--")
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please select a valid expiration year");
            }
            else if (this._driver.FindElementById("Address1").GetAttribute("value") == "")
            {
                TestLog.WriteLine("Address: " + this._driver.FindElementById("Address1").GetAttribute("value"));
                this._generalMethods.VerifyTextPresentWebDriver("Street 1 is required");

            }
            else if (this._driver.FindElementById("City").GetAttribute("value") == "")
            {

                this._generalMethods.VerifyTextPresentWebDriver("City is required");

            }
            else if (this._driver.FindElementById("PostalCode").GetAttribute("value") == "")
            {
                this._generalMethods.VerifyTextPresentWebDriver("Postal Code is required");

            }
            //else if ((creditCardType == "Switch") || (creditCardType == "Solo"))
            //{
            //    if (string.IsNullOrEmpty(validFromMonth))
            //    {
            //        this._generalMethods.VerifyTextPresentWebDriver("Please select a correct valid from month");
            //    }
            //    if (string.IsNullOrEmpty(validFromYear))
            //    {
            //        this._generalMethods.VerifyTextPresentWebDriver("Please select a correct valid from year");
            //    }
            //}


            // Cancel our of wizard
            this._driver.FindElementByLinkText("<< Back").Click();
            this._driver.FindElementByLinkText("<< Back").Click();
            this._driver.FindElementByLinkText("Cancel").Click();


        }

        private void Validate_Giving_ContributorDetails_Schedules_CreditCard_StartDayMonthYear_WebDriver(string startDay, string startMonth, string startYear)
        {

            if (startDay == "-day-")
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please select a valid Start Day");
            }
            if (startMonth == "-month-")
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please select a valid Start Month");
            }
            if (startYear == "-year-")
            {
                this._generalMethods.VerifyTextPresentWebDriver("Please select a valid Start Year");
            }

            // Cancel out of the wizard
            this._driver.FindElementByLinkText("<< Back").Click();
            this._driver.FindElementByLinkText("Cancel").Click();


        }

        #endregion Private Methods

        #region EventRegistration



        /// <summary>
        ///  Create new Event Registration Form
        /// </summary>
        /// <param name="formName"
        /// <param name="active"

        public void EventRegistration_Create_NewForm(string formName, bool active)
        {


            // Create a new form
            this._driver.FindElementByLinkText("Add").Click();
            if (!string.IsNullOrEmpty(formName))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Edit_FormName).SendKeys(formName);
            }
            if (!active)
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Active_Form).Click();
            }
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Save_Form).Click();
        }

        /// <summary>
        /// To Delete a Form from UI
        /// </summary>
        /// <param name="formName"></param>
        public void EventRegistration_Delete_Form(string formName)
        {

            //Navigate to Weblink forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Manage_Forms);


            //    this._driver.FindElementByLinkText("T").Click();
            int itemDelete = this._generalMethods.GetTableRowNumberWebDriver(TableIds.WebLink_InFellowship_FormsTable, formName, "Form Name", null);


            this._driver.FindElementByXPath(string.Format("//table[*]/tbody/tr[{0}]/td[*]/a[@class='delete']", itemDelete + 1)).Click();

            this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);
            this._driver.FindElementById("btnYes").Click();
            this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);

            return;


        }
        /// <summary>
        /// Add PromotionCodes
        /// </summary>
        /// <param name="promotionCodes"></param>
        /// <returns></returns>
        public bool EventRegistration_Create_PromotionCodes_Form(IEnumerable<PromocodeEntity> promotionCodes) {
            if (promotionCodes == null)
                return false;
            //Click PromotionCode link
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Selet).Click();

            foreach (var pc in promotionCodes.Where(pc => !string.IsNullOrWhiteSpace(pc.PromocodeName) && !string.IsNullOrWhiteSpace(pc.Promocode) && !string.IsNullOrWhiteSpace(pc.StartDate) && !string.IsNullOrWhiteSpace(pc.EndDate)))
            {
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Name_Textbox).Clear();
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Textbox).Clear();
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Name_Textbox).SendKeys(pc.PromocodeName);
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Textbox).SendKeys(pc.Promocode);
                string discountToApplySelect;
                string discountToApplyTextbox;
                string discountValue;
                if (pc.IsAmount) {
                    discountToApplySelect = Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Discount_Amount_Select;
                    discountToApplyTextbox = Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Discount_Amount_Textbox;
                    discountValue = pc.Amount.ToString(CultureInfo.InvariantCulture);
                }
                else {
                    discountToApplySelect = Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Discount_Percentage_Select;
                    discountToApplyTextbox = Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Discount_Percentage_Textbox;
                    discountValue = pc.Percentage.ToString();
                }
                _driver.FindElementById(discountToApplySelect).Click();
                _driver.FindElementById(discountToApplyTextbox).Clear();
                _driver.FindElementById(discountToApplyTextbox).SendKeys(discountValue);
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_StartDate).Clear();
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_EndDate).Clear();
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_StartDate).SendKeys(pc.StartDate);
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_EndDate).SendKeys(pc.EndDate);
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Settings_Save).Click();
            }
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Promocode_Done).Click();

            return true;
        }

        /// <summary>
        /// Add Payment Setting
        /// </summary>
        /// <returns></returns>
        public bool EventRegistration_Create_PaymentSetting_Form(double downPaymentAmount, string cutoffDate, string balanceDueDate) {
            if (string.IsNullOrWhiteSpace(balanceDueDate))
                return false;
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_Select).Click();
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_Amount_Textbox).Clear();
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_Amount_Textbox).SendKeys(downPaymentAmount.ToString(CultureInfo.InvariantCulture));
            if (string.IsNullOrWhiteSpace(cutoffDate)) {
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_NoCutoffDate_Select).Click();
            }
            else {
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_CutoffDate_Select).Click();
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_CutOffDate_Textbox).Clear();
                _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_CutOffDate_Textbox).SendKeys(cutoffDate);
            }
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_BalanceDueDate_Textbox).Clear();
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_BalanceDueDate_Textbox).SendKeys(balanceDueDate);
            _driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.DownPayment_Setting_Save).Click();
            return true;
        }
        /// <summary>
        /// To Add/Configure Questions and Corresponding drop down Answer choices 
        /// </summary>
        /// <param name="header"></param>
        /// <param name="question"></param>
        /// <param name="answer"></param>
        public void EventRegistration_Create_QuestionAndAnswer_Dropdown(string header, string question, string[] answer)
        {

            // Create a Header
            this._driver.FindElementByLinkText("Questions and answers").Click();
            this._driver.FindElementByLinkText("Add new header").Click();
            if (!string.IsNullOrEmpty(header))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Form_Header).SendKeys(header);
            }

            //click on  Shared check box for Header
            this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Shared_Question_Checkbox)).Click();

            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Header).Click();


            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();

            //Create a new Question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Question).Click();
            if (!string.IsNullOrEmpty(question))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Question_Text).SendKeys(question);
            }

            //Selecting Answer as required for question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Required).Click();

            //Drop down seelct
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Dropdown_Answer).Click();


            // Adding/submitting question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Save_Question).Click();

            //NAvigating back
            this._driver.FindElementById("tab_back").Click();

            // Addding Answer choices
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Answer_Choice).Click();

            for (int i = 0; i < answer.Length; i++)
            {
                if (!string.IsNullOrEmpty(answer[i]))
                {
                    this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Choice_Textbox).SendKeys(answer[i]);
                }
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Save).Click();
            }



        }

        /// <summary>
        /// 
        /// This method is used to create DRop down answer with upsell value
        /// </summary>
        /// <param name="header"></param>
        /// <param name="question"></param>
        /// <param name="answer"></param>
        public void EventRegistration_Create_QuestionAndAnswer_Dropdown_Upsell(string header, string question, string[] answer, string[] answerPrice, Boolean questionRequired = true)
        {

            // Create a Header
            this._driver.FindElementByLinkText("Questions and answers").Click();
            this._driver.FindElementByLinkText("Add new header").Click();
            if (!string.IsNullOrEmpty(header))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Form_Header).SendKeys(header);
            }

            //click on  Shared check box for Header
            //   this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Shared_Question_Checkbox)).Click();

            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Header).Click();


            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();

            //Create a new Question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Question).Click();
            if (!string.IsNullOrEmpty(question))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Question_Text).SendKeys(question);
            }

            if (questionRequired)
            {   
                //Selecting Answer as required for question
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Required).Click();
            }

            //Drop down seelct
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Dropdown_Answer).Click();


            // Adding/submitting question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Save_Question).Click();

            //NAvigating back
            this._driver.FindElementById("tab_back").Click();

            // Addding Answer choices
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Answer_Choice).Click();

            for (int i = 0; i < answer.Length; i++)
            {
                if (!string.IsNullOrEmpty(answer[i]))
                {
                    this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Choice_Textbox).SendKeys(answer[i]);
                    this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Price_Textbox).SendKeys(answerPrice[i]);
                }
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Save).Click();
            }

            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();
            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();


        }



        /// <summary>
        /// This method will Select the form from table and click on it
        /// </summary>
        /// <param name="formName"></param>

        public void EventRegistration_Select_FormName_FromTable(string formName)
        {
            //Navigate to Weblink forms
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.Manage_Forms);

            //selecting Form Name
            this._driver.FindElementByLinkText(formName.Substring(0, 1).ToUpper()).Click();


            // finiding form name to click by looping through the table


            int itemRow = this._generalMethods.GetTableRowNumberWebDriver(TableIds.Portal.WebLink_ManageForms, formName, "Form Name", null);
            IWebElement table = this._driver.FindElementById(TableIds.Portal.WebLink_ManageForms);
            TestLog.WriteLine("Row number {0}", itemRow);

            table.FindElements(By.TagName("tr"))[itemRow].FindElements(By.TagName("td"))[0].FindElement(By.TagName("a")).Click();




        }

        /// <summary>
        /// This method will select Validation type for TextBox
        /// </summary>
        /// <param name="?"></param>
        public void EventRegistration_Select_TextBox_ValidationType(string validationType)
        {
            if (!string.IsNullOrEmpty(validationType))
            {
                new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Validation_Type))).SelectByText(validationType);
            }


            // Adding/submitting question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Save_Question).Click();

            //NAvigating back
            this._driver.FindElementById("tab_back").Click();

            //Navigate Back to Form page
            this._driver.FindElementById("tab_back").Click();
            this._driver.FindElementById("tab_back").Click();
        }




        /// <summary>
        /// To Add/Configure Questions and corresponding Text box answer choice
        /// </summary>
        /// <param name="header"></param>
        /// <param name="question"></param>
        /// <param name="answer"></param>
        public void EventRegistration_Create_Question_Textbox(string header, string question)
        {
            // Create a Header
            this._driver.FindElementByLinkText("Questions and answers").Click();
            this._driver.FindElementByLinkText("Add new header").Click();
            if (!string.IsNullOrEmpty(header))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Form_Header).SendKeys(header);
            }
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Header).Click();

            this._generalMethods.WaitForElementDisplayed(By.Id("tab_back"));
            //  this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnDone").Click();

            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();

            //Create a new Question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Question).Click();
            if (!string.IsNullOrEmpty(question))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Question_Text).SendKeys(question);
            }



        }

        public void EventRegistration_Create_SharedHeader_Question_Textbox(string header, string question)
        {

            // Create a Header
            this._driver.FindElementByLinkText("Questions and answers").Click();
            this._driver.FindElementByLinkText("Add new header").Click();
            if (!string.IsNullOrEmpty(header))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Form_Header).SendKeys(header);
            }

            //selecting Header as Shared
            //click on  Shared check box for Header
            this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Shared_Question_Checkbox)).Click();


            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Header).Click();

            this._generalMethods.WaitForElementDisplayed(By.Id("tab_back"));
            //  this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnDone").Click();

            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();

            //Create a new Question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Question).Click();
            if (!string.IsNullOrEmpty(question))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Question_Text).SendKeys(question);
            }



        }
        /// <summary>
        /// To Add/Configure Shared Header and Questions 
        /// <param name="header"></param>
        /// <param name="question"></param>
        /// <param name="answer"></param>
        public void EventRegistration_Create_SharedHeader_Question(string header, string question)
        {
            // Create a Header
            this._driver.FindElementByLinkText("Questions and answers").Click();
            this._driver.FindElementByLinkText("Add new header").Click();
            if (!string.IsNullOrEmpty(header))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Form_Header).SendKeys(header);
            }

            //Seelcting Header as Shared
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Shared_Header).Click();

            //Save Header
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Header).Click();

            this._generalMethods.WaitForElementDisplayed(By.Id("tab_back"));
            //  this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnDone").Click();

            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();

            //Create a new Question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Question).Click();
            if (!string.IsNullOrEmpty(question))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Question_Text).SendKeys(question);
            }



        }


        public void EventRegistration_Create_Fund_Form(string fund)
        {

            //Select Account Association
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Account_Association).Click();

            //Select Fund
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Fund_Select_Radio_button).Click();

            if (!string.IsNullOrEmpty(fund))
            {
                new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Fund_Select_Dropdown))).SelectByText(fund);
            }

            //Save Fund value

            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Fund_Select_Save).Click();

        }

        public void EventRegistration_Create_Price_Form(double price, string startDate, string endDate)
        {

            //Select Date Price range
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Price_Date_Range).Click();


            //Select Price and date range

            if (price != null)
            {
                this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Price_TextBox)).SendKeys(Convert.ToString(price));

            }

            if (!string.IsNullOrEmpty(startDate))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Price_StartDate).SendKeys(startDate);
            }

            if (!string.IsNullOrEmpty(endDate))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Price_EndDate).SendKeys(endDate);
            }

            //SAve Price date settings

            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Price_Settings_Save).Click();

        }

        /// <summary>
        /// To Add Question
        /// </summary>
        /// <param name="header"></param>
        /// <param name="question"></param>
        /// <param name="answer"></param>
        public void EventRegistration_Create_QuestionAndAnswer_Textbox_Save_(string header, string question, string answer)
        {
            // Create a Header
            this._driver.FindElementByLinkText("Questions and answers").Click();
            this._driver.FindElementByLinkText("Add new header").Click();
            if (!string.IsNullOrEmpty(header))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Form_Header).SendKeys(header);
            }
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Header).Click();


            //Navigating to back pages
            this._driver.FindElementById("tab_back").Click();

            //Create a new Question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Question).Click();
            if (!string.IsNullOrEmpty(question))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Question_Text).SendKeys(question);
            }
            //Selecting Answer as required for question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Answer_Required).Click();

            //Drop down seelct
            //   this._driver.FindElementById("ctl00_ctl00_MainContent_content_rdbtnDropDown").Click();

            // Adding/submitting question
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Save_Question).Click();

            //NAvigating back
            this._driver.FindElementById("tab_back").Click();


        }

        /// <summary>
        /// To Add Activity association settings 
        /// </summary>
        /// <param name="ministry"></param>
        /// <param name="activity"></param>
        /// <param name="breakoutGroup"></param>
        /// <param name="activityGroup"></param>
        public void Activity_Association_Settings(string ministry, string activity, string breakoutGroup, string activityGroup)
        {
            //click on associate schedule
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Modify_Activity_Association).Click();
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Associate_Activity).Click();
            if (!string.IsNullOrEmpty(ministry))
            {
                new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Ministry_Dropdown))).SelectByText(ministry);
            }
            if (!string.IsNullOrEmpty(activity))
            {
                new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Activity_Dropdown))).SelectByText(activity);
            }
            if (!string.IsNullOrEmpty(breakoutGroup))
            {
                new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.BreakoutGroup_Dropdown))).SelectByText(breakoutGroup);
            }
            if (!string.IsNullOrEmpty(activityGroup))
            {
                new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.ActivityGroup_Dropdown))).SelectByText(activityGroup);
            }

            //Save Settings
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Save_Activity_Settings).Click();

        }



        /// <summary>
        /// To create Activity schedule
        /// </summary>
        /// <param name="ministry"></param>
        /// <param name="activity"></param>
        /// <param name="breakoutGroup"></param>
        /// <param name="activityGroup"></param>
        /// <param name="activitySchedule"></param>
        public void EventRegistration_Create_Schedule(string ministry, string activity, string breakoutGroup, string activityGroup, string[] activitySchedule)
        {

            //Associate Activity settings
            Activity_Association_Settings(ministry, activity, breakoutGroup, activityGroup);

            //Selecting Schedule

            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Schedule_Time_Choices).Click();
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Select_Schedule).Click();

            //Adding schedule name to destination

            for (int i = 0; i < (activitySchedule.Length); i++)
            {
                if (!string.IsNullOrEmpty(activitySchedule[i]))
                {
                    new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Schedule_Source))).SelectByText(activitySchedule[i]);
                }
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Schedule_Add).Click();
            }


        }


        /// <summary>
        /// This method to select current schedule day for Test Schedule
        /// </summary>
        /// <param name="?"> formName</param>
        public void EventRegistration_Select_Schedule_CurrentDate(string formName)
        {
            string date = string.Format("{0} 2:00 PM", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).AddDays(1).ToShortDateString());
            //  string date = string.Format("{0}", TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("Central Standard Time")).AddDays(1).ToShortDateString());
            Actions builder = new Actions(this._driver);

            //Click on schedule selection
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_lnkScheduleTime").Click();

            //select option for date selection
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_rdbtnSelectInstance").Click();

            //cleaning if schedule is already selected..
            Boolean elementFound = false;
            IWebElement destDropdown = this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_lbInstanceDest"));
            IList<IWebElement> options = destDropdown.FindElements(By.TagName("option"));

            int itemRow = 0;
            foreach (IWebElement option in options)
            {
                if (option.Text.Contains(date))
                {
                    //IF element present in the destination select and remove before adding it back
                    elementFound = true;
                    IJavaScriptExecutor executor = (IJavaScriptExecutor)this._driver;
                    ((IJavaScriptExecutor)executor).ExecuteScript("arguments[0].scrollIntoView(true);", destDropdown);

                    new SelectElement(this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_lbInstanceDest"))).SelectByText(date);
                    this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnInstanceRemove").Click();
                    break;
                }
                itemRow++;
            }

            //select current date
            // new SelectElement(this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_lbInstanceSource"))).SelectByText(date);

            IWebElement selectDropdown = this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_lbInstanceSource"));
            IList<IWebElement> selectOptions = selectDropdown.FindElements(By.TagName("option"));
            int itemRow2 = 0;
            foreach (IWebElement option2 in selectOptions)
            {
                if (option2.Text.Contains(date))
                {
                    // builder.ClickAndHold(option2);
                    new SelectElement(this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_lbInstanceSource"))).SelectByText(date);
                    break;
                }
                itemRow2++;
            }

            //    new SelectElement(this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_lbInstanceSource"))).SelectByText(date);

            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnInstanceAdd").Click();

            //save changes
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnDone").Click();

        }
        /// <summary>
        /// To Create Activity Instance schedule 
        /// </summary>
        /// <param name="ministry"></param>
        /// <param name="activity"></param>
        /// <param name="breakoutGroup"></param>
        /// <param name="activityGroup"></param>
        /// <param name="scheduleName"></param>
        /// <param name="activitySchedule"></param>
        public void EventRegistration_Create_Date_Schedule(string ministry, string activity, string breakoutGroup, string activityGroup, string[] scheduleName, string[] activitySchedule)
        {

            //Associate Activity settings
            Activity_Association_Settings(ministry, activity, breakoutGroup, activityGroup);

            //Selecting Schedule

            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Schedule_Time_Choices).Click();

            //Selecting Instace Radio button
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Select_Instance).Click();

            //Selecting Activity schedule Name

            /*  for (int i = 0; i < (scheduleName.Length); i++)
              {
                  new SelectElement(this._driver.FindElement(By.Id("ctl00_ctl00_MainContent_content_ddlActivitySchedules_dropDownList"))).SelectByText(scheduleName[i]);

              } */

            //Adding schedule name to destination
            for (int i = 0; i < (scheduleName.Length); i++)
            {
                new SelectElement(this._generalMethods.WaitAndGetElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Schedule_DropdownList))).SelectByText(scheduleName[i]);
                Retry.WithPolling(2000);

                if (!string.IsNullOrEmpty(activitySchedule[i]))
                {
                    new SelectElement(this._driver.FindElement(By.Id(Navigation.Portal.WebLink.Event_Registration.ManageForms.Instance_Source))).SelectByText(activitySchedule[i]);
                }

                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Instance_Add).Click();
            }


        }


        /// <summary>
        /// This method creates custome Email message for EVent Registration
        /// </summary>
        /// <param name="emailMesasge"></param>
        public void EventRegistration_Create_CustomConfirmationMessage(string emailMesasge, string emailAddress)
        {

            //Click on Create Confirmation Message
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Create_Confirmation_Message).Click();

            //Add Email address
            if (!string.IsNullOrEmpty(emailAddress))
            {
                this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Confirmation_Message_Email).SendKeys(emailAddress);
            }

            //Create Confirmation message
            IWebElement tiny_mce_frame = this._driver.FindElementById("tiny_mce_editor_ifr");


            /* this._driver.SwitchTo().Frame(tiny_mce_frame);
             this._driver.FindElement(By.CssSelector(".mceContentBody")).Clear();

             //Adding this wait time to verify iframe execution with GRID
             Retry.WithPolling(500).WithTimeout(50000);
             if (!string.IsNullOrEmpty(emailMesasge))
             {
                 this._driver.FindElement(By.CssSelector(".mceContentBody")).SendKeys(emailMesasge);
             }
             */
            this._driver.SwitchTo().Frame(tiny_mce_frame);
            this._driver.SwitchTo().ActiveElement();
            ((IJavaScriptExecutor)this._driver).ExecuteScript(string.Format("document.body.innerHTML = '{0}'", emailMesasge));

            this._driver.SwitchTo().DefaultContent();
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Confirmation_Save).Click();



        }

        /// <summary>
        /// This method is to verify Confirmation Email Receipt in Portal fro submitted forms
        /// </summary>
        /// <param name="confirmcode"></param>
        /// <param name="individual"></param>
        public void Verify_EventRegistration_Confirmation_Email_Receipt(string confirmcode, double price, int noOfIndividual)
        {
            // Navigate to weblink->View submission
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);

            //Search for Confirmation code
            if (!string.IsNullOrEmpty(confirmcode))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").SendKeys(confirmcode);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSearch").Click();

            }
            //click on view

            this._driver.FindElementByLinkText("View").Click();


            //Validating Total value
            string totalIdValue = string.Format("ctl00_ctl00_MainContent_content_rptOrderSummary_ctl0{0}_lblTotal", noOfIndividual + 1);
            Assert.AreEqual(this._driver.FindElementById(totalIdValue).Text, string.Format("{0:C2}", price), "Total value did not match");


            //Click on Email Receipt
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_lnkEmailReceipt").Click();

            //Switch to Email Receipt window
            this._driver.SwitchTo().Window(this._driver.WindowHandles[1]);

            //Verify email confirmation number

            Assert.AreEqual(this._driver.FindElementById("rptOrderSummary_ctl01_lblConfirmationCode").Text, confirmcode, "Confirmation code did not exists in email receipt");
            Assert.AreEqual(this._driver.FindElementById("rptOrderSummary_ctl03_lblTotalAmount").Text, string.Format("{0:C2}", price), "Total value did not match");


            //Switch back to main window                     
            this._driver.SwitchTo().Window(this._driver.WindowHandles[0]);


        }

        /// <summary>
        /// This menthod will submit the Refund
        /// </summary>
        /// <param name="confirmcode"></param>
        /// <param name="price"></param>

        public void Verify_EventRegistration_Submission_Refund(string confirmcode, double price)
        {
            // Navigate to weblink->View submission
            this._generalMethods.Navigate_Portal(Navigation.Portal.WebLink.Event_Registration.View_Submissions);

            //Search for Confirmation code
            if (!string.IsNullOrEmpty(confirmcode))
            {
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_txtConfirmationCode_textBox").SendKeys(confirmcode);
                this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSearch").Click();

            }
            //click on view

            this._driver.FindElementByLinkText("View").Click();

            //Click on Refund
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnRefund").Click();

            //Enter Refund amount
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_mainFieldset_txtPaymentAmount_textBox").SendKeys(Convert.ToString(price));

            //Click on Add Refund
            this._driver.FindElementById("ctl00_ctl00_MainContent_content_btnSave").Click();

            //Verify that no error displayed and refund was successful

            this._generalMethods.VerifyTextNotPresentWebDriver("Authorization was not successful. Please check your information including your billing address to make sure they are accurate, or use another card or select another form of payment");

        }

        /// <summary>
        /// This method sets the form restrictions for Weblink forms
        /// </summary>
        /// <param name="maxSubmissions"></param>
        /// <param name="startDate"></param>
        /// <param name="endDate"></param>
        /// <param name="gender"></param>
        /// <param name="startAge"></param>
        /// <param name="endAge"></param>
        /// <param name="ageByDate"></param>
        /// <param name="years">Default to True</param>
        public void EventRegistration_Create_FormRestrictions(string formName, string maxSubmissions, string startDate, string endDate, string gender, string startAge, string endAge, string ageByDate, bool years = true)
        {
            this._driver.FindElementById(Navigation.Portal.WebLink.Event_Registration.ManageForms.Add_Edit_FormName).SendKeys(formName);
            //Enter Max Submissions
            if (maxSubmissions != null)
            {
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_Submissions).SendKeys(maxSubmissions);
            }
            //Are there Date restrictions?
            if (startDate != null | endDate != null)
            {
                //Click radio button
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_DateRangeRadio).Click();

                //Enter Start date
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_StartDate).SendKeys(startDate);

                //Enter End Date
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_EndDate).SendKeys(endDate);
            }
            //Is there a Gender Restriction?
            if (gender != null)
            {
                //Click Radio button
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_GenderRadio).Click();
                //Select Gender Option
                new SelectElement(this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_GenderDropDown)).SelectByText(gender);
            }
            //Are there Age restrictions?
            if (startAge != null | endAge != null)
            {
                //Click Radio option
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeRangeRadio).Click();
                //Enter start age
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_StartAge).SendKeys(startAge);
                //Enter end age
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_EndAge).SendKeys(endAge);
                //Years or Months?
                if (years)
                {
                    //Click Years
                    this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeYearsRadio).Click();
                }
                else
                {
                    //Click Months
                    this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeMonthsRadio).Click();
                }
                //Input Age By Date
                this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_AgeByDate).SendKeys(ageByDate);
            }
            //Click Save
            this._driver.FindElementById(GeneralWebLink.Forms.Weblink_CreateForm_Restrictions_SaveButton).Click();
            this._generalMethods.WaitForElement(By.Id("ctl00_ctl00_MainContent_content_lnkbtnRestrictions"));
            //Verify form Created
            Assert.AreEqual(formName, this._driver.FindElementById("ctl00_ctl00_MainContent_content_lblFormName").Text);

        }
        #endregion EventRegistration


        public string GetPortalURL()
        {
            return GetPortalURL(this._f1Environment);
        }

        #region Static Methods
        public static string GetPortalURL(F1Environments f1Environment)
        {

            string returnValue = string.Empty;

            switch (f1Environment)
            {
                case F1Environments.LOCAL:
                    returnValue = "http://portal.local/login.aspx";
                    break;

                /*  case F1Environments.DEV1:
                  case F1Environments.DEV2:
                  case F1Environments.DEV3:
                      returnValue = string.Format("http://portal.{0}.dev.corp.local", f1Environment.ToString().ToLower());
                      break;
                  case F1Environments.INTEGRATION:
                      returnValue = "http://portal.integration.corp.local/login.aspx";
                      break;
                  case F1Environments.DEV: */

                case F1Environments.QA:
                    returnValue = string.Format("http://portal{0}.dev.corp.local/", f1Environment);
                    break;
                case F1Environments.LV_QA:
                case F1Environments.INT:
                case F1Environments.INT2:
                case F1Environments.INT3:
                case F1Environments.LV_UAT:
                case F1Environments.LV_PROD:
                case F1Environments.STAGING:
                    returnValue = string.Format("https://portal.{0}.fellowshipone.com/", GetLVEnvironment(f1Environment));
                    break;
                case F1Environments.PRODUCTION:
                    returnValue = "https://portal.fellowshipone.com/";
                    break;
                default:
                    throw new Exception(string.Format("[{0}] is Not a valid environment option!", f1Environment));
            }

            return returnValue;
        }

        public static string GetLVEnvironment(F1Environments f1Environment)
        {
            string returnValue = string.Empty;

            switch (f1Environment)
            {
                case F1Environments.LV_QA:
                    returnValue = "QA";
                    break;
                case F1Environments.LV_UAT:
                case F1Environments.STAGING:
                    returnValue = "STAGING";
                    break;
                case F1Environments.INT:
                    returnValue = "INT";
                    break;
                case F1Environments.INT2:
                    returnValue = "INT2";
                    break;
                case F1Environments.INT3:
                    returnValue = "INT3";
                    break;
                case F1Environments.LV_PROD:
                case F1Environments.PRODUCTION:
                    returnValue = "PROD";
                    break;
                default:
                    throw new Exception(string.Format("[{0}] is Not a valid LV environment option!", f1Environment));

            }

            return returnValue.ToLower();

        }

        #endregion Static Methods

        public object SECONDS { get; set; }


    }
    public class PromocodeEntity {
        public bool IsAmount;
        public string StartDate;
        public string EndDate;
        public double Amount;
        public uint Percentage;
        public string PromocodeName;
        public string Promocode;
    }
}

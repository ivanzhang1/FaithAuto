#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QAUtil.Controllers
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ChmContribution")]
	public partial class PaymentsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertProviderRequest(ProviderRequest instance);
    partial void UpdateProviderRequest(ProviderRequest instance);
    partial void DeleteProviderRequest(ProviderRequest instance);
    partial void InsertPaymentReason(PaymentReason instance);
    partial void UpdatePaymentReason(PaymentReason instance);
    partial void DeletePaymentReason(PaymentReason instance);
    partial void InsertPaymentStatus(PaymentStatus instance);
    partial void UpdatePaymentStatus(PaymentStatus instance);
    partial void DeletePaymentStatus(PaymentStatus instance);
    #endregion
		
		public PaymentsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ChmContributionConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PaymentsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<ProviderRequest> ProviderRequests
		{
			get
			{
				return this.GetTable<ProviderRequest>();
			}
		}
		
		public System.Data.Linq.Table<PaymentReason> PaymentReasons
		{
			get
			{
				return this.GetTable<PaymentReason>();
			}
		}
		
		public System.Data.Linq.Table<PaymentStatus> PaymentStatus
		{
			get
			{
				return this.GetTable<PaymentStatus>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentID;
		
		private int _ChurchID;
		
		private System.Nullable<int> _PaymentInformationID;
		
		private System.Nullable<int> _PaymentStatusID;
		
		private System.Nullable<int> _TransactionID;
		
		private int _HouseholdID;
		
		private System.Nullable<int> _IndividualID;
		
		private System.Nullable<decimal> _AuthAmount;
		
		private decimal _Amount;
		
		private System.Nullable<System.DateTime> _AuthorizationDate;
		
		private string _AuthorizationCode;
		
		private System.Nullable<System.DateTime> _ScheduledPaymentDate;
		
		private System.Nullable<System.DateTime> _ProcessedDate;
		
		private System.Nullable<int> _MerchantAccountID;
		
		private System.DateTime _CreatedDate;
		
		private string _CreatedByLogin;
		
		private int _CreatedByIndividualID;
		
		private System.Nullable<System.DateTime> _LastUpdatedDate;
		
		private string _LastUpdatedByLogin;
		
		private System.Nullable<int> _LastUpdatedByIndividualID;
		
		private System.Nullable<System.DateTime> _DeletedDate;
		
		private string _DeletedByLogin;
		
		private System.Nullable<int> _DeletedByIndividualID;
		
		private System.Data.Linq.Binary _TStamp;
		
		private string _MerchantID;
		
		private string _MerchantReferenceCode;
		
		private string _ClientApplication;
		
		private string _ClientUser;
		
		private string _ClientApplicationVersion;
		
		private string _AuthorizationRequestID;
		
		private System.Nullable<int> _ContextTypeID;
		
		private System.Nullable<int> _ContextValueID;
		
		private EntitySet<ProviderRequest> _ProviderRequests;
		
		private EntityRef<PaymentStatus> _PaymentStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentIDChanging(int value);
    partial void OnPaymentIDChanged();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    partial void OnPaymentInformationIDChanging(System.Nullable<int> value);
    partial void OnPaymentInformationIDChanged();
    partial void OnPaymentStatusIDChanging(System.Nullable<int> value);
    partial void OnPaymentStatusIDChanged();
    partial void OnTransactionIDChanging(System.Nullable<int> value);
    partial void OnTransactionIDChanged();
    partial void OnHouseholdIDChanging(int value);
    partial void OnHouseholdIDChanged();
    partial void OnIndividualIDChanging(System.Nullable<int> value);
    partial void OnIndividualIDChanged();
    partial void OnAuthAmountChanging(System.Nullable<decimal> value);
    partial void OnAuthAmountChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAuthorizationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuthorizationDateChanged();
    partial void OnAuthorizationCodeChanging(string value);
    partial void OnAuthorizationCodeChanged();
    partial void OnScheduledPaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnScheduledPaymentDateChanged();
    partial void OnProcessedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProcessedDateChanged();
    partial void OnMerchantAccountIDChanging(System.Nullable<int> value);
    partial void OnMerchantAccountIDChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByLoginChanging(string value);
    partial void OnCreatedByLoginChanged();
    partial void OnCreatedByIndividualIDChanging(int value);
    partial void OnCreatedByIndividualIDChanged();
    partial void OnLastUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdatedDateChanged();
    partial void OnLastUpdatedByLoginChanging(string value);
    partial void OnLastUpdatedByLoginChanged();
    partial void OnLastUpdatedByIndividualIDChanging(System.Nullable<int> value);
    partial void OnLastUpdatedByIndividualIDChanged();
    partial void OnDeletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedDateChanged();
    partial void OnDeletedByLoginChanging(string value);
    partial void OnDeletedByLoginChanged();
    partial void OnDeletedByIndividualIDChanging(System.Nullable<int> value);
    partial void OnDeletedByIndividualIDChanged();
    partial void OnTStampChanging(System.Data.Linq.Binary value);
    partial void OnTStampChanged();
    partial void OnMerchantIDChanging(string value);
    partial void OnMerchantIDChanged();
    partial void OnMerchantReferenceCodeChanging(string value);
    partial void OnMerchantReferenceCodeChanged();
    partial void OnClientApplicationChanging(string value);
    partial void OnClientApplicationChanged();
    partial void OnClientUserChanging(string value);
    partial void OnClientUserChanged();
    partial void OnClientApplicationVersionChanging(string value);
    partial void OnClientApplicationVersionChanged();
    partial void OnAuthorizationRequestIDChanging(string value);
    partial void OnAuthorizationRequestIDChanged();
    partial void OnContextTypeIDChanging(System.Nullable<int> value);
    partial void OnContextTypeIDChanged();
    partial void OnContextValueIDChanging(System.Nullable<int> value);
    partial void OnContextValueIDChanged();
    #endregion
		
		public Payment()
		{
			this._ProviderRequests = new EntitySet<ProviderRequest>(new Action<ProviderRequest>(this.attach_ProviderRequests), new Action<ProviderRequest>(this.detach_ProviderRequests));
			this._PaymentStatus = default(EntityRef<PaymentStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentInformationID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PaymentInformationID
		{
			get
			{
				return this._PaymentInformationID;
			}
			set
			{
				if ((this._PaymentInformationID != value))
				{
					this.OnPaymentInformationIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentInformationID = value;
					this.SendPropertyChanged("PaymentInformationID");
					this.OnPaymentInformationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatusID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PaymentStatusID
		{
			get
			{
				return this._PaymentStatusID;
			}
			set
			{
				if ((this._PaymentStatusID != value))
				{
					if (this._PaymentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatusID = value;
					this.SendPropertyChanged("PaymentStatusID");
					this.OnPaymentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseholdID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int HouseholdID
		{
			get
			{
				return this._HouseholdID;
			}
			set
			{
				if ((this._HouseholdID != value))
				{
					this.OnHouseholdIDChanging(value);
					this.SendPropertyChanging();
					this._HouseholdID = value;
					this.SendPropertyChanged("HouseholdID");
					this.OnHouseholdIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndividualID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> IndividualID
		{
			get
			{
				return this._IndividualID;
			}
			set
			{
				if ((this._IndividualID != value))
				{
					this.OnIndividualIDChanging(value);
					this.SendPropertyChanging();
					this._IndividualID = value;
					this.SendPropertyChanged("IndividualID");
					this.OnIndividualIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthAmount", DbType="Money", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> AuthAmount
		{
			get
			{
				return this._AuthAmount;
			}
			set
			{
				if ((this._AuthAmount != value))
				{
					this.OnAuthAmountChanging(value);
					this.SendPropertyChanging();
					this._AuthAmount = value;
					this.SendPropertyChanged("AuthAmount");
					this.OnAuthAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AuthorizationDate
		{
			get
			{
				return this._AuthorizationDate;
			}
			set
			{
				if ((this._AuthorizationDate != value))
				{
					this.OnAuthorizationDateChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationDate = value;
					this.SendPropertyChanged("AuthorizationDate");
					this.OnAuthorizationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationCode", DbType="VarChar(256)", UpdateCheck=UpdateCheck.Never)]
		public string AuthorizationCode
		{
			get
			{
				return this._AuthorizationCode;
			}
			set
			{
				if ((this._AuthorizationCode != value))
				{
					this.OnAuthorizationCodeChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationCode = value;
					this.SendPropertyChanged("AuthorizationCode");
					this.OnAuthorizationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScheduledPaymentDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ScheduledPaymentDate
		{
			get
			{
				return this._ScheduledPaymentDate;
			}
			set
			{
				if ((this._ScheduledPaymentDate != value))
				{
					this.OnScheduledPaymentDateChanging(value);
					this.SendPropertyChanging();
					this._ScheduledPaymentDate = value;
					this.SendPropertyChanged("ScheduledPaymentDate");
					this.OnScheduledPaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProcessedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> ProcessedDate
		{
			get
			{
				return this._ProcessedDate;
			}
			set
			{
				if ((this._ProcessedDate != value))
				{
					this.OnProcessedDateChanging(value);
					this.SendPropertyChanging();
					this._ProcessedDate = value;
					this.SendPropertyChanged("ProcessedDate");
					this.OnProcessedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchantAccountID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> MerchantAccountID
		{
			get
			{
				return this._MerchantAccountID;
			}
			set
			{
				if ((this._MerchantAccountID != value))
				{
					this.OnMerchantAccountIDChanging(value);
					this.SendPropertyChanging();
					this._MerchantAccountID = value;
					this.SendPropertyChanged("MerchantAccountID");
					this.OnMerchantAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByLogin", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CreatedByLogin
		{
			get
			{
				return this._CreatedByLogin;
			}
			set
			{
				if ((this._CreatedByLogin != value))
				{
					this.OnCreatedByLoginChanging(value);
					this.SendPropertyChanging();
					this._CreatedByLogin = value;
					this.SendPropertyChanged("CreatedByLogin");
					this.OnCreatedByLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByIndividualID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CreatedByIndividualID
		{
			get
			{
				return this._CreatedByIndividualID;
			}
			set
			{
				if ((this._CreatedByIndividualID != value))
				{
					this.OnCreatedByIndividualIDChanging(value);
					this.SendPropertyChanging();
					this._CreatedByIndividualID = value;
					this.SendPropertyChanged("CreatedByIndividualID");
					this.OnCreatedByIndividualIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedByLogin", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string LastUpdatedByLogin
		{
			get
			{
				return this._LastUpdatedByLogin;
			}
			set
			{
				if ((this._LastUpdatedByLogin != value))
				{
					this.OnLastUpdatedByLoginChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedByLogin = value;
					this.SendPropertyChanged("LastUpdatedByLogin");
					this.OnLastUpdatedByLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedByIndividualID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> LastUpdatedByIndividualID
		{
			get
			{
				return this._LastUpdatedByIndividualID;
			}
			set
			{
				if ((this._LastUpdatedByIndividualID != value))
				{
					this.OnLastUpdatedByIndividualIDChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedByIndividualID = value;
					this.SendPropertyChanged("LastUpdatedByIndividualID");
					this.OnLastUpdatedByIndividualIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DeletedDate
		{
			get
			{
				return this._DeletedDate;
			}
			set
			{
				if ((this._DeletedDate != value))
				{
					this.OnDeletedDateChanging(value);
					this.SendPropertyChanging();
					this._DeletedDate = value;
					this.SendPropertyChanged("DeletedDate");
					this.OnDeletedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedByLogin", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string DeletedByLogin
		{
			get
			{
				return this._DeletedByLogin;
			}
			set
			{
				if ((this._DeletedByLogin != value))
				{
					this.OnDeletedByLoginChanging(value);
					this.SendPropertyChanging();
					this._DeletedByLogin = value;
					this.SendPropertyChanged("DeletedByLogin");
					this.OnDeletedByLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedByIndividualID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DeletedByIndividualID
		{
			get
			{
				return this._DeletedByIndividualID;
			}
			set
			{
				if ((this._DeletedByIndividualID != value))
				{
					this.OnDeletedByIndividualIDChanging(value);
					this.SendPropertyChanging();
					this._DeletedByIndividualID = value;
					this.SendPropertyChanged("DeletedByIndividualID");
					this.OnDeletedByIndividualIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TStamp", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary TStamp
		{
			get
			{
				return this._TStamp;
			}
			set
			{
				if ((this._TStamp != value))
				{
					this.OnTStampChanging(value);
					this.SendPropertyChanging();
					this._TStamp = value;
					this.SendPropertyChanged("TStamp");
					this.OnTStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchantID", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string MerchantID
		{
			get
			{
				return this._MerchantID;
			}
			set
			{
				if ((this._MerchantID != value))
				{
					this.OnMerchantIDChanging(value);
					this.SendPropertyChanging();
					this._MerchantID = value;
					this.SendPropertyChanged("MerchantID");
					this.OnMerchantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchantReferenceCode", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string MerchantReferenceCode
		{
			get
			{
				return this._MerchantReferenceCode;
			}
			set
			{
				if ((this._MerchantReferenceCode != value))
				{
					this.OnMerchantReferenceCodeChanging(value);
					this.SendPropertyChanging();
					this._MerchantReferenceCode = value;
					this.SendPropertyChanged("MerchantReferenceCode");
					this.OnMerchantReferenceCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientApplication", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ClientApplication
		{
			get
			{
				return this._ClientApplication;
			}
			set
			{
				if ((this._ClientApplication != value))
				{
					this.OnClientApplicationChanging(value);
					this.SendPropertyChanging();
					this._ClientApplication = value;
					this.SendPropertyChanged("ClientApplication");
					this.OnClientApplicationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientUser", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ClientUser
		{
			get
			{
				return this._ClientUser;
			}
			set
			{
				if ((this._ClientUser != value))
				{
					this.OnClientUserChanging(value);
					this.SendPropertyChanging();
					this._ClientUser = value;
					this.SendPropertyChanged("ClientUser");
					this.OnClientUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientApplicationVersion", DbType="VarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string ClientApplicationVersion
		{
			get
			{
				return this._ClientApplicationVersion;
			}
			set
			{
				if ((this._ClientApplicationVersion != value))
				{
					this.OnClientApplicationVersionChanging(value);
					this.SendPropertyChanging();
					this._ClientApplicationVersion = value;
					this.SendPropertyChanged("ClientApplicationVersion");
					this.OnClientApplicationVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorizationRequestID", DbType="VarChar(40)", UpdateCheck=UpdateCheck.Never)]
		public string AuthorizationRequestID
		{
			get
			{
				return this._AuthorizationRequestID;
			}
			set
			{
				if ((this._AuthorizationRequestID != value))
				{
					this.OnAuthorizationRequestIDChanging(value);
					this.SendPropertyChanging();
					this._AuthorizationRequestID = value;
					this.SendPropertyChanged("AuthorizationRequestID");
					this.OnAuthorizationRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextTypeID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ContextTypeID
		{
			get
			{
				return this._ContextTypeID;
			}
			set
			{
				if ((this._ContextTypeID != value))
				{
					this.OnContextTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ContextTypeID = value;
					this.SendPropertyChanged("ContextTypeID");
					this.OnContextTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContextValueID", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ContextValueID
		{
			get
			{
				return this._ContextValueID;
			}
			set
			{
				if ((this._ContextValueID != value))
				{
					this.OnContextValueIDChanging(value);
					this.SendPropertyChanging();
					this._ContextValueID = value;
					this.SendPropertyChanged("ContextValueID");
					this.OnContextValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_ProviderRequest", Storage="_ProviderRequests", ThisKey="PaymentID", OtherKey="PaymentID")]
		public EntitySet<ProviderRequest> ProviderRequests
		{
			get
			{
				return this._ProviderRequests;
			}
			set
			{
				this._ProviderRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentStatus_Payment", Storage="_PaymentStatus", ThisKey="PaymentStatusID", OtherKey="PaymentStatusID", IsForeignKey=true)]
		public PaymentStatus PaymentStatus
		{
			get
			{
				return this._PaymentStatus.Entity;
			}
			set
			{
				PaymentStatus previousValue = this._PaymentStatus.Entity;
				if (((previousValue != value) 
							|| (this._PaymentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentStatus.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._PaymentStatus.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._PaymentStatusID = value.PaymentStatusID;
					}
					else
					{
						this._PaymentStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProviderRequests(ProviderRequest entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_ProviderRequests(ProviderRequest entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProviderRequest")]
	public partial class ProviderRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProviderRequestID;
		
		private int _ChurchID;
		
		private int _ProviderRequestTypeID;
		
		private System.Nullable<int> _PaymentID;
		
		private int _MerchantProviderID;
		
		private System.Xml.Linq.XElement _RequestXML;
		
		private System.DateTime _CreatedDate;
		
		private string _CreatedByLogin;
		
		private System.Xml.Linq.XElement _ReplyXML;
		
		private string _ReconciliationID;
		
		private System.Nullable<int> _PaymentReasonID;
		
		private EntityRef<Payment> _Payment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderRequestIDChanging(int value);
    partial void OnProviderRequestIDChanged();
    partial void OnChurchIDChanging(int value);
    partial void OnChurchIDChanged();
    partial void OnProviderRequestTypeIDChanging(int value);
    partial void OnProviderRequestTypeIDChanged();
    partial void OnPaymentIDChanging(System.Nullable<int> value);
    partial void OnPaymentIDChanged();
    partial void OnMerchantProviderIDChanging(int value);
    partial void OnMerchantProviderIDChanged();
    partial void OnRequestXMLChanging(System.Xml.Linq.XElement value);
    partial void OnRequestXMLChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByLoginChanging(string value);
    partial void OnCreatedByLoginChanged();
    partial void OnReplyXMLChanging(System.Xml.Linq.XElement value);
    partial void OnReplyXMLChanged();
    partial void OnReconciliationIDChanging(string value);
    partial void OnReconciliationIDChanged();
    partial void OnPaymentReasonIDChanging(System.Nullable<int> value);
    partial void OnPaymentReasonIDChanged();
    #endregion
		
		public ProviderRequest()
		{
			this._Payment = default(EntityRef<Payment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderRequestID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProviderRequestID
		{
			get
			{
				return this._ProviderRequestID;
			}
			set
			{
				if ((this._ProviderRequestID != value))
				{
					this.OnProviderRequestIDChanging(value);
					this.SendPropertyChanging();
					this._ProviderRequestID = value;
					this.SendPropertyChanged("ProviderRequestID");
					this.OnProviderRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChurchID", DbType="Int NOT NULL")]
		public int ChurchID
		{
			get
			{
				return this._ChurchID;
			}
			set
			{
				if ((this._ChurchID != value))
				{
					this.OnChurchIDChanging(value);
					this.SendPropertyChanging();
					this._ChurchID = value;
					this.SendPropertyChanged("ChurchID");
					this.OnChurchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderRequestTypeID", DbType="Int NOT NULL")]
		public int ProviderRequestTypeID
		{
			get
			{
				return this._ProviderRequestTypeID;
			}
			set
			{
				if ((this._ProviderRequestTypeID != value))
				{
					this.OnProviderRequestTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ProviderRequestTypeID = value;
					this.SendPropertyChanged("ProviderRequestTypeID");
					this.OnProviderRequestTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentID", DbType="Int")]
		public System.Nullable<int> PaymentID
		{
			get
			{
				return this._PaymentID;
			}
			set
			{
				if ((this._PaymentID != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentID = value;
					this.SendPropertyChanged("PaymentID");
					this.OnPaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchantProviderID", DbType="Int NOT NULL")]
		public int MerchantProviderID
		{
			get
			{
				return this._MerchantProviderID;
			}
			set
			{
				if ((this._MerchantProviderID != value))
				{
					this.OnMerchantProviderIDChanging(value);
					this.SendPropertyChanging();
					this._MerchantProviderID = value;
					this.SendPropertyChanged("MerchantProviderID");
					this.OnMerchantProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestXML", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement RequestXML
		{
			get
			{
				return this._RequestXML;
			}
			set
			{
				if ((this._RequestXML != value))
				{
					this.OnRequestXMLChanging(value);
					this.SendPropertyChanging();
					this._RequestXML = value;
					this.SendPropertyChanged("RequestXML");
					this.OnRequestXMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByLogin", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreatedByLogin
		{
			get
			{
				return this._CreatedByLogin;
			}
			set
			{
				if ((this._CreatedByLogin != value))
				{
					this.OnCreatedByLoginChanging(value);
					this.SendPropertyChanging();
					this._CreatedByLogin = value;
					this.SendPropertyChanged("CreatedByLogin");
					this.OnCreatedByLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplyXML", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement ReplyXML
		{
			get
			{
				return this._ReplyXML;
			}
			set
			{
				if ((this._ReplyXML != value))
				{
					this.OnReplyXMLChanging(value);
					this.SendPropertyChanging();
					this._ReplyXML = value;
					this.SendPropertyChanged("ReplyXML");
					this.OnReplyXMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReconciliationID", DbType="VarChar(60)")]
		public string ReconciliationID
		{
			get
			{
				return this._ReconciliationID;
			}
			set
			{
				if ((this._ReconciliationID != value))
				{
					this.OnReconciliationIDChanging(value);
					this.SendPropertyChanging();
					this._ReconciliationID = value;
					this.SendPropertyChanged("ReconciliationID");
					this.OnReconciliationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentReasonID", DbType="Int")]
		public System.Nullable<int> PaymentReasonID
		{
			get
			{
				return this._PaymentReasonID;
			}
			set
			{
				if ((this._PaymentReasonID != value))
				{
					this.OnPaymentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentReasonID = value;
					this.SendPropertyChanged("PaymentReasonID");
					this.OnPaymentReasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_ProviderRequest", Storage="_Payment", ThisKey="PaymentID", OtherKey="PaymentID", IsForeignKey=true)]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.ProviderRequests.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.ProviderRequests.Add(this);
						this._PaymentID = value.PaymentID;
					}
					else
					{
						this._PaymentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentReason")]
	public partial class PaymentReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentReasonID;
		
		private string _ReasonCode;
		
		private string _Description;
		
		private int _MerchantProviderID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentReasonIDChanging(int value);
    partial void OnPaymentReasonIDChanged();
    partial void OnReasonCodeChanging(string value);
    partial void OnReasonCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMerchantProviderIDChanging(int value);
    partial void OnMerchantProviderIDChanged();
    #endregion
		
		public PaymentReason()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentReasonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PaymentReasonID
		{
			get
			{
				return this._PaymentReasonID;
			}
			set
			{
				if ((this._PaymentReasonID != value))
				{
					this.OnPaymentReasonIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentReasonID = value;
					this.SendPropertyChanged("PaymentReasonID");
					this.OnPaymentReasonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReasonCode", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string ReasonCode
		{
			get
			{
				return this._ReasonCode;
			}
			set
			{
				if ((this._ReasonCode != value))
				{
					this.OnReasonCodeChanging(value);
					this.SendPropertyChanging();
					this._ReasonCode = value;
					this.SendPropertyChanged("ReasonCode");
					this.OnReasonCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MerchantProviderID", DbType="Int NOT NULL")]
		public int MerchantProviderID
		{
			get
			{
				return this._MerchantProviderID;
			}
			set
			{
				if ((this._MerchantProviderID != value))
				{
					this.OnMerchantProviderIDChanging(value);
					this.SendPropertyChanging();
					this._MerchantProviderID = value;
					this.SendPropertyChanged("MerchantProviderID");
					this.OnMerchantProviderIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentStatus")]
	public partial class PaymentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentStatusID;
		
		private string _PaymentStatusName;
		
		private EntitySet<Payment> _Payments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentStatusIDChanging(int value);
    partial void OnPaymentStatusIDChanged();
    partial void OnPaymentStatusNameChanging(string value);
    partial void OnPaymentStatusNameChanged();
    #endregion
		
		public PaymentStatus()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentStatusID
		{
			get
			{
				return this._PaymentStatusID;
			}
			set
			{
				if ((this._PaymentStatusID != value))
				{
					this.OnPaymentStatusIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatusID = value;
					this.SendPropertyChanged("PaymentStatusID");
					this.OnPaymentStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentStatusName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PaymentStatusName
		{
			get
			{
				return this._PaymentStatusName;
			}
			set
			{
				if ((this._PaymentStatusName != value))
				{
					this.OnPaymentStatusNameChanging(value);
					this.SendPropertyChanging();
					this._PaymentStatusName = value;
					this.SendPropertyChanged("PaymentStatusName");
					this.OnPaymentStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentStatus_Payment", Storage="_Payments", ThisKey="PaymentStatusID", OtherKey="PaymentStatusID")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentStatus = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.PaymentStatus = null;
		}
	}
}
#pragma warning restore 1591
